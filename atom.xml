<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[0.肆玖]]></title>
  <subtitle><![CDATA[自称数学家，半个程序员]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-23T12:59:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[dna049]]></name>
    <email><![CDATA[dna049@foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[hexo 中插入图片最简单方式]]></title>
    <link href="http://yoursite.com/2015/12/23/hexo-%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/12/23/hexo-中插入图片最简单方式/</id>
    <published>2015-12-23T12:42:32.000Z</published>
    <updated>2015-12-23T12:59:25.000Z</updated>
    <content type="html"><![CDATA[<p>因为上一篇博文需要贴一张本地图片，奈何技术上无法解决。后来查了官方文档，询问hexo交流群（287306637）之后，有给出解决方案（用图床）但是不是我想要的方式，最终通过<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="external">官方文档</a>找到了答案</p>
<a id="more"></a>
<p>方法其实很简单，只需再修改 _config.yml 文件中的</p>
<pre><code>post_asset_folder: false
</code></pre><p>改成</p>
<pre><code>post_asset_folder: true
</code></pre><p>然后举个例子大家就明白了。</p>
<pre><code>hexo new &quot;example&quot;
</code></pre><p>经过上面设置之后，source 目录下会多出一个 example 的目录。在这个example目录下放一张 math.png 的图片，然后在 example.md 中加入 </p>
<pre><code>![图片加载中](math.png)
</code></pre><p>即可。就是这么简单。<br><img src="example.png" alt="Loading"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为上一篇博文需要贴一张本地图片，奈何技术上无法解决。后来查了官方文档，询问hexo交流群（287306637）之后，有给出解决方案（用图床）但是不是我想要的方式，最终通过<a href="https://hexo.io/docs/asset-folders.html">官方文档</a>找到了答案</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[本科数学系学习路线图]]></title>
    <link href="http://yoursite.com/2015/12/23/%E6%9C%AC%E7%A7%91%E6%95%B0%E5%AD%A6%E7%B3%BB%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>http://yoursite.com/2015/12/23/本科数学系学习路线图/</id>
    <published>2015-12-23T09:52:57.000Z</published>
    <updated>2015-12-23T12:37:21.000Z</updated>
    <content type="html"><![CDATA[<p>最近在看刘培德先生的书《拓扑线性空间和算子谱理论》，简直爱不释手。而拓扑线性空间理论是在1950年左右由<a href="https://sv.wikipedia.org/wiki/Nicolas_Bourbaki" target="_blank" rel="external">Nicolas Bourbaki学派</a>建立。不禁让我回顾本科学习生涯中，从学习300年前一直到100年前的数学，现在又在学习几十年前的数学。于是就把本科学习路线总结如下图，下图由此<a href="https://www.processon.com" target="_blank" rel="external">网站</a>在线产生</p>
<a id="more"></a>
<p><img src="math.png" alt="图片加载中0.0"></p>
<p>上图中颜色代表了一定的重要性，而尺寸大的代表其基础重要性。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在看刘培德先生的书《拓扑线性空间和算子谱理论》，简直爱不释手。而拓扑线性空间理论是在1950年左右由<a href="https://sv.wikipedia.org/wiki/Nicolas_Bourbaki">Nicolas Bourbaki学派</a>建立。不禁让我回顾本科学习生涯中，从学习300年前一直到100年前的数学，现在又在学习几十年前的数学。于是就把本科学习路线总结如下图，下图由此<a href="https://www.processon.com">网站</a>在线产生</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[拓扑线性空间中的开集和闭集]]></title>
    <link href="http://yoursite.com/2015/12/20/%E6%8B%93%E6%89%91%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E5%BC%80%E9%9B%86%E5%92%8C%E9%97%AD%E9%9B%86/"/>
    <id>http://yoursite.com/2015/12/20/拓扑线性空间中的开集和闭集/</id>
    <published>2015-12-20T15:13:32.000Z</published>
    <updated>2015-12-21T03:05:11.000Z</updated>
    <content type="html"><![CDATA[<p>在复习泛函分析的时候，因为很多结论可以推广到更为一般的情况，因此就看了刘培德先生编著的《拓扑线性空间与算子谱理论》这本书。然后在书中读到了有关开集和闭集的一些性质，在此总结一下，先叙述一下结论。<br>在拓扑线性空间中，</p>
<ol>
<li>若A是开集，B是任意集合，则A+B是开集。</li>
<li>若A是闭集，B是闭集，则A+B不一定为闭集。</li>
<li>若A是紧集，B是闭集，则A+B是闭集。<a id="more"></a>
</li>
</ol>
<h4 id="u62D3_u6251_u7EBF_u6027_u7A7A_u95F4"><a href="#u62D3_u6251_u7EBF_u6027_u7A7A_u95F4" class="headerlink" title="拓扑线性空间"></a>拓扑线性空间</h4><p>拓扑线性空间是一类其线性结构与最一般的拓扑结构有机结合的集合。它作为泛函分析的分支产生于20世纪40到50年代，至今仍然是现代数学乃至自然科学中讨论有关问题和相关理论的最为广泛的框架。它的产生很大直接或间接来自数学上赫赫有名的<a href="https://en.wikipedia.org/wiki/Nicolas_Bourbaki" target="_blank" rel="external">Nicolas Bourbaki学派</a>。</p>
<h5 id="u62D3_u6251_u7EBF_u6027_u7A7A_u95F4_u7684_u5B9A_u4E49"><a href="#u62D3_u6251_u7EBF_u6027_u7A7A_u95F4_u7684_u5B9A_u4E49" class="headerlink" title="拓扑线性空间的定义"></a>拓扑线性空间的定义</h5><p>设X是标量域K(实数域或复数域)上的拓扑线性空间，$\tau$是X上的拓扑，若</p>
<ol>
<li>对于每一点$x \in X$，单点集$\lbrace x \rbrace$是X中的闭集。</li>
<li>线性空间的加法和数乘关于$\tau$连续。</li>
</ol>
<p>则称X是拓扑线性空间（TLS）<br>注：至于线性空间和拓扑的定义是很容易查到。上面条件1说明TLS必然是T1空间，但是经过推理可知TLS是T3空间，因而必然是Hausdorff的。拓扑线性空间的拓扑有很多很好的性质，这里不再多说了。</p>
<h5 id="u7ED3_u8BBA_u7684_u8BC1_u660E"><a href="#u7ED3_u8BBA_u7684_u8BC1_u660E" class="headerlink" title="结论的证明"></a>结论的证明</h5><p>首先，开集，闭集，紧集这些概念完全是依赖拓扑的。具体可查熊金城《点集拓扑学讲义》，线性空间可以查任何一本线性代数或者高等代数的书。<br>Proof：<br>(i) 若A是开集，B是任意集合，则A+B是开集。<br>因为<span>$A+B = \cup _ {y \in B} A+y$</span><!-- Has MathJax -->是开集，证毕。<br>(ii) 若A是闭集，B是闭集，则A+B不一定为闭集。<br>不妨设<span>$A＝\lbrace (x,y) \;|\; x&gt;0,xy \geq 1 \rbrace ,B＝\lbrace (x,y) \;|\; x&gt;0,xy \leq -1 \rbrace$</span><!-- Has MathJax -->则显然A、B是闭集，但是<span>$A+B =\lbrace (x,y) \;|\; x&gt;0 \rbrace$</span><!-- Has MathJax -->是开集且不是闭集。<br>(iii) 若A是紧集，B是闭集，则A+B是闭集。<br>这里的证明需要用到拓扑的两个结论</p>
<ol>
<li>$x \in \overline{A}$当且仅当A中有网（<span>$x _ {\lambda}, \lambda \in \Lambda,x _ \lambda \to x$</span><!-- Has MathJax -->)</li>
<li>A紧当且仅当A中每一个网 <span>$x _ {\lambda}, \lambda \in \Lambda$</span><!-- Has MathJax -->都有极限点（即有收敛子网）</li>
</ol>
<p>若$c \in \overline{A+B}$，则存在网（<span>$c _ {\lambda}= a _ {\lambda} +b _ {\lambda}, \lambda \in \Lambda$</span><!-- Has MathJax -->）使得<span>$c _ {\lambda} \to c$</span><!-- Has MathJax -->,这里<span>$a _ {\lambda} \in A , b _ {\lambda} \in B$</span><!-- Has MathJax -->。由于A紧，于是有子网<span>$a _ {\lambda&apos;} , \lambda&apos; \in \Lambda&apos; \subset \Lambda$</span><!-- Has MathJax -->）使得<span>$a _ {\lambda&apos;} \to a$</span><!-- Has MathJax -->此时<span>$b _ {\lambda&apos;} = c _ {\lambda&apos;} - a _ {\lambda&apos;} \to c-a = b$</span><!-- Has MathJax -->，由于B是闭集，故$b \in B$。于是$c = a + b \in A+B$，即$\overline{A+B} ＝ A+B$，所以A+B是闭的。</p>
<h5 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h5><p>其实现代数学最大的问题，不是不知道怎么处理问题，而是根本不懂问题在说什么。</p>
<p>我们要相当的努力才能认识到自己是傻逼的事实。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在复习泛函分析的时候，因为很多结论可以推广到更为一般的情况，因此就看了刘培德先生编著的《拓扑线性空间与算子谱理论》这本书。然后在书中读到了有关开集和闭集的一些性质，在此总结一下，先叙述一下结论。<br>在拓扑线性空间中，</p>
<ol>
<li>若A是开集，B是任意集合，则A+B是开集。</li>
<li>若A是闭集，B是闭集，则A+B不一定为闭集。</li>
<li>若A是紧集，B是闭集，则A+B是闭集。]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Perron-Frobenius理论]]></title>
    <link href="http://yoursite.com/2015/12/17/Perron-Frobenius%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2015/12/17/Perron-Frobenius理论/</id>
    <published>2015-12-17T02:27:18.000Z</published>
    <updated>2015-12-18T01:26:32.000Z</updated>
    <content type="html"><![CDATA[<p>1907年O.Perron发现正矩阵的谱有特别有趣的性质。G.Frobenius在1908-1912年间将Perron的工作推广到不可约非负矩阵的情形，并得到了新的进一步结果。Ferron-Frobenius理论有很多证明方式，下面介绍H.Wielandt的优美证明。<br><a id="more"></a></p>
<p>两个矩阵X和Y称为置换相似的，若存在一个置换矩阵P满足$P^TXP=Y$。设$A\in M_n$.称A为可约的，若A置换相似于一个形如<br><span>$$\left( \begin{matrix}
B &amp; 0\\
C &amp; D
\end{matrix} \right)$$</span><!-- Has MathJax --><br>其中B，D为方阵，若A不是可约的，则称A是不可约的。</p>
<h5 id="u5F15_u74061__u8BBEA_u662Fn_28n_26gt_3B1_29_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_24y_5Cin__5Cmathbf_7BR_7D_+_5E_7Bn_7D__5Cbackslash__5Clbrace_0__5Crbrace__24__u4E14_u81F3_u5C11_u6709_u4E00_u4E2A_u5206_u91CF_u4E3A0-_u5219__24_28I+A_29y_24__u7684_u6B63_u5206_u91CF_u7684_u4E2A_u6570_u5927_u4E8Ey_u7684_u6B63_u5206_u91CF_u4E2A_u6570_u3002"><a href="#u5F15_u74061__u8BBEA_u662Fn_28n_26gt_3B1_29_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_24y_5Cin__5Cmathbf_7BR_7D_+_5E_7Bn_7D__5Cbackslash__5Clbrace_0__5Crbrace__24__u4E14_u81F3_u5C11_u6709_u4E00_u4E2A_u5206_u91CF_u4E3A0-_u5219__24_28I+A_29y_24__u7684_u6B63_u5206_u91CF_u7684_u4E2A_u6570_u5927_u4E8Ey_u7684_u6B63_u5206_u91CF_u4E2A_u6570_u3002" class="headerlink" title="引理1 设A是n(n&gt;1)阶不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 且至少有一个分量为0.则 $(I+A)y$ 的正分量的个数大于y的正分量个数。"></a>引理1 设A是n(n&gt;1)阶不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 且至少有一个分量为0.则 $(I+A)y$ 的正分量的个数大于y的正分量个数。</h5><p>Proof： 设y恰好有k个正分量，$1 \leq k \leq n-1$。设P是置换矩阵使得$x=Py$的前k个分量为正，其它为0，因为A是非负矩阵，所以$(I+A)y$的零分量个数不会超过$n-k$。假设这个个数等于$n-k$，则有$y_i = 0 \Rightarrow (Ay)_i = 0$。即$(Py)_i = 0 \Rightarrow (PAy)_i = 0$ 于是$(PAP^Tx)_i = 0,i=k+1,\cdots,n$，设$B=PAP^T$. 则当$k+1 \leq i \leq n$ 时，<br><span>$$(Bx)_i = \sum _{j=1} ^{n} b _{ij} x _j = 
\sum _{j=1} ^{k} b _{ij} x _j = 0$$</span><!-- Has MathJax --></p>
<p>但当$1 \leq j \leq k$时，<span>$x _ j &gt;0$</span><!-- Has MathJax -->。所以<span>$b _{ij}=0,k+1 \leq i \leq n,1 \leq j \leq k$</span><!-- Has MathJax --> 矛盾于A不可约,证毕。</p>
<p>由引理1，我们马上得到以下结论</p>
<h5 id="u5F15_u74062__u8BBEA_u662Fn_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_24y_5Cin__5Cmathbf_7BR_7D_+_5E_7Bn_7D__5Cbackslash__5Clbrace_0__5Crbrace__24__u5219__24_28I+A_29_5E_7Bn-1_7Dy_26gt_3B0_24"><a href="#u5F15_u74062__u8BBEA_u662Fn_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_24y_5Cin__5Cmathbf_7BR_7D_+_5E_7Bn_7D__5Cbackslash__5Clbrace_0__5Crbrace__24__u5219__24_28I+A_29_5E_7Bn-1_7Dy_26gt_3B0_24" class="headerlink" title="引理2 设A是n阶不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 则 $(I+A)^{n-1}y&gt;0$."></a>引理2 设A是n阶不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 则 $(I+A)^{n-1}y&gt;0$.</h5><h5 id="u5F15_u74063__u8BBE_24n_26gt_3B1_24_u5219n_u9636_u975E_u8D1F_u77E9_u9635A_u4E0D_u53EF_u7EA6_u5F53_u4E14_u4EC5_u5F53_uFF0C_24y_5Cin__5Cmathbf_7BR_7D_+_5E_7Bn_7D__5Cbackslash__5Clbrace_0__5Crbrace__24__u5219__24_28I+A_29_5E_7Bn-1_7D_26gt_3B0_24"><a href="#u5F15_u74063__u8BBE_24n_26gt_3B1_24_u5219n_u9636_u975E_u8D1F_u77E9_u9635A_u4E0D_u53EF_u7EA6_u5F53_u4E14_u4EC5_u5F53_uFF0C_24y_5Cin__5Cmathbf_7BR_7D_+_5E_7Bn_7D__5Cbackslash__5Clbrace_0__5Crbrace__24__u5219__24_28I+A_29_5E_7Bn-1_7D_26gt_3B0_24" class="headerlink" title="引理3 设$n&gt;1$则n阶非负矩阵A不可约当且仅当，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 则 $(I+A)^{n-1}&gt;0$."></a>引理3 设$n&gt;1$则n阶非负矩阵A不可约当且仅当，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 则 $(I+A)^{n-1}&gt;0$.</h5><p>proof: 应用引理2，考虑$(I+A)^{n-1}e_j$即可。</p>
<h5 id="u5F15_u74064__u4E00_u4E2A_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_u7684_u975E_u8D1F_u7279_u5F81_u5411_u91CF_u662F_u6B63_u7279_u5F81_u5411_u91CF_u3002"><a href="#u5F15_u74064__u4E00_u4E2A_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_u7684_u975E_u8D1F_u7279_u5F81_u5411_u91CF_u662F_u6B63_u7279_u5F81_u5411_u91CF_u3002" class="headerlink" title="引理4 一个不可约非负矩阵的非负特征向量是正特征向量。"></a>引理4 一个不可约非负矩阵的非负特征向量是正特征向量。</h5><p>Proof：设A是不可约非负矩阵，$Ax=\lambda x, x \geq 0,x \neq 0$。显然 $\lambda \geq 0$ 我们有<br><span>$$(I+A)x = 
(1 + \lambda)x$$</span><!-- Has MathJax --><br>因此$(1+A)x$与$x$有相同个数的正分量，有引理1知$x&gt;0$。</p>
<h5 id="Collatz-Wielandt_u51FD_u6570"><a href="#Collatz-Wielandt_u51FD_u6570" class="headerlink" title="Collatz-Wielandt函数"></a>Collatz-Wielandt函数</h5><p>设A是一个n阶非负矩阵。A的Collatz－Wielandt函数<span>$f_A \colon \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace  \to \mathbf{R} _+$</span><!-- Has MathJax --><br>定义为<br><span>$$f_A(x) = \min _{ x _i \neq 0 } 
\frac{(Ax) _i }{x _i}$$</span><!-- Has MathJax --></p>
<h5 id="u5F15_u74065__u8BBEA_u4E3An_u9636_u975E_u8D1F_u4E0D_u53EF_u7EA6_u77E9_u9635_uFF0C_u5219"><a href="#u5F15_u74065__u8BBEA_u4E3An_u9636_u975E_u8D1F_u4E0D_u53EF_u7EA6_u77E9_u9635_uFF0C_u5219" class="headerlink" title="引理5 设A为n阶非负不可约矩阵，则"></a>引理5 设A为n阶非负不可约矩阵，则</h5><ol>
<li>$f_A(tx) = f_A(x), \forall t &gt; 0 $</li>
<li>$f_A(x) = \max \lbrace \rho | Ax-\rho x \geq 0 \rbrace$</li>
<li>设 $x \in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace $ ,记 $y = (I+A)^{n-1} x$ ,则 $ f_A(y) \geq f_A(x)$。</li>
</ol>
<p>Proof：(1),(2)显然。下证明(3)<br>我们有$Ax- f_A(x)x \geq 0$，在等式两边左乘以$(I+A)^{n-1}$并利用$A$和$(I+A)^{n-1}$乘法可交换的性质，得到<br><span>$$A(I+A)^{n-1}x - 
f_A(x)(I+A)^{n-1}x \geq 0$$</span><!-- Has MathJax --><br>即<br><span>$$Ay - f_A(x)y
\geq 0$$</span><!-- Has MathJax --><br>再由(2)就得到(3)。</p>
<p>容易证明：$f_A$是有界函数，实际上，$f_A$非负且不超过$A$的最大行和。<br>记<span>$\Omega _n = \lbrace x \in \mathbf{R} _+ ^n | \sum _{i=1} ^n = 1 \rbrace$</span><!-- Has MathJax -->引理5.1说明，我们只需要在$ \Omega _n$上研究$f_A$即可。显然$\Omega _n$是一个紧集，但是$f_A$可能在$\Omega _n$ 的边界不连续。但是我们仍然有引理6。</p>
<h5 id="u5F15_u74066__u8BBEA_u662Fn_u9636_u975E_u8D1F_u4E0D_u53EF_u7EA6_u77E9_u9635_uFF0C_u5219_3C_21-_uFFFC10-_3E_u5728_24_5Cmathbf_7BR_7D__+__5En__5Cbackslash__5Clbrace_0__5Crbrace__24_u4E0A_u53EF_u4EE5_u53D6_u5230_u6700_u5927_u503C_u3002"><a href="#u5F15_u74066__u8BBEA_u662Fn_u9636_u975E_u8D1F_u4E0D_u53EF_u7EA6_u77E9_u9635_uFF0C_u5219_3C_21-_uFFFC10-_3E_u5728_24_5Cmathbf_7BR_7D__+__5En__5Cbackslash__5Clbrace_0__5Crbrace__24_u4E0A_u53EF_u4EE5_u53D6_u5230_u6700_u5927_u503C_u3002" class="headerlink" title="引理6 设A是n阶非负不可约矩阵，则<span>$f _ A$</span><!-- Has MathJax -->在$\mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace $上可以取到最大值。"></a>引理6 设A是n阶非负不可约矩阵，则<span>$f _ A$</span><!-- Has MathJax -->在$\mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace $上可以取到最大值。</h5><p>Proof： 记<br><span>$$\Delta = (I+A)^{n-1} \Omega _n = \lbrace y |
y=(I+A)^{n-1} x ,x \in \Omega _n \rbrace$$</span><!-- Has MathJax --><br>则$\Delta$是一个紧集，且有引理2知$\Delta$中向量都是正向量，因此<span>$f _ A$</span><!-- Has MathJax --> 在$ \Delta $上连续，由Weierstrass定理，$f_A$在某一点<span>$y^0 \in \Delta$</span><!-- Has MathJax -->取得<span>$f _ A$</span><!-- Has MathJax -->在$\Delta$上的最大值。记 <span>$z ^0 = y ^0 / \sum_{i=1} ^n y _i ^0 \in \Omega _ n$</span><!-- Has MathJax -->。<span>$\forall x \in \Omega _n$</span><!-- Has MathJax -->，记 $ y=(I+A)^{n-1}x $利用引理5可知<br><span>$$f_A(x) \leq f_A(y) 
\leq f_A(y ^0) = f_A(z^0)$$</span><!-- Has MathJax --><br>这就证明了<span>$f_A$</span><!-- Has MathJax --> 在 $z^0$上取到它在<span>$\Omega _n$</span><!-- Has MathJax -->上的最大值。利用对<span>$\forall z \in R _+ ^n \backslash \lbrace 0 \rbrace$</span><!-- Has MathJax -->和引理6.1有<br><span>$$f_A(z) \leq f_A(\frac{z}{\sum_{i=1}^n z _i}) = 
f_A(z^0)$$</span><!-- Has MathJax --><br>可见<span>$f_A$</span><!-- Has MathJax -->在$z^0$处取到它在<span>$R _+ ^n \backslash \lbrace 0 \rbrace$</span><!-- Has MathJax -->上的最大值。</p>
<p>矩阵A的谱半径$\rho(A)$定义成矩阵A的所有特征值的绝对值的最大值。<br>万事俱备了，下面开始介绍著名的Perron-Frobenius定理</p>
<h5 id="u5B9A_u74067_28Perron-Frobenius_29__u8BBEA_u662Fn_28n_26gt_3B1_29_u9636_u975E_u8D1F_u4E0D_u53EF_u7EA6_u77E9_u9635_uFF0C_u5219_u4E0B_u9762_u7ED3_u8BBA_u6210_u7ACB_u3002"><a href="#u5B9A_u74067_28Perron-Frobenius_29__u8BBEA_u662Fn_28n_26gt_3B1_29_u9636_u975E_u8D1F_u4E0D_u53EF_u7EA6_u77E9_u9635_uFF0C_u5219_u4E0B_u9762_u7ED3_u8BBA_u6210_u7ACB_u3002" class="headerlink" title="定理7(Perron-Frobenius) 设A是n(n&gt;1)阶非负不可约矩阵，则下面结论成立。"></a>定理7(Perron-Frobenius) 设A是n(n&gt;1)阶非负不可约矩阵，则下面结论成立。</h5><ol>
<li>$\rho(A)&gt;0$ 且 $\rho(A)$是矩阵A的一个单特征值。</li>
<li>A有一个对应于$\rho(A)$的正特征向量。</li>
<li>A的每个非负特征向量都对应于特征值$\rho(A)$.</li>
</ol>
<p>Proof：由引理6存在$x^0 \in R _+ ^n \backslash \lbrace 0 \rbrace  $满足<br><span>$$f_A(x^0) \geq f_A(x),
\forall x \in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace$$</span><!-- Has MathJax --></p>
<p>记<span>$r=f_A(x^0)$</span><!-- Has MathJax -->。取<span>$u=(1,\cdots,1)^T$</span><!-- Has MathJax -->。因为$A$不可约，没有零行，所以<br><span>$$r \geq f_A(u) =
\min \sum _ {i=1} ^n a _{ij} &gt; 0$$</span><!-- Has MathJax --><br>下面证明r是A的一个特征值，我们有<br><span>$$Ax^0 - rx^0 
\geq 0$$</span><!-- Has MathJax --><br>假设$Ax^0 - rx^0 \neq 0$。由引理5.2<br><span>$$(I+A)^{n-1}
(Ax^0 - rx^0) &gt; 0$$</span><!-- Has MathJax --><br>即<br><span>$$Ay^0 - 
ry^0&gt; 0$$</span><!-- Has MathJax --><br>其中<span>$y_0 = (I+A)^{n-1}x^0 &gt;0$</span><!-- Has MathJax -->。因此存在一个正数 $\epsilon$ 使得<br><span>$$Ay^0 - 
(r+\epsilon)y^0&gt; 0$$</span><!-- Has MathJax --><br>由引理5.2，<span>$f_A(y^0) \geq r+\epsilon &gt; r$</span><!-- Has MathJax -->这就与<span>$r=f_A(x^0)$</span><!-- Has MathJax -->的最大性矛盾。所以$Ax^0=rx^0$。从而r是A的一个特征值，$x^0$是A的一个特征向量。有引理4知，$x^0$是正向量。<br>设$\lambda$是A的任何一个特征向量：$Ax=\lambda x$ 则<br><span>$$|\lambda||x|
\leq A|x|$$</span><!-- Has MathJax --><br>于是$|\lambda| \leq f _ A(|x|) \leq r$ 这表明$r = \rho(A)$。</p>
<p>现证明$\rho(A)$是单特征值，我们先证明$\rho(A)$的几何重数是1，设<br><span>$$Ay = \rho(A) y,
0 \neq y \in \mathbf{C} ^n$$</span><!-- Has MathJax --><br>则<br><span>$$A|y| \geq 
\rho(A)|y|$$</span><!-- Has MathJax --><br>上面证明过程表面上式是等式。且$|y|&gt;0$。可见，A的对应于$\rho(A)$的特征向量不含零分量。设y和z是对应$\rho(A)$的特征向量。则<span>$|y|&gt;0,|z|&gt;0.z_ 1 y-y_ 1 z$</span><!-- Has MathJax -->属于$\rho(A)$的特征子空间，但<span>$z_ 1 y-y_ 1 z$</span><!-- Has MathJax -->的第一个分量为0，所以它不可能是$\rho(A)$的特征值，因此，<span>$z_ 1 y-y_ 1 z＝0$</span><!-- Has MathJax -->，y和z线性相关，所以$\rho(A)$的几何重数为1.<br>为了证明$r=\rho(A)$是特征多项式$\phi(\lambda) = det(\lambda I - A)$的单根，只需证明，导数<span>$\phi&apos;(r) \neq 0$</span><!-- Has MathJax -->。用$adj(Z)$表示Z的伴随矩阵。我们有<br><span>$$\phi&apos;(\lambda) = \sum_{i=1}^n det[(\lambda I - A)(i|i)]
=tr[adj(\lambda I - A)]$$</span><!-- Has MathJax --><br>记$B(r)=adj(rI-A)$则$\phi’(r) = tr B(r)$,<br><span>$$(rI-A)B(r) = det(rI-A)I
=0$$</span><!-- Has MathJax --><br>因为r的几何重数为1，所以$rank(rI-A)=n-1$，于是$B(r) \neq 0$。设b是$B(r)$的任意一个非零列，则$(rI-A)b=0$,因此b是A的对应于r的特征向量，但是A有一个对应于r的特征向量$x^0$，且因为r的几何重数为1，因此b是$x^0$的一个常数倍，从而$b&gt;0$或者$b<0$。这就证明了$b(r)$的每一列要么是零列，要么是正向量，要么是负向量。考虑<span>$[B(r)]^T = adj(rI-A^T),r=\rho(A)=\rho(A^T)$<!-- Has MathJax --> 。上面结论应用于$[B(r)]^T$的列，所以$B(r)&gt;0$或者$B(r)&lt;0$,从而$\phi’(r)=tr[B(r)] \neq 0$,这就证明了$\rho(A)$是单特征值。<br>我们已经证明了(1),(2)。现在来证明(3)。设$y&gt;0$是$A^T$对应于$\rho(A)$的特征向量，设x是A的任意一个非负特征向量：<span>$Ax = \mu x$</span><!-- Has MathJax -->。则<br><span>$$\mu y^T x = y^T Ax = 
\rho(A)y^Tx$$</span><!-- Has MathJax --><br>因为$y^Tx&gt;0$,我们有$ \mu = \rho(A) $，证毕。<br>注：由引理4，A的非负特征向量实际上都是正向量，因此结论3可叙述成：在A的所有特征向量中，只有$\rho(A)$有非负特征向量。上述证明还确定了以下结果：</0$。这就证明了$b(r)$的每一列要么是零列，要么是正向量，要么是负向量。考虑<span></p>
<h6 id="u5B9A_u74068-__u8BBEA_u662F_u4E00_u4E2An_28n_26gt_3B1_29_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_u5219"><a href="#u5B9A_u74068-__u8BBEA_u662F_u4E00_u4E2An_28n_26gt_3B1_29_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_u5219" class="headerlink" title="定理8. 设A是一个n(n&gt;1)阶不可约非负矩阵，则"></a>定理8. 设A是一个n(n&gt;1)阶不可约非负矩阵，则</h6><span>$$\rho(A) = \max \lbrace f_A(x)|x\in \mathbf{R} _+ ^n
\backslash \lbrace 0 \rbrace \rbrace$$</span><!-- Has MathJax -->
<p>若<span>$\mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace ,f_A(x) = \rho(A)$</span><!-- Has MathJax -->则$\rho&gt;0$且x是对应于$\rho(A)$的一个特征向量。</p>
<h6 id="u5B9A_u74069-__u8BBEA_u662F_u4E00_u4E2A_u975E_u8D1F_u77E9_u9635_uFF0C_u5219_24_5Crho_28A_29_24_u662FA_u7684_u7279_u5F81_u503C_uFF0C_u4E14A_u6709_u4E00_u4E2A_u5BF9_u5E94_u4E8E_24_5Crho_28A_29_24_u7684_u975E_u8D1F_u7279_u5F81_u5411_u91CF_u3002"><a href="#u5B9A_u74069-__u8BBEA_u662F_u4E00_u4E2A_u975E_u8D1F_u77E9_u9635_uFF0C_u5219_24_5Crho_28A_29_24_u662FA_u7684_u7279_u5F81_u503C_uFF0C_u4E14A_u6709_u4E00_u4E2A_u5BF9_u5E94_u4E8E_24_5Crho_28A_29_24_u7684_u975E_u8D1F_u7279_u5F81_u5411_u91CF_u3002" class="headerlink" title="定理9. 设A是一个非负矩阵，则$\rho(A)$是A的特征值，且A有一个对应于$\rho(A)$的非负特征向量。"></a>定理9. 设A是一个非负矩阵，则$\rho(A)$是A的特征值，且A有一个对应于$\rho(A)$的非负特征向量。</h6><p>Proof：设A的阶数为n，定理对$n=1$是平凡地成立。下面设$n=2$，用J表示元素全为1的矩阵。<br>对于正整数k，记<span>$A_k = A + \frac{1}{k} J$</span><!-- Has MathJax -->是一个正矩阵，由Perron-Frobenius定理，<span>$A_k$</span><!-- Has MathJax -->在<span>$\Omega _n = \lbrace x \in \mathbf{R} _+ ^n | \sum _{i=1} ^n = 1 \rbrace$</span><!-- Has MathJax -->中有唯一一个对应于<span>$\rho(A_k)$</span><!-- Has MathJax -->的特征向量$x^k$<br>因为向量序列$\lbrace x^k \rbrace $有界因此，由Bolzano-Weierstrass定理,$\lbrace x^k \rbrace $有收敛子列<span>$\lbrace x^{k_i} \rbrace: \lim _{i \to \infty } = x$</span><!-- Has MathJax -->。显然<span>$x \in \Omega _n$</span><!-- Has MathJax -->因此<span>$$A _{k_i}x^{k _i} = 
\rho(A _{k _i}) x^{k _i}$$</span><!-- Has MathJax --><br>注意到<span>$A _{k_i} \to A , \rho(A _{k _i}) \to \rho(A)$</span><!-- Has MathJax --> 因此$i \to \infty$得到$Ax = \rho(A)x$，证毕。</p>
<p>至此，Prron-Frobenius定理介绍完毕。下面介绍一个非负矩阵特征值的界。<br>定理10 设A是一个n阶矩阵非负矩阵，则<br><span>$$\min_{1 \leq i \leq n} r_i \leq \rho(A) 
\leq \max_{1 \leq i \leq n} r_i$$</span><!-- Has MathJax --><br><span>$$\min_{1 \leq i \leq n} c_i \leq \rho(A) 
\leq \max_{1 \leq i \leq n} c_i$$</span><!-- Has MathJax --><br>其中<span>$r_i, c_j$</span><!-- Has MathJax -->分别为A的第i行和和第j列和。<br>Proof：设x是$A^T$的一个Perron向量(对应于谱半径的非负特征向量)。因为$\rho(A^T)=\rho(A)$从$A^Tx=\rho(A)x$得<br><span>$$\rho(A)x_i = \sum_{k=1}^n a_{ki}x_k 
\qquad i = 1,\cdots,n.$$</span><!-- Has MathJax --><br>将这些等式相加得到<span>$\rho(A) \sum_{i=1}^n x_i =\sum_{k=1}^n r_k x_k$</span><!-- Has MathJax -->，即<br><span>$$\rho(A)= 
\frac{\sum_{k=1}^n r_k x_k }{\sum_{i=1}^n x_i}$$</span><!-- Has MathJax --><br>证毕。</p>
<h6 id="u5B9A_u740611_28Wielandt_29__u8BBEA_u662Fn_28n_26gt_3B1_29_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_u4E14_24_7CB_7C__5Cleq_A_24__u5219_u5BF9_u4E8EB_u7684_u4EFB_u4F55_u7279_u5F81_u503C_24_5Clambda_24_u6709"><a href="#u5B9A_u740611_28Wielandt_29__u8BBEA_u662Fn_28n_26gt_3B1_29_u9636_u4E0D_u53EF_u7EA6_u975E_u8D1F_u77E9_u9635_uFF0C_u4E14_24_7CB_7C__5Cleq_A_24__u5219_u5BF9_u4E8EB_u7684_u4EFB_u4F55_u7279_u5F81_u503C_24_5Clambda_24_u6709" class="headerlink" title="定理11(Wielandt) 设A是n(n&gt;1)阶不可约非负矩阵，且$|B| \leq A$ 则对于B的任何特征值$\lambda$有"></a>定理11(Wielandt) 设A是n(n&gt;1)阶不可约非负矩阵，且$|B| \leq A$ 则对于B的任何特征值$\lambda$有</h6><span>$$|\lambda| \leq 
\rho(A)$$</span><!-- Has MathJax -->
<p>Proof：设$Bx=\lambda x$则$|B||x| \geq |\lambda||x|$,但是$|B| \leq A$，所以$|\lambda| |x| \leq |B||x| \leq A |x|$，由引理5.2和8知<br><span>$$|\lambda| \leq f_A(|x|) 
\leq \rho(A)$$</span><!-- Has MathJax --><br>证毕。</p>
<p>根据谱半径的连续性，我们马上有如下推论</p>
<ol>
<li>若矩阵A非负，且$|B| \leq A$,则$\rho(B) \leq \rho(A)$</li>
<li>对任意矩阵A，$\rho(A) \leq \rho(|A|)$.(这个直接证明也可以)</li>
</ol>
<blockquote>
<p>本文源自詹兴致所著的《矩阵论》第六章。</p>
</blockquote>
<p>定理虽然很长但是整个过程十分优美，思路十分清晰，仔细分析每一步还是很容易看懂的，并且在证明的过程中就能体会为什么一开始要提出“非负不可约矩阵”的概念了，然后应用连续性把一些结果推广到非负矩阵。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1907年O.Perron发现正矩阵的谱有特别有趣的性质。G.Frobenius在1908-1912年间将Perron的工作推广到不可约非负矩阵的情形，并得到了新的进一步结果。Ferron-Frobenius理论有很多证明方式，下面介绍H.Wielandt的优美证明。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shur定理]]></title>
    <link href="http://yoursite.com/2015/12/16/Shur%E5%AE%9A%E7%90%86/"/>
    <id>http://yoursite.com/2015/12/16/Shur定理/</id>
    <published>2015-12-16T14:10:14.000Z</published>
    <updated>2015-12-16T16:48:16.000Z</updated>
    <content type="html"><![CDATA[<p>在研究一个数学对象时，我们经常会对它进行分类。比如我们通常把数分为：实数，虚数；实数又分成有理数，无理数；当然也有按照正负来分的。还有整数分成素数（也叫质数）和合数，等等。现在我们谈谈矩阵的分类，以下默认矩阵是方的。<br><a id="more"></a></p>
<h4 id="u6570_u5B66_u4E2D_u5206_u7C7B_u4E00_u822C_u662F_u6309_u7167_u7B49_u4EF7_u5173_u7CFB_u5212_u5206_u7B49_u4EF7_u7C7B_u7684_u3002"><a href="#u6570_u5B66_u4E2D_u5206_u7C7B_u4E00_u822C_u662F_u6309_u7167_u7B49_u4EF7_u5173_u7CFB_u5212_u5206_u7B49_u4EF7_u7C7B_u7684_u3002" class="headerlink" title="数学中分类一般是按照等价关系划分等价类的。"></a>数学中分类一般是按照等价关系划分等价类的。</h4><p>所谓等价关系其实就是满足反身性，对称性，传递性的二元关系（总结一下我们等于号的全部性质就知道了）<br>矩阵中最常见的三种等价关系分别是</p>
<ol>
<li>相抵等价—初等变换</li>
<li>合同等价—合同变换</li>
<li>相似等价—相似变换</li>
</ol>
<p>相抵等价完全由秩确定，合同变换我们一般只针对实对称矩阵处理。相似变化是我们讨论最多的也是最复杂的，我们总想把复杂的东西变简单，对于一个矩阵我们总想做变换把它变成最简单形式（称为标准型），相抵等价的标准型和对称矩阵合同等价的标准型都十分简单，但是很不幸的也是最幸运的是，并非所有的矩阵都可以相似于对角阵，相似变换标准型称为若尔当标准型，以纪念若尔当对矩阵相似变换所做的贡献。</p>
<p>然而今天主题并不是上面的任何一种，而是由伟大的数学家<a href="https://en.wikipedia.org/wiki/Issai_Schur" target="_blank" rel="external">Issai Schur</a>提出的酉相似，酉变换的概念和相应定理。</p>
<h4 id="u4EFB_u610F_u590D_u65B9_u9635_u9149_u76F8_u4F3C_u4E8E_u4E0A_u4E09_u89D2_u77E9_u9635"><a href="#u4EFB_u610F_u590D_u65B9_u9635_u9149_u76F8_u4F3C_u4E8E_u4E0A_u4E09_u89D2_u77E9_u9635" class="headerlink" title="任意复方阵酉相似于上三角矩阵"></a>任意复方阵酉相似于上三角矩阵</h4><h6 id="u9149_u77E9_u9635_u548C_u9149_u76F8_u4F3C"><a href="#u9149_u77E9_u9635_u548C_u9149_u76F8_u4F3C" class="headerlink" title="酉矩阵和酉相似"></a>酉矩阵和酉相似</h6><p>一个矩阵称为酉矩阵，如果它的共轭转置是它的逆。<br>复矩阵A与B称为酉相似的，如果存在酉矩阵U使得$B=U^<em> AU$<br>这里$U^</em>$表示U的共轭转置。</p>
<h6 id="u5B9A_u74061-__u5BF9_u4EFB_u610F_u590D_u65B9_u9635A_uFF0C_u5B58_u5728_u9149_u77E9_u9635U_u4F7F_u5F97"><a href="#u5B9A_u74061-__u5BF9_u4EFB_u610F_u590D_u65B9_u9635A_uFF0C_u5B58_u5728_u9149_u77E9_u9635U_u4F7F_u5F97" class="headerlink" title="定理1. 对任意复方阵A，存在酉矩阵U使得"></a>定理1. 对任意复方阵A，存在酉矩阵U使得</h6><span>$$A = U \left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)U^*$$</span><!-- Has MathJax -->
<p>其中 <span>$\lambda_1,\lambda_2,\cdots,\lambda_n$</span><!-- Has MathJax --> 为A的全部特征值。<br>Proof：设 $\alpha_1$ 是A的特征值 $\lambda_1$ 对应的特征向量，将 $\alpha_1$ 扩充为$\mathbf{C}^n$的一组标准正交基 <span>$P=(\alpha_1,\alpha_2,\cdots,\alpha_n)$</span><!-- Has MathJax --> ，则<span>$A = P \left( \begin{matrix} \lambda_1 &amp; * \\ \mathbf{0} &amp; B \end{matrix} \right)P^*$</span><!-- Has MathJax --> 。对复矩阵的阶数应用数学归纳法，存在n-1阶酉矩阵Q使得<br><span>$$B = Q \left( \begin{matrix} \lambda_2 &amp; * &amp; *  \\
 &amp; ddots &amp; * \\
 &amp; &amp; \lambda_n \end{matrix} \right)Q^*$$</span><!-- Has MathJax --><br>因此<br><span>$$A = U \left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)U^*$$</span><!-- Has MathJax --><br>其中<span>$U = P \left( \begin{matrix} 1 &amp;  \\ &amp; Q \end{matrix} \right)$</span><!-- Has MathJax -->是n阶酉矩阵。证毕。</p>
<h4 id="u77E9_u9635_u9149_u76F8_u4F3C_u4E8E_u5BF9_u89D2_u9635_u5F53_u4E14_u4EC5_u5F53_u5B83_u662F_u6B63_u89C4_u77E9_u9635"><a href="#u77E9_u9635_u9149_u76F8_u4F3C_u4E8E_u5BF9_u89D2_u9635_u5F53_u4E14_u4EC5_u5F53_u5B83_u662F_u6B63_u89C4_u77E9_u9635" class="headerlink" title="矩阵酉相似于对角阵当且仅当它是正规矩阵"></a>矩阵酉相似于对角阵当且仅当它是正规矩阵</h4><h6 id="u6B63_u89C4_u77E9_u9635"><a href="#u6B63_u89C4_u77E9_u9635" class="headerlink" title="正规矩阵"></a>正规矩阵</h6><p>矩阵A称为正规矩阵(<em>normal matrix</em>)，如果$ A^ <em>A=AA^ </em> $。显然酉矩阵，Hermite阵，反Hermite阵都是正规矩阵。<br>定理2（Issai Schur）矩阵A酉相似于对角阵的充分必要条件是A是正规矩阵。<br>Proof：必要性显然，下证明充分性，<br>由定理1知，存在酉矩阵U使得：</p>
<span>$$A = U \left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)U^*$$</span><!-- Has MathJax -->
<p>若A是规范矩阵，则<br><span>$$A^* A = U \left( \begin{matrix} 
\overline{\lambda_1} &amp;  &amp;  &amp;  \\
* &amp; \overline{\lambda_2} &amp;  &amp;  \\
* &amp; * &amp; \ddots &amp; \\
* &amp; * &amp; * &amp;  \overline{\lambda_n}
\end{matrix} \right)

\left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)U^*
=
U \left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)
\left( \begin{matrix} 
\overline{\lambda_1} &amp;  &amp;  &amp;  \\
* &amp; \overline{\lambda_2} &amp;  &amp;  \\
* &amp; * &amp; \ddots &amp; \\
* &amp; * &amp; * &amp;  \overline{\lambda_n}
\end{matrix} \right) U^*
=AA^*$$</span><!-- Has MathJax --><br>因此<br><span>$$\left( \begin{matrix} 
\overline{\lambda_1} &amp;  &amp;  &amp;  \\
* &amp; \overline{\lambda_2} &amp;  &amp;  \\
* &amp; * &amp; \ddots &amp; \\
* &amp; * &amp; * &amp;  \overline{\lambda_n}
\end{matrix} \right)

\left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)
=
\left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)
\left( \begin{matrix} 
\overline{\lambda_1} &amp;  &amp;  &amp;  \\
* &amp; \overline{\lambda_2} &amp;  &amp;  \\
* &amp; * &amp; \ddots &amp; \\
* &amp; * &amp; * &amp;  \overline{\lambda_n}
\end{matrix} \right)$$</span><!-- Has MathJax --><br>考虑矩阵两端(1,1)位置得到<br><span>$$\overline{\lambda_1}\lambda_1 ＝ \lambda_1
\overline{\lambda_1}+\sigma^2$$</span><!-- Has MathJax --><br>其中$ \sigma^2 $是上三角矩阵<br><span>$$\left( \begin{matrix} 
\lambda_1 &amp; * &amp; * &amp; * \\
 &amp; \lambda_2 &amp; * &amp; * \\
 &amp; &amp; \ddots &amp; * \\
 &amp; &amp; &amp;  \lambda_n
\end{matrix} \right)$$</span><!-- Has MathJax --><br>的第一行的非对角元绝对值之平方和，因此由$ \sigma^2 $可知上三角矩阵的第一行非对角元全为0，类似的考察矩阵两端(2,2)的位置，一直到(n,n)的位置即可知道上面矩阵是对角阵，证毕。</p>
<p>上述定理给出了酉相似于对角型的充分必要条件，而且条件十分易于判断。整个过程简洁优美。另外由于酉矩阵条件数恒定为1，有其数值稳定性，因此经常用于实际计算中，例如QR方法涉及的两个矩阵变换Househoulder变换和Givens变换都是酉变换。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在研究一个数学对象时，我们经常会对它进行分类。比如我们通常把数分为：实数，虚数；实数又分成有理数，无理数；当然也有按照正负来分的。还有整数分成素数（也叫质数）和合数，等等。现在我们谈谈矩阵的分类，以下默认矩阵是方的。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cayley-Hamilton定理]]></title>
    <link href="http://yoursite.com/2015/12/16/Cayley-Hamilton%E5%AE%9A%E7%90%86/"/>
    <id>http://yoursite.com/2015/12/16/Cayley-Hamilton定理/</id>
    <published>2015-12-16T04:37:33.000Z</published>
    <updated>2015-12-16T14:09:29.000Z</updated>
    <content type="html"><![CDATA[<p>大一学了矩阵之后,一直很喜欢它，因为它形式简洁优美，又不缺乏技巧，是抽象和具体的桥梁，又有其实用性，成为现代数学最基础的工具之一。个人认为，矩阵中最优美的定理非Cayley-Hamilton定理（矩阵的特征多项式是它的一个化零多项式）莫属了。详细表述和证明如下：</p>
<a id="more"></a>
<p>n阶矩阵A的特征多项式为：<br><span>$$\phi(\lambda)=det(\lambda I - A) = a_n \lambda^n +
a_{n-1} \lambda^{n-1} + \cdots + a_1 \lambda + a_0$$</span><!-- Has MathJax --></p>
<p>设$\lambda I - A$的伴随矩阵为B，则B中元素为关于$\lambda$的次数小于n的多项式，不妨设<br><span>$$B = \lambda^{n-1} B_ {n-1} + \lambda^{n-2} B_ {n-2}
+ \cdots + \lambda B_1 + B_0$$</span><!-- Has MathJax --></p>
<p>所以<br><span>$$(\lambda I - A)B = \lambda^n B_ {n-1} + \lambda^{n-1} (B_ {n-2} - AB_ {n-1})
+ \cdots + \lambda (B_0 - AB_1) - AB_0$$</span><!-- Has MathJax --><br>又因为B是A的伴随矩阵，我们有<span>$(\lambda I - A)B = det(\lambda I - A) I$</span><!-- Has MathJax --></p>
<p>比较系数得到<br><span>$$\left\{ 
\begin{array}{l} 
B_ {n-1} = a_n I \\
B_ {n-2} - AB_ {n-1} = a_{n-1} I \\
\cdots \\
B_0 - AB_1 = a_1 I \\
-AB_0 = a_0 I
\end{array} \right.$$</span><!-- Has MathJax --><br>对上式分别左乘<span>$A^n,A^{n-1},\cdots,A,I$</span><!-- Has MathJax -->得到：</p>
<span>$$\left\{ 
\begin{array}{l} 
A^n B_ {n-1} = a_n A^n \\
A^{n-1} B_ {n-2} - A^n B_ {n-1} = a_{n-1} A^{n-1} \\
\cdots \\
A B_0 - A^2 B_1 = a_1 A \\
-AB_0 = a_0 I
\end{array} \right.$$</span><!-- Has MathJax -->
<p>再将上式相加得到最终结果</p>
<span>$$\phi(A)= a_ n A^n + a_{n-1} A^{n-1} + \cdots + a_1 A +
a_0 I = \mathbf{0}$$</span><!-- Has MathJax -->
<p>上述定理优美在于从形式上，<span>$\phi(\lambda)=det(\lambda I - A)$</span><!-- Has MathJax -->取 <span>$\lambda = A$</span><!-- Has MathJax -->带入恰好也是0（注意数字0和零矩阵的差别），虽然说这样做是完全没有道理。作为直接推论我们知道，一个n阶方阵的任何次方都可以被它的不超过n次的幂线性表出。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大一学了矩阵之后,一直很喜欢它，因为它形式简洁优美，又不缺乏技巧，是抽象和具体的桥梁，又有其实用性，成为现代数学最基础的工具之一。个人认为，矩阵中最优美的定理非Cayley-Hamilton定理（矩阵的特征多项式是它的一个化零多项式）莫属了。详细表述和证明如下：</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[仅在一点连续的函数例子]]></title>
    <link href="http://yoursite.com/2015/12/16/%E4%BB%85%E5%9C%A8%E4%B8%80%E7%82%B9%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%87%BD%E6%95%B0%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2015/12/16/仅在一点连续的函数例子/</id>
    <published>2015-12-15T16:26:38.000Z</published>
    <updated>2015-12-15T16:53:29.000Z</updated>
    <content type="html"><![CDATA[<p>在一元微积分中，有一个广为人知的结论：一元函数在一点可导，必在该点连续，即可导必连续。</p>
<p>自然会有这样一个问题：</p>
<pre><code>一元函数在一点可导能否推出它在该点的一个小邻域连续呢？
</code></pre><p>这个想法是很自然的，不严格的思考可能会认为应该是对的,但是它并不成立。下面给出一个反例：</p>
<p>\[ f(x) = x^2 D(x) = \left\{<br>\begin{array}{ll}<br>0 &amp; x \in \mathbb{Q} \\<br>x^2 &amp; x \notin \mathbb{Q}<br>\end{array} \right. \]</p>
<p>其中$D(x)$为Dirichlet函数。<br><a id="more"></a><br>容易验证函数$f(x)$在$x=0$处可导，但在$x \neq 0$处不连续。即否定了上述问题。</p>
<p>最后，类似地，我们还可以通过Dirichlet函数构造$\mathbb{R}$上一些仅在有限个点连续的函数。也可以通过周期函数构造仅在所有整数点连续的函数。但是由Baire纲定理可以证明，不存在在所有有理数点连续，无理点间断的函数。最后Riemann函数给出了一个在所有有理数点间断，无理点连续的函数。这些反例使得人们对函数连续的概念有了更感性的认识。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在一元微积分中，有一个广为人知的结论：一元函数在一点可导，必在该点连续，即可导必连续。</p>
<p>自然会有这样一个问题：</p>
<pre><code>一元函数在一点可导能否推出它在该点的一个小邻域连续呢？
</code></pre><p>这个想法是很自然的，不严格的思考可能会认为应该是对的,但是它并不成立。下面给出一个反例：</p>
<p>\[ f(x) = x^2 D(x) = \left\{<br>\begin{array}{ll}<br>0 &amp; x \in \mathbb{Q} \\<br>x^2 &amp; x \notin \mathbb{Q}<br>\end{array} \right. \]</p>
<p>其中$D(x)$为Dirichlet函数。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算器程序]]></title>
    <link href="http://yoursite.com/2015/12/15/%E8%AE%A1%E7%AE%97%E5%99%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2015/12/15/计算器程序/</id>
    <published>2015-12-15T15:31:38.000Z</published>
    <updated>2015-12-15T15:55:04.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u8BA1_u7B97_u5668_u5230_u5904_u90FD_u6709_uFF0C_u6709_u5565_u597D_u5199_u7684_u5462_uFF1F"><a href="#u8BA1_u7B97_u5668_u5230_u5904_u90FD_u6709_uFF0C_u6709_u5565_u597D_u5199_u7684_u5462_uFF1F" class="headerlink" title="计算器到处都有，有啥好写的呢？"></a>计算器到处都有，有啥好写的呢？</h4><p>我们在写程序时，对于长串计算，我们通常直接输入了，让计算机高级语言（例如C++）给我们算就行了。但是，仔细想想这件事其实并不简单。</p>
<pre><code>ps:最处想做这件事的原因是：我在大学想写一个带GUI界面的计算器，就在这里被卡住了。
</code></pre><p>其实这是一个很有名的问题，大家有兴趣可以搜一下 <a href="http://baike.baidu.com/link?url=K67J7hWFkpdwOzjAA-nalFK4JqnnLI5TPtK1Dx7dOBn0P5WhAsq09j0e4qBI590vomEWc0w2gtCFWreeta0gr_" target="_blank" rel="external">逆波兰式</a><br><a id="more"></a></p>
<h4 id="u9006_u6CE2_u5170_u5F0F"><a href="#u9006_u6CE2_u5170_u5F0F" class="headerlink" title="逆波兰式"></a>逆波兰式</h4><p>逆波兰式即为后缀表达式，我们生活中算数表达式一般都是中序表达式。人类易于理解中序表达式，但计算机更容易处理后缀表达式。</p>
<h4 id="u76F4_u5954_u89E3_u51B3_u65B9_u6848"><a href="#u76F4_u5954_u89E3_u51B3_u65B9_u6848" class="headerlink" title="直奔解决方案"></a>直奔解决方案</h4><p>我们的做法基本分</p>
<ol>
<li>确定好符号集和它们的优先级；</li>
<li>中序表达式转化成后缀表达式；</li>
<li>根据后缀表达式得到最终结果。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span>  </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;    <span class="comment">//set priority level  </span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">'='</span>||a==<span class="string">'('</span>)  <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">'+'</span>||a==<span class="string">'-'</span>)  <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">'*'</span>||a==<span class="string">'/'</span>)  <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getSuffixExpression</span><span class="params">(<span class="built_in">string</span> a)</span></span>&#123;  </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; ope;  </span><br><span class="line">    ope.push(<span class="string">'='</span>);  </span><br><span class="line">    <span class="built_in">string</span> ans;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=a.size();++i)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">'0'</span>&amp;&amp;a[i]&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line">            ans.push_back(a[i]);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'('</span>)&#123;  </span><br><span class="line">            ope.push(<span class="string">'('</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">')'</span>)&#123;  </span><br><span class="line">            <span class="keyword">while</span>(!ope.empty()&amp;&amp;ope.top()!=<span class="string">'('</span>)&#123;  </span><br><span class="line">                ans.push_back(ope.top());  </span><br><span class="line">                ope.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            ope.pop();<span class="comment">// push left bracket  </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]!=<span class="string">'+'</span>&amp;&amp;a[i]!=<span class="string">'-'</span>&amp;&amp;a[i]!=<span class="string">'*'</span>&amp;&amp;a[i]!=<span class="string">'/'</span>)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;endl;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pre(a[i])&gt;pre(ope.top()))&#123;  </span><br><span class="line">            ope.push(a[i]);  </span><br><span class="line">            ans.push_back(<span class="string">' '</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">while</span>(pre(a[i])&lt;=pre(ope.top()))&#123;  </span><br><span class="line">                ans.push_back(ope.top());  </span><br><span class="line">                ope.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            ope.push(a[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(ope.top()!=<span class="string">'='</span>)&#123;  </span><br><span class="line">        ans.push_back(ope.top());  </span><br><span class="line">        ope.pop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ans</span><span class="params">(<span class="built_in">string</span> a)</span></span>&#123;  </span><br><span class="line">    <span class="built_in">string</span> b=getSuffixExpression(a);  </span><br><span class="line">    <span class="keyword">if</span>(b.empty())   <span class="keyword">return</span> INF;  </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=b.size();++i)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(b[i]==<span class="string">' '</span>)   <span class="keyword">continue</span>;  </span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;=<span class="string">'0'</span>&amp;&amp;b[i]&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line">            <span class="keyword">int</span> t=<span class="number">0</span>;  </span><br><span class="line">            <span class="keyword">while</span>(i!=b.size()&amp;&amp;b[i]&gt;=<span class="string">'0'</span>&amp;&amp;b[i]&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line">                t=t*<span class="number">10</span>+b[i++]-<span class="string">'0'</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            --i;  </span><br><span class="line">            s.push(t);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">int</span> x,y;  </span><br><span class="line">            <span class="keyword">if</span>(!s.empty())&#123;  </span><br><span class="line">                y=s.top();  </span><br><span class="line">                s.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(!s.empty())&#123;  </span><br><span class="line">                x=s.top();  </span><br><span class="line">                s.pop();  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;endl;  </span><br><span class="line">                <span class="keyword">return</span> INF;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">switch</span>(b[i])&#123;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:  </span><br><span class="line">                s.push(x+y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:  </span><br><span class="line">                s.push(x-y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:  </span><br><span class="line">                s.push(x*y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:  </span><br><span class="line">                s.push(x/y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> ans=s.top();  </span><br><span class="line">    s.pop();  </span><br><span class="line">    <span class="keyword">if</span>(s.empty()) <span class="keyword">return</span> ans;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> INF;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">string</span> a;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(get_ans(a)!=INF)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;get_ans(a)&lt;&lt;endl;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u8BA1_u7B97_u5668_u5230_u5904_u90FD_u6709_uFF0C_u6709_u5565_u597D_u5199_u7684_u5462_uFF1F"><a href="#u8BA1_u7B97_u5668_u5230_u5904_u90FD_u6709_uFF0C_u6709_u5565_u597D_u5199_u7684_u5462_uFF1F" class="headerlink" title="计算器到处都有，有啥好写的呢？"></a>计算器到处都有，有啥好写的呢？</h4><p>我们在写程序时，对于长串计算，我们通常直接输入了，让计算机高级语言（例如C++）给我们算就行了。但是，仔细想想这件事其实并不简单。</p>
<pre><code>ps:最处想做这件事的原因是：我在大学想写一个带GUI界面的计算器，就在这里被卡住了。
</code></pre><p>其实这是一个很有名的问题，大家有兴趣可以搜一下 <a href="http://baike.baidu.com/link?url=K67J7hWFkpdwOzjAA-nalFK4JqnnLI5TPtK1Dx7dOBn0P5WhAsq09j0e4qBI590vomEWc0w2gtCFWreeta0gr_">逆波兰式</a><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[产生520的复杂代码]]></title>
    <link href="http://yoursite.com/2015/12/15/%E4%BA%A7%E7%94%9F520%E7%9A%84%E5%A4%8D%E6%9D%82%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2015/12/15/产生520的复杂代码/</id>
    <published>2015-12-15T15:23:16.000Z</published>
    <updated>2015-12-15T15:31:24.000Z</updated>
    <content type="html"><![CDATA[<p>想想我当初也是厉害，貌似是在2014年情人节在网吧写的代码，简直强的不行。<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> clr(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line"><span class="comment">/**********************************</span><br><span class="line">*</span><br><span class="line">* composed by CZP10110057 at ECUST</span><br><span class="line">*</span><br><span class="line">***********************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000006</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">10000007</span>;</span><br><span class="line"><span class="keyword">bool</span> temp[N];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">700000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    p[t++]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> kill=<span class="keyword">int</span>(<span class="built_in">sqrt</span>(MAX+<span class="number">0.1</span>))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;kill;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!temp[i&gt;&gt;<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;MAX;j+=(i&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">                temp[j&gt;&gt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kill=MAX&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;kill;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!temp[i])&#123;</span><br><span class="line">            p[t++]=i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r*=x;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        x*=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	isprime();</span><br><span class="line">	<span class="keyword">int</span> myHeart=<span class="number">1</span>;</span><br><span class="line">	myHeart*=p[mypow(p[<span class="number">0</span>],p[<span class="number">0</span>]*p[<span class="number">0</span>])];</span><br><span class="line">	myHeart*=p[<span class="number">2</span>]*mypow(p[<span class="number">0</span>],p[<span class="number">1</span>]);</span><br><span class="line">	myHeart*=p[p[mypow(p[<span class="number">2</span>],p[<span class="number">0</span>])]];</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;myHeart&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>想想我当初也是厉害，貌似是在2014年情人节在网吧写的代码，简直强的不行。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[素数筛选]]></title>
    <link href="http://yoursite.com/2015/12/15/%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89/"/>
    <id>http://yoursite.com/2015/12/15/素数筛选/</id>
    <published>2015-12-15T15:07:44.000Z</published>
    <updated>2015-12-15T15:20:09.000Z</updated>
    <content type="html"><![CDATA[<p>判断一个数是否为素数，是一个很古老的问题，这里给出一个素数筛选的函数和调用实例。当然这里也有限制，要求数不能超过1e7。当然适当修改代码或者对于不同的需求可以相应修改达到不同目的。下面代码是提交到hdu2879上排行第一的代码：<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span>    //140MS	7772K</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000006</span>;    <span class="comment">//允许的最大数组为2500*2500</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">10000007</span>;</span><br><span class="line"><span class="keyword">bool</span> temp[N];</span><br><span class="line"><span class="keyword">int</span> prim[<span class="number">700000</span>];       <span class="comment">// 10^7内的素数不超过700000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">()</span></span>&#123;          <span class="comment">//可以返回小于MAX的素数个数</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    prim[t++]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> kill=<span class="keyword">int</span>(<span class="built_in">sqrt</span>(<span class="number">1.0</span>*MAX))+<span class="number">1</span>;    <span class="comment">//换时间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;kill;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!temp[i&gt;&gt;<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;MAX;j+=i&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                temp[j&gt;&gt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kill=MAX&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=kill;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!temp[i])&#123;</span><br><span class="line">            prim[t++]=i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">__<span class="function">int64 <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> n,__int64 m)</span></span>&#123;</span><br><span class="line">    __int64 x=<span class="number">2</span>,r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%m;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        x=x*x%m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//printf("%d\n",isprime());</span></span><br><span class="line">    isprime();</span><br><span class="line">    <span class="keyword">int</span> T,n;</span><br><span class="line">    __int64 m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(prim[s]&lt;=n&amp;&amp;prim[s]!=<span class="number">0</span>)&#123;</span><br><span class="line">            r+=n/prim[s++];     <span class="comment">//不会超int</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,mypow(r,m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该文最早是2014-03-02写在csdn上的，现在转移过来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>判断一个数是否为素数，是一个很古老的问题，这里给出一个素数筛选的函数和调用实例。当然这里也有限制，要求数不能超过1e7。当然适当修改代码或者对于不同的需求可以相应修改达到不同目的。下面代码是提交到hdu2879上排行第一的代码：<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/12/15/hello-world/"/>
    <id>http://yoursite.com/2015/12/15/hello-world/</id>
    <published>2015-12-15T08:30:20.000Z</published>
    <updated>2015-12-16T08:45:13.000Z</updated>
    <content type="html"><![CDATA[<p>第一篇hexo博文当然要感谢给我们免费提供二级域名和云服务器的<a href="https://github.com/" target="_blank" rel="external">github</a>啦。还有给我们提供框架和主题的<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>咯。下面是一些markdown数学方面的简单操作。</p>
<a id="more"></a>
<h2 id="Enable_Math"><a href="#Enable_Math" class="headerlink" title="Enable Math"></a>Enable Math</h2><ol>
<li><p>Math rendering is disabled by default, to enable it, check on the <em>Enable Math</em> option in <em>Preferences</em> &gt; <em>General</em> &gt; <em>All Documents</em>:.</p>
</li>
<li><p>Make sure you’ve connected to the internet.</p>
<p>The Math rendering is powered by <a href="http://www.mathjax.org" target="_blank" rel="external">MathJax</a>, the resources such as fonts are all online, thus the internet connection is needed for it to work.</p>
</li>
<li><p>For Users in mainland China</p>
<p>Users in mainland China, if the Math option doesn’t work for you, try if you can visit <a href="http://www.mathjax.org" target="_blank" rel="external">MathJax</a> without VPN connected. If you can’t, maybe it’s blocked by the Great Firewall of China. Try connect to a VPN, climb over the wall, then the Math rendering should work.</p>
</li>
</ol>
<h3 id="Known_issues_of_Math_option"><a href="#Known_issues_of_Math_option" class="headerlink" title="Known issues of Math option"></a>Known issues of Math option</h3><ol>
<li><p>It makes the Preview blink and blink again whenever typing.</p>
<p>Math support is a good addition, except that it makes the Preview blink and blink again whenever typing, as it needs to refresh the whole typesetting.</p>
</li>
<li><p>It makes the Right View always scroll to top whenever typing.</p>
</li>
</ol>
<p>That’s why I make it disabled by default. I suggest only enable it when you write Math Formulas, or better, only enable it when you export document to HTML which contains Math Formulas, when you are writing, disable it.</p>
<h2 id="Block_level_vs_Inline_level"><a href="#Block_level_vs_Inline_level" class="headerlink" title="Block level vs Inline level"></a>Block level vs Inline level</h2><p>Use double US dollors sign pair for Block level Math formula, and three US dollors sign pair for Inline Level.</p>
<p>For example this is a Block level $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$ formula, and this is an inline Level $$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$$ formula.</p>
<h2 id="The_Math_Syntax"><a href="#The_Math_Syntax" class="headerlink" title="The Math Syntax"></a>The Math Syntax</h2><p>The syntax is the same as <a href="http://en.wikipedia.org/wiki/TeX" target="_blank" rel="external"><strong>Tex</strong></a>, expect one thing:</p>
<p>Because the characters such as \ and _ and * and so on have special meanings in Markdown language, you need to add an extra \ character before them to escape them to make the Math renders correctly.</p>
<p>For example in TeX syntax it starts with [ but here you need to add an extra \ to escape it, thus \[</p>
<p>And so on… Luckily you don’t have to escape every \ characters, normally escape the beginning [ and ending ] is enough, and perhaps \ to \. </p>
<h4 id="The_Quadratic_Formula"><a href="#The_Quadratic_Formula" class="headerlink" title="The Quadratic Formula"></a>The Quadratic Formula</h4><p>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$</p>
<h4 id="The_Lorenz_Equations"><a href="#The_Lorenz_Equations" class="headerlink" title="The Lorenz Equations"></a>The Lorenz Equations</h4><p>\[\begin{aligned}<br>\dot{x} &amp; = \sigma(y-x) \\<br>\dot{y} &amp; = \rho x - y - xz \\<br>\dot{z} &amp; = -\beta z + xy<br>\end{aligned} \]</p>
<h4 id="The_Cauchy-Schwarz_Inequality"><a href="#The_Cauchy-Schwarz_Inequality" class="headerlink" title="The Cauchy-Schwarz Inequality"></a>The Cauchy-Schwarz Inequality</h4><p>\[ \left( \sum_{k=1}^n a_k b<em>k \right)^2 \leq \left( \sum\</em>{k=1}^n a<em>k^2 \right) \left( \sum</em>{k=1}^n b_k^2 \right) \]</p>
<h4 id="A_Cross_Product_Formula"><a href="#A_Cross_Product_Formula" class="headerlink" title="A Cross Product Formula"></a>A Cross Product Formula</h4><p>\[\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0<br>\end{vmatrix} \]</p>
<h4 id="The_probability_of_getting__24_24_24k_24_24_24_heads_when_flipping__24_24_24n_24_24_24_coins_is"><a href="#The_probability_of_getting__24_24_24k_24_24_24_heads_when_flipping__24_24_24n_24_24_24_coins_is" class="headerlink" title="The probability of getting $$$k$$$ heads when flipping $$$n$$$ coins is"></a>The probability of getting $$$k$$$ heads when flipping $$$n$$$ coins is</h4><p>\[P(E) = {n \choose k} p^k (1-p)^{ n-k} \]</p>
<h4 id="An_Identity_of_Ramanujan"><a href="#An_Identity_of_Ramanujan" class="headerlink" title="An Identity of Ramanujan"></a>An Identity of Ramanujan</h4><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>
<h4 id="Maxwell_u2019s_Equations"><a href="#Maxwell_u2019s_Equations" class="headerlink" title="Maxwell’s Equations"></a>Maxwell’s Equations</h4><p>\[  \begin{aligned}<br>\nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \   \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \<br>\nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \<br>\nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned}<br>\]</p>
<h4 id="A_Rogers-Ramanujan_Identity"><a href="#A_Rogers-Ramanujan_Identity" class="headerlink" title="A Rogers-Ramanujan Identity"></a>A Rogers-Ramanujan Identity</h4><p>\[  1 +  \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots =<br>\prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})},<br>\quad\quad \text{for $|q|&lt;1$}. \]</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一篇hexo博文当然要感谢给我们免费提供二级域名和云服务器的<a href="https://github.com/">github</a>啦。还有给我们提供框架和主题的<a href="http://hexo.io/">Hexo</a>咯。下面是一些markdown数学方面的简单操作。</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
