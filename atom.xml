<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[0.肆玖]]></title>
  <subtitle><![CDATA[原谅我一生放荡不羁是傻逼]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dna049.com/"/>
  <updated>2016-05-31T15:07:13.000Z</updated>
  <id>http://dna049.com/</id>
  
  <author>
    <name><![CDATA[dna049]]></name>
    <email><![CDATA[dna049@foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[C++ Template dna049]]></title>
    <link href="http://dna049.com/2020/02/02/C-Template-dna049/"/>
    <id>http://dna049.com/2020/02/02/C-Template-dna049/</id>
    <published>2020-02-01T18:02:02.000Z</published>
    <updated>2016-05-31T15:07:13.000Z</updated>
    <content type="html"><![CDATA[<p>突然想到在此留下模板貌似是个不错的选择也 0.0 长期更新</p>
<blockquote>
<p>虽说程序需求千变万化，但是一些短小精湛的函数块还是很值得整理收藏的。<br>在此提醒自己：找到一种慢的解法可能是找到最终解法的一步。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Composed by dna049 at <span class="number">2016</span>-<span class="number">4</span>-<span class="number">10</span> in FDU</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="u901A_u7528_u4EE3_u7801_u5757"><a href="#u901A_u7528_u4EE3_u7801_u5757" class="headerlink" title="通用代码块"></a>通用代码块</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000") // C++ only</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ( ( _WIN32 || __WIN32__ ) &amp;&amp; __cplusplus &lt; <span class="number">201103L</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%I64d"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%lld"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="comment">//typedef __int128 ll; // for g++</span></span><br><span class="line"><span class="comment">//const int INF =  0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">//1e9+7,1e9+9,1e18+3,1e18+9 are prime</span></span><br><span class="line"><span class="comment">//479&lt;&lt;21|1=1004535809,17&lt;&lt;27|1=2281701377 and g=3</span></span><br><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//#define dna049 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    freopen(<span class="string">"/Users/dna049/Desktop/AC/in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    LL time = clock();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"time: %f\n"</span>,<span class="number">1.0</span>*(clock()-time)/CLOCKS_PER_SEC);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">                   _ooOoo_</span><br><span class="line">                  o8888888o</span><br><span class="line">                  88" . "88</span><br><span class="line">                  (| -_- |)</span><br><span class="line">                  O\  =  /O</span><br><span class="line">               ____/`---'\____</span><br><span class="line">             .'  \\|     |//  `.</span><br><span class="line">            /  \\|||  :  |||//  \</span><br><span class="line">           /  _||||| -:- |||||-  \</span><br><span class="line">           |   | \\\  -  /// |   |</span><br><span class="line">           | \_|  ''\---/''  |   |</span><br><span class="line">           \  .-\__  `-`  ___/-. /</span><br><span class="line">         ___`. .'  /--.--\  `. . __</span><br><span class="line">      ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span><br><span class="line">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line">     \  \ `-.   \_ __\ /__ _/   .-` /  /</span><br><span class="line">======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="line">                   `=---='</span><br><span class="line">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">            佛祖保佑       永无BUG</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="u6570_u8BBA_u7BC7"><a href="#u6570_u8BBA_u7BC7" class="headerlink" title="数论篇"></a>数论篇</h2><h4 id="Greatest_Common_divisor"><a href="#Greatest_Common_divisor" class="headerlink" title="Greatest Common divisor"></a>Greatest Common divisor</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;	<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a,LL b,LL&amp; x,LL&amp; y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    LL d=exgcd(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然用直接 GNU 内建函数 __gcd</p>
<h4 id="u6A21_u4E58_u6CD5_u9006_u5143"><a href="#u6A21_u4E58_u6CD5_u9006_u5143" class="headerlink" title="模乘法逆元"></a>模乘法逆元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a,LL p)</span></span>&#123; <span class="comment">// 0&lt;a&lt;p and gcd(a,p)=1</span>    <span class="keyword">if</span>(a==<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;    <span class="keyword">return</span> (p-p/a)*inv(p%a,p)%p;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5FEB_u901F_u6A21_u52A0_u6CD5_u4E58_u6CD5"><a href="#u5FEB_u901F_u6A21_u52A0_u6CD5_u4E58_u6CD5" class="headerlink" title="快速模加法乘法"></a>快速模加法乘法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL x,<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    LL r=<span class="number">1</span>;<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,x*=x)  <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r*=x;<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">pow_mod</span><span class="params">(LL x,LL n,LL p)</span></span>&#123;</span><br><span class="line">    LL r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%p;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  x=x*x%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">mul_mod</span><span class="params">(LL x,LL n,LL p)</span></span>&#123;	    LL r=<span class="number">0</span>;</span><br><span class="line">	x%=p; n%=p;    <span class="keyword">while</span>(n)&#123;        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;            r+=x;            <span class="keyword">if</span>(r&gt;=m)    r-=m;        &#125;        n&gt;&gt;=<span class="number">1</span>;x&lt;&lt;=<span class="number">1</span>;        <span class="keyword">if</span>(x&gt;=m)    x-=m;    &#125;    <span class="keyword">return</span> r;&#125;<span class="function">LL <span class="title">mul_mod</span><span class="params">(LL x,LL n,LL p)</span></span>&#123;    LL r=<span class="number">0</span>;    <span class="keyword">while</span>(n)&#123;        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=(r+x)%p;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  x=(x+x)%p;    &#125;    <span class="keyword">return</span> r;&#125;</span><br><span class="line"><span class="function">LL <span class="title">pow_mod</span><span class="params">(LL x,LL n,LL p)</span></span>&#123;</span><br><span class="line">    LL r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=mul_mod(r,x,p);</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  x=mul_mod(x,x,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 pow_sum 可以化为矩阵幂解决，也可以用等比数列公式，取大的模解决。</p>
<h4 id="u6574_u6570_u5F00_u6839_u53F7"><a href="#u6574_u6570_u5F00_u6839_u53F7" class="headerlink" title="整数开根号"></a>整数开根号</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqrt2</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL r = (LL)<span class="built_in">sqrt</span>(x-<span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">while</span>(r*r&lt;=x)   ++r;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(r-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqrt3</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL r = (LL)cbrt(x-<span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">while</span>(r*r*r&lt;=x)   ++r;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(r-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u81EA_u7136_u6570_u65B9_u5E42_u548C__24O_28k_29_24"><a href="#u81EA_u7136_u6570_u65B9_u5E42_u548C__24O_28k_29_24" class="headerlink" title="自然数方幂和 $O(k)$"></a>自然数方幂和 $O(k)$</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sp[N],p[N];</span><br><span class="line">LL inv[N],AP[N],AS[N],f[N];</span><br><span class="line"><span class="function">LL <span class="title">getpowsum</span><span class="params">(LL n,<span class="keyword">int</span> k,LL mod)</span></span>&#123; <span class="comment">// mod &gt; k</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)    <span class="keyword">return</span> n%mod;</span><br><span class="line">    <span class="keyword">if</span>(p[<span class="number">0</span>]!=<span class="number">2</span>) spf();</span><br><span class="line">    <span class="keyword">int</span> nk=k+<span class="number">1</span>;</span><br><span class="line">    LL tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nk;++i)    tmp=tmp*i%mod;</span><br><span class="line">    inv[nk] = pow_mod(tmp,mod-<span class="number">2</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nk-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i) inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nk;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sp[i]==i)    f[i]=pow_mod(i,k,mod);</span><br><span class="line">        <span class="keyword">else</span>    f[i]=f[sp[i]]*f[i/sp[i]]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)&#123;</span><br><span class="line">        f[i]+=f[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(f[i]&gt;=mod)   f[i]-=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=nk)    <span class="keyword">return</span> f[n];</span><br><span class="line">    AP[<span class="number">0</span>]=AS[nk]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)   AP[i]=AP[i-<span class="number">1</span>]*(n+<span class="number">1</span>-i)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nk-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i) AS[i]=AS[i+<span class="number">1</span>]*(n-i-<span class="number">1</span>)%mod;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)&#123; <span class="comment">// because f(i)=0</span></span><br><span class="line">        LL x = f[i]*AP[i]%mod*AS[i]%mod*inv[i]%mod*inv[nk-i]%mod;</span><br><span class="line">        <span class="keyword">if</span>((nk-i)&amp;<span class="number">1</span>) res-=x; <span class="comment">// be careful</span></span><br><span class="line">        <span class="keyword">else</span>        res+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (res%mod+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u81EA_u7136_u6570_u65B9_u5E42_u548C_u7CBE_u786E_u7248"><a href="#u81EA_u7136_u6570_u65B9_u5E42_u548C_u7CBE_u786E_u7248" class="headerlink" title="自然数方幂和精确版"></a>自然数方幂和精确版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost::multiprecision;</span><br><span class="line">cpp_int f[N];</span><br><span class="line"><span class="function">cpp_int <span class="title">getpowsum</span><span class="params">(LL n,<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// k&lt;1000</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)    <span class="keyword">return</span> cpp_int(n);</span><br><span class="line">    <span class="keyword">if</span>(p[<span class="number">0</span>]!=<span class="number">2</span>) spf();</span><br><span class="line">    <span class="keyword">int</span> nk=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nk+<span class="number">1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sp[i]==i)    f[i]=<span class="built_in">pow</span>(cpp_int(i),k);</span><br><span class="line">        <span class="keyword">else</span>    f[i]=f[sp[i]]*f[i/sp[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)  f[i]+=f[i-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=nk)   <span class="keyword">return</span> f[n];</span><br><span class="line">    cpp_int res = <span class="number">0</span>,tl=<span class="number">1</span>,tr=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nk-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)    tr=tr*(n-i-<span class="number">1</span>)/(nk-i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=nk;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nk-i)&amp;<span class="number">1</span>)    res -= f[i]*tl*tr;</span><br><span class="line">        <span class="keyword">else</span>            res += f[i]*tl*tr;</span><br><span class="line">        tl = tl*(n-i)/(i+<span class="number">1</span>);</span><br><span class="line">        tr = tr*(nk-i)/(n-i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u79BB_u6563_u5BF9_u6570"><a href="#u79BB_u6563_u5BF9_u6570" class="headerlink" title="离散对数"></a><a href="http://blog.miskcoo.com/2015/05/discrete-logarithm-problem" target="_blank" rel="external">离散对数</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">baby_step_giant_step</span><span class="params">(LL a,LL b,LL p)</span></span>&#123; <span class="comment">// a^x = b mod p</span></span><br><span class="line">    a%=p,b%=p;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)    <span class="keyword">return</span> b%p?-<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL cnt = <span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL g=__gcd(a,p);g!=<span class="number">1</span>;g=__gcd(a,p))&#123;</span><br><span class="line">        <span class="keyword">if</span>(b%g) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        p/=g,b/=g,t=t*(a/g)%p;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">if</span>(b==t)    <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>&lt;LL,LL&gt; hash;</span><br><span class="line">    LL m = LL(<span class="built_in">sqrt</span>(p+<span class="number">0.1</span>) + <span class="number">1</span>);</span><br><span class="line">    LL base = b;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i!=m;++i)&#123;</span><br><span class="line">        hash[base] = i;</span><br><span class="line">        base = base*a%p;</span><br><span class="line">    &#125;</span><br><span class="line">    base = pow_mod(a,m,p);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;++i)&#123;</span><br><span class="line">        t=t*base%p;</span><br><span class="line">        <span class="keyword">if</span>(hash.count(t))   <span class="keyword">return</span> i*m-hash[t]+cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6A21_u7D20_u6570_u5F00_u6839_u53F7"><a href="#u6A21_u7D20_u6570_u5F00_u6839_u53F7" class="headerlink" title="模素数开根号"></a>模素数开根号</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">modsqrt</span><span class="params">(LL a,LL p)</span></span>&#123;  <span class="comment">// find x s.t x*x=a mod p;</span></span><br><span class="line">    a = (p+a%p)%p;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">2</span>)    <span class="keyword">return</span> (a&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    LL q=(p-<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pow_mod(a,q,p)!=<span class="number">1</span>)   <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(q&amp;<span class="number">1</span>) <span class="keyword">return</span> pow_mod(a,(q+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,p);</span><br><span class="line">    LL b,cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pow_mod(b=rand()%p,q,p)==<span class="number">1</span>);<span class="comment">//find a non quadratic residue</span></span><br><span class="line">    <span class="keyword">while</span>(!(q&amp;<span class="number">1</span>))   ++cnt,q&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    b=pow_mod(b,q,p);</span><br><span class="line">    LL x=pow_mod(a,(q+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,p);</span><br><span class="line">    <span class="keyword">for</span>(LL s=<span class="number">1</span>,t=pow_mod(a,q,p);t!=<span class="number">1</span>;s=<span class="number">1</span>)&#123; <span class="comment">//keep x*x=t*a;t^&#123;2^&#123;cnt-1&#125;&#125;=1</span></span><br><span class="line">        <span class="keyword">for</span>(LL tt=t*t%p;s&lt;cnt&amp;&amp;tt!=<span class="number">1</span>;++s)   tt=tt*tt%p;</span><br><span class="line">        LL d=pow_mod(b,<span class="number">1</span>&lt;&lt;(cnt-s-<span class="number">1</span>),p);</span><br><span class="line">        x=(x*d)%p;b=d*d%p;t=t*b%p;cnt=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6A21_u7D20_u6570_u5E42_u5F00_u65B9"><a href="#u6A21_u7D20_u6570_u5E42_u5F00_u65B9" class="headerlink" title="模素数幂开方"></a>模素数幂开方</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">mod_sqrt_p</span><span class="params">(LL a,LL n,LL p,<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//find x s.t x*x=a mod p^k where (a,p)=1,p&gt;2</span></span><br><span class="line">    LL q = (n/p)*((p-<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(pow_mod(a,q,n)!=<span class="number">1</span>)   <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(q&amp;<span class="number">1</span>) <span class="keyword">return</span> pow_mod(a,(q+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,n);</span><br><span class="line">    LL b,cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pow_mod(b=rand()%n,q,n)==<span class="number">1</span>);<span class="comment">//find a non quadratic residue</span></span><br><span class="line">    <span class="keyword">while</span>(!(q&amp;<span class="number">1</span>))   ++cnt,q&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    b=pow_mod(b,q,n);</span><br><span class="line">    LL x=pow_mod(a,(q+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(LL s=<span class="number">1</span>,t=pow_mod(a,q,n);t!=<span class="number">1</span>;s=<span class="number">1</span>)&#123;<span class="comment">// keep x*x=t*a;t^&#123;2^&#123;cnt-1&#125;&#125;=1</span></span><br><span class="line">        <span class="keyword">for</span>(LL tt=t*t%p;s&lt;cnt&amp;&amp;tt!=<span class="number">1</span>;++s)   tt=tt*tt%p;</span><br><span class="line">        LL d = pow_mod(b,<span class="number">1</span>&lt;&lt;(cnt-s-<span class="number">1</span>),n);</span><br><span class="line">        x=(x*d)%n;b=d*d%n;t=t*b%n;cnt=s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    LL r=<span class="number">1</span>;<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,x*=x)  <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r*=x;<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">mod_sqrt</span><span class="params">(LL a,LL p,<span class="keyword">int</span> k=<span class="number">1</span>)</span></span>&#123;<span class="comment">//find smallest x&gt;=0 s.t x*x=a mod p^k</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ka=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a%p==<span class="number">0</span>)   a/=p,++ka,--k;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ka&amp;<span class="number">1</span>)    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    LL n = <span class="built_in">pow</span>(p,k),x;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>||k==<span class="number">2</span>)  x = a==<span class="number">1</span>?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a%<span class="number">8</span>!=<span class="number">1</span>)    x=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=k;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>( (x*x)%(<span class="number">1</span>&lt;&lt;i) == a%(<span class="number">1</span>&lt;&lt;i))   <span class="keyword">continue</span>;</span><br><span class="line">                x+=<span class="number">1</span>&lt;&lt;(i-<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>   x = mod_sqrt_p(a,n,p,k);</span><br><span class="line">    <span class="keyword">return</span> x==-<span class="number">1</span>?-<span class="number">1</span>:<span class="built_in">pow</span>(p,ka&gt;&gt;<span class="number">1</span>)*(x&lt;n-x?x:n-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于模一般的 $n$，先素因子分解分别求出答案，然后用中国剩余定理求最终解。</p>
</blockquote>
<h4 id="u7EC4_u5408_u6570"><a href="#u7EC4_u5408_u6570" class="headerlink" title="组合数"></a>组合数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">LL C(int n,int m)&#123;</span><br><span class="line">    if(n&lt;m) return 0;</span><br><span class="line">    LL ans = 1;</span><br><span class="line">    for(int i=n;i+m&gt;n;--i)&#123;</span><br><span class="line">        ans = ans*i/(n-i+1);</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">const int N = 12;</span><br><span class="line">void get_C()&#123;  </span><br><span class="line">    C[0][0]=C[1][0]=C[1][1]=1;  </span><br><span class="line">    for(int i=2;i&lt;=N;++i)&#123;  </span><br><span class="line">        c[i][0]=c[i][i]=1;  </span><br><span class="line">        for(int j=1;j&lt;i;++j)&#123;</span><br><span class="line">        	c[i][j]=c[i-1][j]+c[i-1][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LL f[N]; // can add invf[N] for speed</span><br><span class="line">LL Lucas(LL n, LL m, LL p) &#123; // C(n,m)%p,f[n]=n!%p</span><br><span class="line">    LL r = 1;</span><br><span class="line">    while(n&amp;&amp;m)&#123;</span><br><span class="line">        LL np=n%p,mp=m%p;</span><br><span class="line">        if(np&lt;mp)   return 0;</span><br><span class="line">        r = r*f[np]%p*inv(f[mp]*f[np-mp]%p,p)%p;</span><br><span class="line">        n/=p,m/=p;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6709_u7406_u6570_u8F6C_u5316_u6210_u5C0F_u6570"><a href="#u6709_u7406_u6570_u8F6C_u5316_u6210_u5C0F_u6570" class="headerlink" title="有理数转化成小数"></a>有理数转化成小数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">rational</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">string</span> r;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;<span class="number">0</span>) n=-n,m=-m;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        n=-n;</span><br><span class="line">        r.push_back(<span class="string">'-'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = n/m;    <span class="comment">// get the integer part of n/m</span></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>)    r.push_back(<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">while</span>(t)&#123;</span><br><span class="line">        r.push_back(t%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r.reserve();</span><br><span class="line">    n%=m;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)    <span class="keyword">return</span> r;</span><br><span class="line">    r.push_back(<span class="string">'.'</span>);</span><br><span class="line">    t = __gcd(n,m);</span><br><span class="line">    n/=t;m/=t;</span><br><span class="line">    <span class="keyword">while</span>(m%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        m/=<span class="number">10</span>;</span><br><span class="line">        r.push_back(n/m+<span class="string">'0'</span>);</span><br><span class="line">        n%=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        m/=<span class="number">2</span>;n*=<span class="number">5</span>;</span><br><span class="line">        r.push_back(n/m+<span class="string">'0'</span>);</span><br><span class="line">        n%=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        m/=<span class="number">5</span>;n*=<span class="number">2</span>;</span><br><span class="line">        r.push_back(n/m+<span class="string">'0'</span>);</span><br><span class="line">        n%=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)    <span class="keyword">return</span> r;</span><br><span class="line">    r.push_back(<span class="string">'('</span>);</span><br><span class="line">    t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        r.push_back(<span class="number">10</span>*n/m+<span class="string">'0'</span>);</span><br><span class="line">        n=<span class="number">10</span>*n%m;</span><br><span class="line">        t=<span class="number">10</span>*t%m;</span><br><span class="line">    &#125;<span class="keyword">while</span>(t!=<span class="number">1</span>);</span><br><span class="line">    r.push_back(<span class="string">')'</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>详细分析见<a href="http://dna049.com/2016/04/17/Length-of-period-of-fraction/">我的博文</a>。</p>
<h4 id="N_u4EE5_u5185_u7D20_u6570_u7EBF_u6027_u7B5B__24O_28n_29_24"><a href="#N_u4EE5_u5185_u7D20_u6570_u7EBF_u6027_u7B5B__24O_28n_29_24" class="headerlink" title="N以内素数线性筛 $O(n)$"></a>N以内素数线性筛 $O(n)$</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">bool</span> ip[N];</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;ip[<span class="number">2</span>]=<span class="literal">true</span>;p[cnt++]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   ip[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ip[i])   p[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; cnt &amp;&amp; i * p[j] &lt; N; ++j) &#123;</span><br><span class="line">            ip[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)	<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isp</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;N)	<span class="keyword">return</span> ip[n];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;p[i]*p[i]&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%p[i]==<span class="number">0</span>)	<span class="keyword">return</span> <span class="literal">false</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6B63_u6574_u6570_u62C6_u5206"><a href="#u6B63_u6574_u6570_u62C6_u5206" class="headerlink" title="正整数拆分"></a>正整数拆分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*(<span class="number">3</span>*j-<span class="number">1</span>)/<span class="number">2</span>&lt;=i;++j)&#123;</span><br><span class="line">            (a[i]+=(j&amp;<span class="number">1</span>?<span class="number">1</span>:-<span class="number">1</span>)*a[i-j*(<span class="number">3</span>*j-<span class="number">1</span>)/<span class="number">2</span>])%=M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=-<span class="number">1</span>;j*(<span class="number">3</span>*j-<span class="number">1</span>)/<span class="number">2</span>&lt;=i;--j)&#123;</span><br><span class="line">            (a[i]+=(j&amp;<span class="number">1</span>?<span class="number">1</span>:-<span class="number">1</span>)*a[i-j*(<span class="number">3</span>*j-<span class="number">1</span>)/<span class="number">2</span>])%=M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="number">0</span>)  a[i]+=M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5927_u7D20_u6570Miller-Rabin_u6982_u7387_u5224_u522B_u6CD5"><a href="#u5927_u7D20_u6570Miller-Rabin_u6982_u7387_u5224_u522B_u6CD5" class="headerlink" title="大素数Miller-Rabin概率判别法"></a><a href="http://blog.miskcoo.com/2014/07/miller-rabin-primality-test" target="_blank" rel="external">大素数Miller-Rabin概率判别法</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Witness</span><span class="params">(LL a,LL n,LL m,<span class="keyword">int</span> t)</span></span>&#123;    LL x=pow_mod(a,m,n);    <span class="keyword">if</span>(x==<span class="number">1</span>||x==n-<span class="number">1</span>)    <span class="keyword">return</span> <span class="literal">false</span>;    <span class="keyword">while</span>(t--)&#123;        x=mul_mod(x,x,n);        <span class="keyword">if</span>(x==n-<span class="number">1</span>)  <span class="keyword">return</span> <span class="literal">false</span>;    &#125;    <span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="function"><span class="keyword">bool</span> <span class="title">Rabin</span><span class="params">(LL n)</span></span>&#123;    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)     <span class="keyword">return</span> <span class="literal">false</span>;    <span class="keyword">if</span>(n==<span class="number">2</span>)    <span class="keyword">return</span> <span class="literal">true</span>;    <span class="keyword">if</span>(!(n&amp;<span class="number">1</span>))  <span class="keyword">return</span> <span class="literal">false</span>;    LL m=n-<span class="number">1</span>;    <span class="keyword">int</span> t=<span class="number">0</span>,cnt=<span class="number">33</span>;    <span class="keyword">while</span>(!(m&amp;<span class="number">1</span>))&#123;        ++t;m&gt;&gt;=<span class="number">1</span>;    &#125;    <span class="keyword">while</span>(cnt--)&#123;        LL a=rand()%(n-<span class="number">1</span>)+<span class="number">1</span>;        <span class="keyword">if</span>(Witness(a,n,m,t))    <span class="keyword">return</span> <span class="literal">false</span>;    &#125;    <span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6700_u5C0F_u7D20_u56E0_u5B50_u9884_u5904_u7406"><a href="#u6700_u5C0F_u7D20_u56E0_u5B50_u9884_u5904_u7406" class="headerlink" title="最小素因子预处理"></a>最小素因子预处理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> sp[N],p[N];<span class="function"><span class="keyword">int</span> <span class="title">spf</span><span class="params">()</span></span>&#123; <span class="comment">// samllest prime factor</span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;p[cnt++]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">2</span>)   sp[i]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   sp[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sp[i]==i)    p[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; cnt &amp;&amp; p[j]&lt;=sp[i] &amp;&amp; i * p[j] &lt; N; ++j) &#123;</span><br><span class="line">            sp[i * p[j]] = p[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5927_u6574_u6570_u7684_u6700_u5C0F_u7D20_u56E0_u5B50"><a href="#u5927_u6574_u6570_u7684_u6700_u5C0F_u7D20_u56E0_u5B50" class="headerlink" title="大整数的最小素因子"></a>大整数的最小素因子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">Pollard_rho</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    LL x=rand()%(n-<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    LL y=x,i=<span class="number">1</span>,k=<span class="number">2</span>,c=rand()%(n-<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        x=(mul_mod(x,x,n)+c)%n;</span><br><span class="line">        LL d=gcd(y-x+n,n);</span><br><span class="line">        <span class="keyword">if</span>(d&gt;<span class="number">1</span>)    <span class="keyword">return</span> d;</span><br><span class="line">        <span class="keyword">if</span>(++i==k)&#123;</span><br><span class="line">            y=x;</span><br><span class="line">            <span class="keyword">if</span>(k&gt;n)	<span class="keyword">return</span> n;</span><br><span class="line">            k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findp</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Rabin(n))&#123;</span><br><span class="line">        ans=min(ans,n);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL p=n;</span><br><span class="line">    <span class="keyword">while</span>(p==n) p=Pollard_rho(n);</span><br><span class="line">    findp(p);</span><br><span class="line">    findp(n/p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Mobius_function"><a href="#Mobius_function" class="headerlink" title="Mobius function"></a>Mobius function</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">bool</span> ip[N];</span><br><span class="line"><span class="keyword">int</span> mu[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_mu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;ip[<span class="number">2</span>]=<span class="literal">true</span>;p[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   ip[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>,cnt = <span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ip[i])&#123;</span><br><span class="line">            p[cnt++] = i;</span><br><span class="line">            mu[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>,t;j&lt;cnt&amp;&amp;(t= i * p[j])&lt;N;++j)&#123;</span><br><span class="line">            ip[t] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line">            mu[t] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">4</span>)  mu[i]=-mu[i&gt;&gt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmu</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;    <span class="keyword">int</span> r=<span class="number">1</span>;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;p[i]*p[i]&lt;=n;++i)&#123;        <span class="keyword">if</span>(n%p[i]==<span class="number">0</span>)&#123;            n/=p[i];</span><br><span class="line">            <span class="keyword">if</span>(n%p[i]==<span class="number">0</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            r=-r;        &#125;    &#125;    <span class="keyword">return</span> n&gt;<span class="number">1</span>?-r:r;&#125;</span><br><span class="line"><span class="keyword">int</span> sumu[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sumu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mu[<span class="number">1</span>]!=<span class="number">1</span>)    init_mu();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)    sumu[i]=sumu[i-<span class="number">1</span>]+mu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">M</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// M(n) = M(n-1) + mu(n)</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> sumu[n];</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it = mp.find(n);</span><br><span class="line">    <span class="keyword">if</span>(it!=mp.end())    <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j=n/(n/i);</span><br><span class="line">        r-=(j-i+<span class="number">1</span>)*M(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    mp.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(n,r));</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Q</span><span class="params">(LL n)</span></span>&#123; <span class="comment">// Q(n) = Q(n-1) + |mu(n)|</span></span><br><span class="line">    LL r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>,t;(t=i*i)&lt;n;++i)&#123;</span><br><span class="line">        r+=mu[i]*(n/t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Euler_totient_function"><a href="#Euler_totient_function" class="headerlink" title="Euler totient function"></a>Euler totient function</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> phi[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_phi</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)   phi[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,cnt=<span class="number">0</span>;i&lt;N;++i)&#123;        <span class="keyword">if</span>(phi[i]==i)&#123;</span><br><span class="line">            --phi[i];</span><br><span class="line">            p[cnt++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*p[j]&lt;N;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                phi[i*p[j]]=phi[i]*p[j];<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i*p[j]]=phi[i]*(p[j]-<span class="number">1</span>);</span><br><span class="line">        &#125;    &#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">init_phi</span><span class="params">()</span></span>&#123;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   phi[i]=i;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">2</span>)   phi[i]=i&gt;&gt;<span class="number">1</span>;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;        <span class="keyword">if</span>(phi[i]!=i)	<span class="keyword">continue</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;N;j+=i)	phi[j]=phi[j]/i*(i-<span class="number">1</span>);    &#125;&#125;<span class="function">LL <span class="title">getphi</span><span class="params">(LL x)</span></span>&#123;    LL r=x;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;p[i]*p[i]&lt;=x;++i)&#123;        <span class="keyword">if</span>(x%p[i]==<span class="number">0</span>)&#123;            r=r/p[i]*(p[i]-<span class="number">1</span>);            <span class="keyword">while</span>(x%p[i]==<span class="number">0</span>)    x/=p[i];        &#125;    &#125;    <span class="keyword">if</span>(x&gt;<span class="number">1</span>) r=r/x*(x-<span class="number">1</span>);    <span class="keyword">return</span> r;&#125;LL sumphi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sumphi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(phi[<span class="number">2</span>]!=<span class="number">1</span>)   init_phi();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)    sumphi[i]=sumphi[i-<span class="number">1</span>]+phi[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,LL&gt; mp;</span><br><span class="line"><span class="function">LL <span class="title">getsumphi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> (LL)sumphi[n];</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,LL&gt;::iterator it = mp.find(n);</span><br><span class="line">    <span class="keyword">if</span>(it!=mp.end())    <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    LL r=LL(n+<span class="number">1</span>)*n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j=n/(n/i);</span><br><span class="line">        r-=(j-i+<span class="number">1</span>)*getsumphi(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    mp.insert(pair&lt;<span class="keyword">int</span>,LL&gt;(n,r));</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="24_5Cpi_28x_29_24__u51FD_u6570"><a href="#24_5Cpi_28x_29_24__u51FD_u6570" class="headerlink" title="$\pi(x)$ 函数"></a>$\pi(x)$ 函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span>*<span class="number">3</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">11</span>*<span class="number">13</span>*<span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM+<span class="number">1</span>][M+<span class="number">1</span>],sz[M+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    getprime();</span><br><span class="line">    sz[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=PM;++i)  phi[i][<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;++i)&#123;</span><br><span class="line">        sz[i]=p[i]*sz[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=PM;++j)&#123;</span><br><span class="line">            phi[j][i]=phi[j][i-<span class="number">1</span>]-phi[j/p[i]][i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getphi</span><span class="params">(LL x,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="number">0</span>)  <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(s &lt;= M)  <span class="keyword">return</span> phi[x%sz[s]][s]+(x/sz[s])*phi[sz[s]][s];</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= p[s]*p[s])   <span class="keyword">return</span> pi[x]-s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= p[s]*p[s]*p[s] &amp;&amp; x&lt; N)&#123;</span><br><span class="line">        <span class="keyword">int</span> s2x = pi[sqrt2(x)];</span><br><span class="line">        LL ans = pi[x]-(s2x+s-<span class="number">2</span>)*(s2x-s+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s+<span class="number">1</span>;i&lt;=s2x;++i)&#123;</span><br><span class="line">            ans += pi[x/p[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getphi(x,s-<span class="number">1</span>)-getphi(x/p[s],s-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getpi</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; N)   <span class="keyword">return</span> pi[x];</span><br><span class="line">    LL ans = getphi(x,pi[sqrt3(x)])+pi[sqrt3(x)]-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pi[sqrt3(x)]+<span class="number">1</span>,ed=pi[sqrt2(x)];i&lt;=ed;++i)&#123;</span><br><span class="line">        ans -= getpi(x/p[i])-i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lehmer_pi</span><span class="params">(LL x)</span></span>&#123; <span class="comment">// x &lt; N*N</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; N)   <span class="keyword">return</span> pi[x];</span><br><span class="line">    <span class="keyword">int</span> a = (<span class="keyword">int</span>)lehmer_pi(sqrt2(sqrt2(x)));</span><br><span class="line">    <span class="keyword">int</span> b = (<span class="keyword">int</span>)lehmer_pi(sqrt2(x));</span><br><span class="line">    <span class="keyword">int</span> c = (<span class="keyword">int</span>)lehmer_pi(sqrt3(x));</span><br><span class="line">    LL sum = getphi(x, a) + LL(b + a - <span class="number">2</span>) * (b - a + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a + <span class="number">1</span>; i &lt;= b; i++) &#123;</span><br><span class="line">        LL w = x / p[i];</span><br><span class="line">        sum -= lehmer_pi(w);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; c) <span class="keyword">continue</span>;</span><br><span class="line">        LL lim = lehmer_pi(sqrt2(w));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= lim; j++) &#123;</span><br><span class="line">            sum -= lehmer_pi(w / p[j]) - (j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一个版本：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line">LL L[N],R[N];</span><br><span class="line"><span class="function">LL <span class="title">getans</span><span class="params">(LL n)</span></span>&#123; <span class="comment">// n*n &lt; 1e14</span></span><br><span class="line">    LL rn = sqrt2(n);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=rn;++i)   R[i]=n/i-<span class="number">1</span>;</span><br><span class="line">    LL ln = n/(rn+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=ln;++i)   L[i]=i-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL p=<span class="number">2</span>;p&lt;=rn;++p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L[p]==L[p-<span class="number">1</span>])    <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(LL i=<span class="number">1</span>,tn=min(n/(p*p),rn);i&lt;=tn;++i)&#123;</span><br><span class="line">            R[i] -= (i*p&lt;=rn?R[i*p]:L[n/(i*p)])-L[p-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(LL i=ln;i&gt;=p*p;--i)&#123;</span><br><span class="line">            L[i] -= L[i/p]-L[p-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = L[sqrt3(n)];</span><br><span class="line">    <span class="keyword">for</span>(LL p=<span class="number">2</span>;p&lt;=rn;++p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L[p] == L[p-<span class="number">1</span>])  <span class="keyword">continue</span>;</span><br><span class="line">        ans += R[p]-L[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="u6C42_u5947_u7D20_u6570_u7684_u4E00_u4E2A_u539F_u6839"><a href="#u6C42_u5947_u7D20_u6570_u7684_u4E00_u4E2A_u539F_u6839" class="headerlink" title="求奇素数的一个原根"></a>求奇素数的一个原根</h4><p>首先，模 $m$ 有原根的充要条件是：$m=2,4,p^a,2p^a$，其中$p$为奇素数。<br>对于求模$p$的原根方法：对 $p-1$ 素因子分解：$p-1 = p_1^{a_1} \cdots p_s^{a_s}$ 若恒有<br>$$ g^{\frac{p-1}{p_i}} \neq 1(mod \; p) $$<br>则 $g$ 是 模$p$的原根。对于 $p^a$ 可以用 $p$ 的原根简单构造，而 $2p^a$ 的原根为 $p^a$ 的原根 与 $p^a$ 的原根和 $p^a$的和中奇数者。(证明见P150《数论基础》潘承洞)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">LL fact[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;LL(p[i])*p[i]&lt;=n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%p[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            fact[cnt++] = p[i];</span><br><span class="line">            <span class="keyword">while</span>(n%p[i]==<span class="number">0</span>) n /= p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) fact[cnt++] = n;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">proot</span><span class="params">(LL p)</span></span>&#123; <span class="comment">// p must be odd prime</span></span><br><span class="line">    <span class="keyword">int</span> cnt = factor(p-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i&lt;p;++i)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pow_mod(i,(p-<span class="number">1</span>)/fact[j],p)==<span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)    <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>求所有原根见<a href="http://dna049.com/2016/02/16/Quadratic-residue-and-Guass-reciprocity/">我之前的博文</a></p>
</blockquote>
<h4 id="u6570_u8BBA_u51FD_u6570_u7684Dirichlet_u4E58_u79EF"><a href="#u6570_u8BBA_u51FD_u6570_u7684Dirichlet_u4E58_u79EF" class="headerlink" title="数论函数的Dirichlet乘积"></a>数论函数的Dirichlet乘积</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Dirichlet&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> a[N],n;</span><br><span class="line">    Dirichlet(<span class="keyword">int</span> _n = <span class="number">0</span>)&#123;</span><br><span class="line">        n=_n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Dirichlet <span class="keyword">operator</span>*(<span class="keyword">const</span> Dirichlet&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function">Dirichlet <span class="title">R</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;i*j&lt;=n;++j)&#123;</span><br><span class="line">                R.a[i*j]+=a[i]*A.a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Dirichlet</span><span class="params">(<span class="keyword">int</span> n,LL a[],LL b[])</span></span>&#123;</span><br><span class="line">    LL ans = <span class="number">0</span>;<span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">1</span>;s*s&lt;n;++s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%s==<span class="number">0</span>)  <span class="keyword">continue</span>;</span><br><span class="line">        ans+=a[s]*b[n/s]+b[s]*a[n/s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s*s==n)  ans+=a[s]*b[s];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u7EBF_u6027_u540C_u4F59_u65B9_u7A0B"><a href="#u7EBF_u6027_u540C_u4F59_u65B9_u7A0B" class="headerlink" title="线性同余方程"></a>线性同余方程</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modeq</span><span class="params">(LL a,LL b,LL n)</span></span>&#123; <span class="comment">// a*x=b mod n return x</span>    LL x,y,d;    d=exgcd(a,n,x,y);    <span class="keyword">if</span>(b%d!=<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;    a/=d;n/=d;b/=d;    <span class="keyword">return</span> ((x*b)%n+n)%n;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E2D_u56FD_u5269_u4F59_u5B9A_u7406"><a href="#u4E2D_u56FD_u5269_u4F59_u5B9A_u7406" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">chinaRemain</span><span class="params">(<span class="keyword">int</span> n,LL a[],LL m[])</span></span>&#123;<span class="comment">//x=a[i] mod m[i]</span>    LL x,y,a1,a2,m1,m2,d;    a1=a[<span class="number">0</span>],m1=m[<span class="number">0</span>];    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;        a2=a[i],m2=m[i];        d=exgcd(m1,m2,x,y);        <span class="keyword">if</span>((a2-a1)%d!=<span class="number">0</span>)    <span class="keyword">return</span> -<span class="number">1</span>;        a1+=(((a2-a1)/d*x)%m2+m2)%m2*m1;        m1=m1/d*m2;        a1=(a1%m1+m1)%m1;    &#125;    <span class="keyword">return</span> a1;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">double</span> *x,<span class="keyword">double</span> *y,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=i,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;loglen;++j,t&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            k=(k&lt;&lt;<span class="number">1</span>)|(t&amp;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;i)&#123;</span><br><span class="line">            <span class="keyword">double</span> tmp=x[i];x[i]=x[k];x[k]=tmp;</span><br><span class="line">            tmp=y[i];y[i]=y[k];y[k]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">double</span> *x,<span class="keyword">double</span> *y,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen,<span class="keyword">bool</span> isInverse)</span></span>&#123;</span><br><span class="line">    change(x,y,len,loglen);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">2</span>;step&lt;=len;step&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> half=step&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> theta=PI/half;</span><br><span class="line">        <span class="keyword">double</span> wmx=<span class="built_in">cos</span>(theta),wmy=<span class="built_in">sin</span>(theta);</span><br><span class="line">        <span class="keyword">if</span>(isInverse)   wmy=-wmy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=step)&#123;</span><br><span class="line">            <span class="keyword">double</span> wx=<span class="number">1</span>,wy=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;half;++j)&#123;</span><br><span class="line">                <span class="keyword">double</span> cx=x[i+j],cy=y[i+j];</span><br><span class="line">                <span class="keyword">double</span> dx=x[i+j+half],dy=y[i+j+half];</span><br><span class="line">                <span class="keyword">double</span> ex=dx*wx-dy*wy,ey=dx*wy+dy*wx;</span><br><span class="line">                x[i+j]=cx+ex;y[i+j]=cy+ey;</span><br><span class="line">                x[i+j+half]=cx-ex;y[i+j+half]=cy-ey;</span><br><span class="line">                <span class="keyword">double</span> tmp=wx*wmx-wy*wmy;</span><br><span class="line">                wy=wx*wmy+wy*wmx;wx=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isInverse) <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        x[i]/=len;y[i]/=len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5229_u7528FFT_u7684_u591A_u9879_u5F0F_u4E58_u6CD5"><a href="#u5229_u7528FFT_u7684_u591A_u9879_u5F0F_u4E58_u6CD5" class="headerlink" title="利用FFT的多项式乘法"></a>利用FFT的多项式乘法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen,<span class="keyword">bool</span> same)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">        ax[i]=a[i];bx[i]=b[i];</span><br><span class="line">        ay[i]=by[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fft(ax,ay,len,loglen,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(!same) fft(bx,by,len,loglen,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">            bx[i]=ax[i];by[i]=ay[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">        <span class="keyword">double</span> cx=ax[i]*bx[i]-ay[i]*by[i];</span><br><span class="line">        <span class="keyword">double</span> cy=ax[i]*by[i]+ay[i]*bx[i];</span><br><span class="line">        ax[i]=cx;ay[i]=cy;</span><br><span class="line">    &#125;</span><br><span class="line">    fft(ax,ay,len,loglen,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">        a[i]=(<span class="keyword">int</span>)(ax[i]+<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=q-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        a[i+q-p]=(a[i+q-p]+ta*a[q+i])%M;</span><br><span class="line">        a[i]=(a[i]+tb*a[q+i])%M;</span><br><span class="line">        a[i+q]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5FEB_u901F_u6570_u8BBA_u53D8_u6362_NFT"><a href="#u5FEB_u901F_u6570_u8BBA_u53D8_u6362_NFT" class="headerlink" title="快速数论变换 NFT"></a>快速数论变换 NFT</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(LL *x,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=i,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;loglen;++j,t&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            k=(k&lt;&lt;<span class="number">1</span>)|(t&amp;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;i) swap(x[i],x[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> LL FM = <span class="number">479</span>&lt;&lt;<span class="number">21</span>|<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(LL *x,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen,<span class="keyword">bool</span> isInverse)</span></span>&#123;</span><br><span class="line">    LL g = pow_mod(<span class="number">3</span>,(FM-<span class="number">1</span>)&gt;&gt;loglen,FM);</span><br><span class="line">    <span class="keyword">if</span>(isInverse)&#123;</span><br><span class="line">        g=inv(g,FM);</span><br><span class="line">        LL invlen = pow_mod(len,FM-<span class="number">2</span>,FM);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            x[i]=x[i]*invlen%FM;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    change(x,len,loglen);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">2</span>;step&lt;=len;step&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> half = step&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        LL wn = pow_mod(g,len/step,FM);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=step)&#123;</span><br><span class="line">            LL w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;i+half;++j)&#123;</span><br><span class="line">                LL t=(w*x[j+half])%FM;</span><br><span class="line">                x[j+half]=(x[j]-t+FM)%FM;</span><br><span class="line">                x[j]=(x[j]+t)%FM;</span><br><span class="line">                w = w*wn%FM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(LL *a,LL *b,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen,<span class="keyword">bool</span> same)</span></span>&#123;</span><br><span class="line">    nft(a,len,loglen,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(same)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)  a[i]=a[i]*a[i]%FM;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        nft(b,len,loglen,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)  a[i]=a[i]*b[i]%FM;</span><br><span class="line">    &#125;</span><br><span class="line">    nft(a,len,loglen,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u591A_u9879_u5F0F_u7C7B"><a href="#u591A_u9879_u5F0F_u7C7B" class="headerlink" title="多项式类"></a>多项式类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Node&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> c,d;</span><br><span class="line">    Node* next;</span><br><span class="line">    Node()&#123;&#125;</span><br><span class="line">    Node(<span class="keyword">int</span> _c,<span class="keyword">int</span> _d):c(_c),d(_d)&#123;next=<span class="literal">NULL</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Poly&#123;     <span class="comment">// a0+a1*x+...+an*x^n</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="keyword">const</span> Poly&amp; A)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A.head-&gt;c==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A.head-&gt;d==<span class="number">0</span>)    os&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line">            <span class="keyword">if</span>(A.head-&gt;d==<span class="number">1</span>)    os&lt;&lt;<span class="string">"-x"</span>;</span><br><span class="line">            <span class="keyword">if</span>(A.head-&gt;d&gt;<span class="number">1</span>)     os&lt;&lt;<span class="string">"-x^"</span>&lt;&lt;(A.head-&gt;d);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            os&lt;&lt;A.head-&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(A.head-&gt;d==<span class="number">1</span>)    os&lt;&lt;<span class="string">"x"</span>;</span><br><span class="line">            <span class="keyword">if</span>(A.head-&gt;d&gt;<span class="number">1</span>)     os&lt;&lt;<span class="string">"x^"</span>&lt;&lt;(A.head-&gt;d);</span><br><span class="line">        &#125;</span><br><span class="line">        Node* p=A.head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;c&gt;<span class="number">0</span>)      os&lt;&lt;<span class="string">"+"</span>;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;c==-<span class="number">1</span>)    os&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;c!=<span class="number">1</span>)     os&lt;&lt;(p-&gt;c);</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;d&gt;<span class="number">1</span>)  os&lt;&lt;<span class="string">"x^"</span>&lt;&lt;(p-&gt;d);</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;d==<span class="number">1</span>) os&lt;&lt;<span class="string">"x"</span>;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Size;</span><br><span class="line">    Node *head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Poly()&#123;</span><br><span class="line">        head=<span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        Size=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly(<span class="keyword">int</span> x)&#123;</span><br><span class="line">        head=<span class="keyword">new</span> Node(x,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(x)   Size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>    Size=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) &#123;Poly();<span class="keyword">return</span>;&#125;</span><br><span class="line">        head=<span class="literal">NULL</span>;</span><br><span class="line">        Node* p;</span><br><span class="line">        <span class="keyword">for</span>(Size=n-<span class="number">1</span>;Size!=-<span class="number">1</span>&amp;&amp;a[Size]==<span class="number">0</span>;--Size);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Size;i!=-<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">                p=<span class="keyword">new</span> Node(a[i],i);</span><br><span class="line">                p-&gt;next=head;</span><br><span class="line">                head=p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)  head=<span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//  if(head==NULL) new (this)poly();</span></span><br><span class="line">    &#125;</span><br><span class="line">    Poly(<span class="keyword">const</span> Poly&amp; A)&#123;</span><br><span class="line">        head=<span class="keyword">new</span> Node(A.head-&gt;c,A.head-&gt;d);</span><br><span class="line">        Size=A.Size;</span><br><span class="line">        Node *Ap=A.head-&gt;next,*p=head,*tp;</span><br><span class="line">        <span class="keyword">while</span>(Ap!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            tp=<span class="keyword">new</span> Node(Ap-&gt;c,Ap-&gt;d);</span><br><span class="line">            p-&gt;next=tp;p=tp;</span><br><span class="line">            Ap=Ap-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Poly()&#123;</span><br><span class="line">        del();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node* p;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p=head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span>(head);</span><br><span class="line">            head=p;</span><br><span class="line">        &#125;</span><br><span class="line">        Size=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Poly&amp; A)&#123;</span><br><span class="line">        del();</span><br><span class="line">        Size=A.Size;</span><br><span class="line">        head=<span class="keyword">new</span> Node(A.head-&gt;c,A.head-&gt;d);</span><br><span class="line">        Node *Ap=A.head-&gt;next,*p=head,*tp;</span><br><span class="line">        <span class="keyword">while</span>(Ap!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            tp=<span class="keyword">new</span> Node(Ap-&gt;c,Ap-&gt;d);</span><br><span class="line">            p-&gt;next=tp;p=tp;</span><br><span class="line">            Ap=Ap-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span>+(<span class="keyword">const</span> Poly&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Size&lt;A.Size) <span class="keyword">return</span> add(A,*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">else</span>            <span class="keyword">return</span> add(*<span class="keyword">this</span>,A);</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span>-()<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function">Poly <span class="title">R</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        Node *Rp=R.head;</span><br><span class="line">        <span class="keyword">while</span>(Rp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            Rp-&gt;c=-Rp-&gt;c;</span><br><span class="line">            Rp=Rp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span>-(<span class="keyword">const</span> Poly&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Size&lt;A.Size) <span class="keyword">return</span> add(-A,*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">else</span>            <span class="keyword">return</span> add(*<span class="keyword">this</span>,-A);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">mul</span><span class="params">(<span class="keyword">int</span> tc,<span class="keyword">int</span> td)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tc==<span class="number">0</span>)       <span class="keyword">return</span> Poly();</span><br><span class="line">        <span class="keyword">if</span>(Size==-<span class="number">1</span>)    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="function">Poly <span class="title">R</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        Node *Rp=R.head;</span><br><span class="line">        <span class="keyword">while</span>(Rp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            Rp-&gt;c*=tc;</span><br><span class="line">            Rp-&gt;d+=td;</span><br><span class="line">            R.Size=Rp-&gt;d;</span><br><span class="line">            Rp=Rp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span>*(Poly&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        Poly R;</span><br><span class="line">        Node *Ap=A.head;</span><br><span class="line">        <span class="keyword">while</span>(Ap!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            R=R+mul(Ap-&gt;c,Ap-&gt;d);</span><br><span class="line">            Ap=Ap-&gt;next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> td)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        Node *p=head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;d&lt;td) p=p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>||p-&gt;d&gt;td)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span>                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> td)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        Node *p=head;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;d&lt;=td)&#123;</span><br><span class="line">            ans+=p-&gt;c;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Poly <span class="title">add</span><span class="params">(<span class="keyword">const</span> Poly&amp; A,<span class="keyword">const</span> Poly&amp; B)</span></span>&#123;    <span class="comment">//A.Size&gt;=B.Size</span></span><br><span class="line">        <span class="function">Poly <span class="title">R</span><span class="params">(A)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(B.Size==-<span class="number">1</span>)   <span class="keyword">return</span> R;</span><br><span class="line">        Node *Bp=B.head,*Rp=R.head,*tp;</span><br><span class="line">        <span class="keyword">if</span>(R.head-&gt;d&gt;B.head-&gt;d)&#123;</span><br><span class="line">            tp=<span class="keyword">new</span> Node(B.head-&gt;c,B.head-&gt;d);</span><br><span class="line">            tp-&gt;next=R.head;</span><br><span class="line">            Rp=R.head=tp;</span><br><span class="line">            Bp=Bp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(Bp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Rp-&gt;d==Bp-&gt;d)&#123;</span><br><span class="line">                Rp-&gt;c+=Bp-&gt;c;</span><br><span class="line">                Bp=Bp-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(Rp-&gt;next-&gt;d&gt;Bp-&gt;d)&#123;</span><br><span class="line">                    tp=<span class="keyword">new</span> Node(Bp-&gt;c,Bp-&gt;d);</span><br><span class="line">                    tp-&gt;next=Rp-&gt;next;</span><br><span class="line">                    Rp-&gt;next=tp;Rp=tp;</span><br><span class="line">                    Bp=Bp-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> Rp=Rp-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R.head-&gt;next!=<span class="literal">NULL</span>&amp;&amp;R.head-&gt;c==<span class="number">0</span>)&#123;</span><br><span class="line">            Rp=R.head;</span><br><span class="line">            R.head=Rp-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span>(Rp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(R.head-&gt;c==<span class="number">0</span>)    R.Size=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>                R.Size=R.head-&gt;d;</span><br><span class="line">        Rp=R.head;</span><br><span class="line">        <span class="keyword">while</span>(Rp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Rp-&gt;next-&gt;c==<span class="number">0</span>)&#123;</span><br><span class="line">                tp=Rp-&gt;next;</span><br><span class="line">                Rp-&gt;next=tp-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span>(tp);</span><br><span class="line">            &#125;</span><br><span class="line">            Rp=Rp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="u5927_u6570_u52A0_u4E58_u7C7B"><a href="#u5927_u6570_u52A0_u4E58_u7C7B" class="headerlink" title="大数加乘类"></a>大数加乘类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BigInt&#123; <span class="comment">// without nft and we won't set B=10000 in nft</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> B=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> BB=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> len,a[N]; <span class="comment">// keep the inverse order of int &gt; 0</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt()&#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt(<span class="keyword">int</span> x)&#123; <span class="comment">// construct function use c.f. brings mistake in clang</span></span><br><span class="line">        clear();</span><br><span class="line">        <span class="keyword">while</span>(x&gt;=B)&#123;</span><br><span class="line">            a[len++] = x%B;</span><br><span class="line">            x/=B;</span><br><span class="line">        &#125;</span><br><span class="line">        a[len++]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt(LL x)&#123; <span class="comment">// construct function use c.f. brings mistake in clang</span></span><br><span class="line">        clear();</span><br><span class="line">        <span class="keyword">while</span>(x&gt;=B)&#123;</span><br><span class="line">            a[len++] = x%B;</span><br><span class="line">            x/=B;</span><br><span class="line">        &#125;</span><br><span class="line">        a[len++]=(<span class="keyword">int</span>)x;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt(<span class="keyword">const</span> <span class="keyword">char</span> *s)&#123;</span><br><span class="line">        clear();</span><br><span class="line">        <span class="keyword">int</span> slen=(<span class="keyword">int</span>)<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">while</span>(slen&gt;<span class="number">0</span>&amp;&amp;a[slen-<span class="number">1</span>]==<span class="string">'0'</span>)  --slen;</span><br><span class="line">        <span class="keyword">if</span>(slen==<span class="number">0</span>) a[len++] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(slen&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;B;i*=<span class="number">10</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(--slen&gt;=<span class="number">0</span>) a[len]=i*s[slen]-<span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt(<span class="keyword">const</span> BigInt&amp; A):len(A.len)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i) a[i]=A.a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInt&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        BigInt R;</span><br><span class="line">        R.len=max(len,A.len);</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=R.len;++i)&#123;</span><br><span class="line">            res+=a[i]+A.a[i];</span><br><span class="line">            R.a[i]=res%B;res/=B;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res) R.a[R.len++]=res%B;</span><br><span class="line">        <span class="keyword">while</span>(R.len&gt;<span class="number">1</span>&amp;&amp;R.a[R.len-<span class="number">1</span>]==<span class="number">0</span>) --R.len;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt <span class="keyword">operator</span>*(<span class="keyword">const</span> BigInt&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        BigInt R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j!=A.len;++j)&#123;</span><br><span class="line">                res+=a[i]*A.a[j]+R.a[i+j];</span><br><span class="line">                R.a[i+j]=res%B;res/=B;</span><br><span class="line">            &#125;</span><br><span class="line">            R.a[i+A.len]+=res;</span><br><span class="line">        &#125;</span><br><span class="line">        R.len = len + A.len;</span><br><span class="line">        <span class="keyword">while</span>(R.len&gt;<span class="number">1</span>&amp;&amp;R.a[R.len-<span class="number">1</span>]==<span class="number">0</span>) --R.len;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> BigInt&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;A.len)   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;A.len)   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> tn = len;</span><br><span class="line">        <span class="keyword">while</span>(--tn&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[tn]&lt;A.a[tn])   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[tn]&gt;A.a[tn])   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isOdd</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]&amp;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">BigInt <span class="title">gethalf</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        BigInt R = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">bool</span> tmp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R.len-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp)     R.a[i]+=B;</span><br><span class="line">            <span class="keyword">if</span>(R.a[i]&amp;<span class="number">1</span>)  tmp=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span>    tmp = <span class="literal">false</span>;</span><br><span class="line">            R.a[i]&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(R.a[R.len-<span class="number">1</span>] == <span class="number">0</span>)   --R.len;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[len-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">char</span> ss[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(ss,<span class="string">"%%0%dd"</span>,BB);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">2</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(ss,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="24_5Cmathbb_7BZ_7D_p_24__u4E8C_u6B21_u62D3_u57DF"><a href="#24_5Cmathbb_7BZ_7D_p_24__u4E8C_u6B21_u62D3_u57DF" class="headerlink" title="$\mathbb{Z}_p$ 二次拓域"></a>$\mathbb{Z}_p$ 二次拓域</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LL p,q;</span><br><span class="line"><span class="keyword">class</span> Zpq&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LL a,b; <span class="comment">// a+b sqrt q,0 &lt;= a,b</span></span><br><span class="line">    Zpq()&#123;a=b=<span class="number">0</span>;&#125;</span><br><span class="line">    Zpq(LL _a,LL _b):a(_a%p),b(_b%p)&#123;&#125;</span><br><span class="line">    Zpq <span class="keyword">operator</span>+(<span class="keyword">const</span> Zpq&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Zpq(a+A.a,b+A.b);</span><br><span class="line">    &#125;</span><br><span class="line">    Zpq <span class="keyword">operator</span>*(<span class="keyword">const</span> Zpq&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Zpq(a*A.a+b*A.b%p*q,a*A.b+b*A.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Zpq <span class="title">pow</span><span class="params">(Zpq A,LL n)</span></span>&#123;</span><br><span class="line">    <span class="function">Zpq <span class="title">R</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) R=R*A;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  A=A*A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u77E9_u9635_u7C7B_uFF08_u7248_u672C1_uFF09"><a href="#u77E9_u9635_u7C7B_uFF08_u7248_u672C1_uFF09" class="headerlink" title="矩阵类（版本1）"></a>矩阵类（版本1）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">LL mod;</span><br><span class="line"><span class="keyword">class</span> Matrix&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">3</span>;</span><br><span class="line">    LL a[N][N];</span><br><span class="line">    Matrix()&#123;</span><br><span class="line">        all(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix(<span class="keyword">int</span> x)&#123; <span class="comment">// xIn</span></span><br><span class="line">        all(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            a[i][i]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">all</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)&#123;</span><br><span class="line">                a[i][j]=x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>+(<span class="keyword">const</span> Matrix&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        Matrix R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)&#123;</span><br><span class="line">                R.a[i][j]=a[i][j]+A.a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(R.a[i][j]&gt;=mod)   R.a[i][j]-=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        Matrix R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;++k)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)&#123;</span><br><span class="line">                    R.a[i][j] = (R.a[i][j]+a[i][k]*A.a[k][j])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix A,LL n)</span></span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">R</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) R=R*A;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  A=A*A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u77E9_u9635_u7C7B_uFF08_u7248_u672C2_uFF09"><a href="#u77E9_u9635_u7C7B_uFF08_u7248_u672C2_uFF09" class="headerlink" title="矩阵类（版本2）"></a>矩阵类（版本2）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">LL mod;</span><br><span class="line"><span class="keyword">class</span> Matrix&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">102</span>;</span><br><span class="line">    LL a[N][N];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Matrix()&#123;&#125;</span><br><span class="line">    Matrix(<span class="keyword">int</span> _n,<span class="keyword">int</span> x=<span class="number">0</span>):n(_n)&#123; <span class="comment">// xIn</span></span><br><span class="line">        all(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            a[i][i]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">all</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                a[i][j]=x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>+(<span class="keyword">const</span> Matrix&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">R</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                R.a[i][j]=a[i][j]+A.a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(R.a[i][j]&gt;=mod)   R.a[i][j]-=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">R</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;++k)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                    R.a[i][j] = (R.a[i][j]+a[i][k]*A.a[k][j])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix A,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">R</span><span class="params">(A.n,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) R=R*A;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  A=A*A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u6570_u636E_u7ED3_u6784"><a href="#u6570_u636E_u7ED3_u6784" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="u5E76_u67E5_u96C6"><a href="#u5E76_u67E5_u96C6" class="headerlink" title="并查集"></a>并查集</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = x;</span><br><span class="line">    <span class="keyword">while</span>(ans!=p[ans])  ans=p[ans];</span><br><span class="line">    <span class="keyword">while</span>(x!=ans)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = p[x];</span><br><span class="line">        p[x] = ans;</span><br><span class="line">        x = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6811_u72B6_u6570_u7EC4"><a href="#u6811_u72B6_u6570_u7EC4" class="headerlink" title="树状数组"></a>树状数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeArray&#123;</span><br><span class="line">    LL s[N];</span><br><span class="line">    <span class="keyword">int</span> Size;</span><br><span class="line">    TreeArray()&#123;&#125;</span><br><span class="line">    TreeArray(<span class="keyword">int</span> _S):Size(_S)&#123;clr(s,<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n&amp;(-n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(id&lt;=Size)&#123;</span><br><span class="line">            s[id]+=p;</span><br><span class="line">            id+=lowbit(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        LL r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(id)&#123;</span><br><span class="line">            r+=s[id];</span><br><span class="line">            id-=lowbit(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>若设原始数组为 $a$，设数字 $i$ 的二进制表示为 $d_1 \cdots d_n0\dots 0,d_n = 1$ 本质上树状数组 $s[i]$ 保存的其实是前 $n-1$ 位和 $i$ 一致，且不超过 $i$ 的位置元素之和。 </p>
<h5 id="u7EBF_u6BB5_u6811"><a href="#u7EBF_u6BB5_u6811" class="headerlink" title="线段树"></a>线段树</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lrt rt&lt;&lt;<span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rrt rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lson l,m,lrt</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rson m+<span class="number">1</span>,r,rrt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">LL sum[N*<span class="number">3</span>],col[N*<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    sum[rt]=sum[lrt]+sum[rrt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(col[rt])&#123;</span><br><span class="line">        col[lrt]+=col[rt];</span><br><span class="line">        col[rrt]+=col[rt];</span><br><span class="line">        sum[lrt]+=(m-(m&gt;&gt;<span class="number">1</span>))*col[rt];</span><br><span class="line">        sum[rrt]+=(m&gt;&gt;<span class="number">1</span>)*col[rt];</span><br><span class="line">        col[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;sum[rt]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    col[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line">        sum[rt]+=p*(r-l+<span class="number">1</span>);</span><br><span class="line">        col[rt]+=p;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(rt,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=m)      update(L,R,p,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m)       update(L,R,p,rson);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)  <span class="keyword">return</span> sum[rt];</span><br><span class="line">    PushDown(rt,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=m)    ans+=query(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m)     ans+=query(L,R,rson);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="RMQ__u6C42_u533A_u95F4_u6700_u5927_u503C"><a href="#RMQ__u6C42_u533A_u95F4_u6700_u5927_u503C" class="headerlink" title="RMQ 求区间最大值"></a>RMQ 求区间最大值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> RMQ&#123;    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;<span class="keyword">public</span>:    <span class="keyword">int</span> n;    <span class="keyword">int</span> a[N][<span class="number">20</span>]; <span class="comment">//a[i][j]=max(s[i]---s[i+2^j-1])</span>    RMQ(<span class="keyword">int</span>* s,<span class="keyword">int</span> _n):n(_n)&#123;        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=n;++i)   a[i][<span class="number">0</span>]=s[i];        <span class="keyword">int</span> len=(<span class="keyword">int</span>)(<span class="built_in">log</span>(<span class="keyword">double</span>(n))/<span class="built_in">log</span>(<span class="number">2.0</span>))+<span class="number">2</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=len;++i)&#123;            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n-(<span class="number">1</span>&lt;&lt;i);++j)&#123;                a[j][i]=max(a[j][i-<span class="number">1</span>],a[j+(<span class="number">1</span>&lt;&lt;(i-<span class="number">1</span>))][i-<span class="number">1</span>]);            &#125;        &#125;    &#125;    <span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">// 0 &lt;= l &lt;= r &lt; n</span>        <span class="keyword">int</span> len=(<span class="keyword">int</span>)(<span class="built_in">log</span>(<span class="keyword">double</span>(r-l+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2.0</span>));        <span class="keyword">return</span> max(a[l][len],a[r-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]);    &#125;&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="u6700_u957F_uFF08_u4E25_u683C_uFF09_u9012_u589E_u5B50_u5E8F_u5217"><a href="#u6700_u957F_uFF08_u4E25_u683C_uFF09_u9012_u589E_u5B50_u5E8F_u5217" class="headerlink" title="最长（严格）递增子序列"></a><a href="http://dna049.com/2016/05/08/nondecrase-subsequence/">最长（严格）递增子序列</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// longest increasing subsquence</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    b[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[k]) b[++k]=a[i];</span><br><span class="line">        <span class="keyword">else</span>    b[lower_bound(b,b+k,a[i])-b]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lower_bound(first,end,val) 表示在单增 [frist,end) 中首次大于等于 val 的位置</span></span><br><span class="line"><span class="comment">// upper_bound(first,end,val) 表示在单增 [frist,end) 中首次大于 val 的位置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们经常用二分答案的思想，但是其实二分答案是仅仅知道其单调的情况下的策略，实际上，对于具体的问题，我们完全可以对 $m$ 的值进行不同的处理，而非单纯的 $m=(l+r)&gt;&gt;1$。</p>
</blockquote>
<h4 id="u6700_u5927_u5B50_u5E8F_u5217_u548C"><a href="#u6700_u5927_u5B50_u5E8F_u5217_u548C" class="headerlink" title="最大子序列和"></a>最大子序列和</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MSCS</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// maximal sum of continue subsquence,mind overflow</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r=a[<span class="number">0</span>],s=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=n;++i)&#123;</span><br><span class="line">        s = max(s,<span class="number">0</span>);</span><br><span class="line">        s += a[i];</span><br><span class="line">        r = max(r,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6700_u591A_u533A_u95F4_u4EA4"><a href="#u6700_u591A_u533A_u95F4_u4EA4" class="headerlink" title="最多区间交"></a>最多区间交</h4><p>做法：左端点标记 1, 右端点标记 －1，然后排序，前缀和最大值即为所求。注意在端点相同时，左端点要在前。</p>
<h4 id="u80CC_u5305"><a href="#u80CC_u5305" class="headerlink" title="背包"></a>背包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> r[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pack</span><span class="params">(<span class="keyword">int</span> cash,<span class="keyword">int</span> num,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>||w==<span class="number">0</span>||v==<span class="number">0</span>)  <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>)&#123; <span class="comment">//  0-1背包</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cash;i&gt;=v;--i)</span><br><span class="line">            r[i]=max(r[i],r[i-v]+w);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num*v&gt;=cash-v+<span class="number">1</span>)&#123; <span class="comment">//完全背包</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=v;i&lt;=cash;++i)</span><br><span class="line">            r[i]=max(r[i],r[i-v]+w);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q[MAX],s[MAX],head,tail;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v;++j)&#123;   <span class="comment">//多重背包</span></span><br><span class="line">        q[<span class="number">0</span>]=r[j];s[<span class="number">0</span>]=head=tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,k=j+v;k&lt;=cash;++i,k+=v)&#123;</span><br><span class="line">            q[i]=r[k]-i*w;</span><br><span class="line">            <span class="keyword">while</span>(s[head]&lt;i-num)    ++head;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;=tail&amp;&amp;q[tail]&lt;q[i]) --tail;</span><br><span class="line">            s[++tail]=i;</span><br><span class="line">            q[tail]=q[i];</span><br><span class="line">            r[k]=q[head]+i*w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u7B26_u4E32_u5339_u914D_u7684Sunday_u7B97_u6CD5"><a href="#u5B57_u7B26_u4E32_u5339_u914D_u7684Sunday_u7B97_u6CD5" class="headerlink" title="字符串匹配的Sunday算法"></a>字符串匹配的Sunday算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ASSIZE=<span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> tp[ASSIZE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTp</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sLen=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=ASSIZE;++i)&#123;</span><br><span class="line">        tp[i]=sLen+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">char</span> *p=s;*p;++p)&#123;</span><br><span class="line">        tp[*p]=sLen-(p-s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sunday</span><span class="params">(<span class="keyword">char</span> *ps,<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    getTp(s);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *t,*p,*tx=ps;</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(ps);</span><br><span class="line">    <span class="keyword">int</span> sLen=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(tx+sLen&lt;=ps+pLen)&#123;</span><br><span class="line">        <span class="keyword">for</span>(t=tx,p=s;*p;++p,++t)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*p!=*t)  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(*p==<span class="string">'\0'</span>)    <span class="keyword">return</span> tx-ps;</span><br><span class="line">        tx+=tp[tx[sLen]];       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u7B26_u4E32_u5339_u914D_u7684KMP_u7B97_u6CD5"><a href="#u5B57_u7B26_u4E32_u5339_u914D_u7684KMP_u7B97_u6CD5" class="headerlink" title="字符串匹配的KMP算法"></a>字符串匹配的KMP算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> *next)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>,k=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sLen=<span class="built_in">strlen</span>(s)-<span class="number">1</span>;</span><br><span class="line">    next[<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;sLen)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==-<span class="number">1</span>||s[j]==s[k])&#123;</span><br><span class="line">            next[++j]=++k;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            k=next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *p,<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="keyword">int</span> sLen=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> *next=<span class="keyword">new</span> <span class="keyword">int</span>[sLen];</span><br><span class="line">    getNext(s,next);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pLen&amp;&amp;j&lt;sLen)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==-<span class="number">1</span>||p[i]==s[j])&#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j=next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] next;</span><br><span class="line">    <span class="keyword">if</span>(j==sLen) <span class="keyword">return</span> i-j;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6574_u6570_u5B57_u5178_u6811_Trie"><a href="#u6574_u6570_u5B57_u5178_u6811_Trie" class="headerlink" title="整数字典树 Trie"></a>整数字典树 Trie</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Trie&#123;</span><br><span class="line">    Trie *nt[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    Trie() &#123; nt[<span class="number">0</span>] = nt[<span class="number">1</span>] = <span class="literal">NULL</span>; cnt = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxb = <span class="number">31</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Trie* root, <span class="keyword">int</span> x, <span class="keyword">int</span> add = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    root-&gt;cnt += add;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Maxb-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;nt[(x&gt;&gt;i)&amp;<span class="number">1</span>]==<span class="literal">NULL</span>)  root-&gt;nt[(x&gt;&gt;i)&amp;<span class="number">1</span>] = <span class="keyword">new</span> Trie();</span><br><span class="line">        root = root-&gt;nt[(x&gt;&gt;i)&amp;<span class="number">1</span>];</span><br><span class="line">        root-&gt;cnt += add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(Trie* root,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// 与 x 异或后不小于 k 的个数</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Maxb-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        Trie* t = root-&gt;nt[((x&gt;&gt;i)^<span class="number">1</span>)&amp;<span class="number">1</span>];</span><br><span class="line">        root = root-&gt;nt[((k^x)&gt;&gt;i)&amp;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(!((k&gt;&gt;i)&amp;<span class="number">1</span>) &amp;&amp; t != <span class="literal">NULL</span>)   ans += t-&gt;cnt;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>)    ans += root-&gt;cnt;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Trie *root)</span></span>&#123; <span class="comment">// 多case时需要清理内存</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;nt[<span class="number">0</span>] != <span class="literal">NULL</span>) clear(root-&gt;nt[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;nt[<span class="number">1</span>] != <span class="literal">NULL</span>) clear(root-&gt;nt[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6570_u7EC4_u578B_u5B57_u5178_u6811"><a href="#u6570_u7EC4_u578B_u5B57_u5178_u6811" class="headerlink" title="数组型字典树"></a>数组型字典树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxb = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> trie[N*Maxb][<span class="number">2</span>],sum[N*Maxb],tt; <span class="comment">// tt need init</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Maxb,t=<span class="number">0</span>; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;tmp = trie[t][x&gt;&gt;i &amp;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(!tmp)   tmp = ++tt;</span><br><span class="line">        t = tmp;</span><br><span class="line">        sum[t]+=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// if exist y such that y^x &gt;= k</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Maxb,t=<span class="number">0</span>,tmp; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">        tmp = trie[t][!(x&gt;&gt;i &amp;<span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">if</span>(k&gt;&gt;i &amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!sum[tmp])    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum[tmp])    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            tmp = trie[t][x&gt;&gt;i &amp;<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(!sum[tmp])  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u6BCD_u5B57_u5178_u6811_Trie"><a href="#u5B57_u6BCD_u5B57_u5178_u6811_Trie" class="headerlink" title="字母字典树 Trie"></a>字母字典树 Trie</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Trie&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX=<span class="number">26</span>;</span><br><span class="line">    <span class="keyword">bool</span> isStr;</span><br><span class="line">    Trie *next[MAX];</span><br><span class="line">    Trie()&#123;</span><br><span class="line">        isStr=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=MAX;++i) next[i]=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Trie *root,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>||*s==<span class="string">'\0'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span>(*s!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;next[*s-<span class="string">'a'</span>]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            root-&gt;next[*s-<span class="string">'a'</span>]=<span class="keyword">new</span> Trie;</span><br><span class="line">        &#125;</span><br><span class="line">        root=root-&gt;next[*s-<span class="string">'a'</span>];</span><br><span class="line">        ++s;</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;isStr=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(Trie *root,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root!=<span class="literal">NULL</span>&amp;&amp;*s!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        root=root-&gt;next[*s-<span class="string">'a'</span>];</span><br><span class="line">        ++s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (root!=<span class="literal">NULL</span>&amp;&amp;root-&gt;isStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Trie *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=Trie::MAX;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;next[i]!=<span class="literal">NULL</span>)	 clear(root-&gt;next[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5355_u8C03_u961F_u5217_u548C_u5355_u8C03_u6808"><a href="#u5355_u8C03_u961F_u5217_u548C_u5355_u8C03_u6808" class="headerlink" title="单调队列和单调栈"></a>单调队列和单调栈</h4><p>单调队列，单调栈顾名思义就是内部元素是单调的，区别就是队列是先进先出，栈是后进先出。</p>
<ol>
<li>单调队列的典型应用就是 $O(n)$复杂度求给定宽度的区间在各处的最大值。</li>
<li>单调栈的典型应用是 $O(n)$ 复杂度求出以每一点为最小值的最大区间。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> L[N],R[N],stk[N]; <span class="comment">//L[i]: min x&lt;i s.t. h[x]&gt;h[i]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">monoStack</span><span class="params">(<span class="keyword">int</span> h[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; h[stk[top-<span class="number">1</span>]] &gt;= h[j]) --top;</span><br><span class="line">        L[j] = (top == <span class="number">0</span>?-<span class="number">1</span>:stk[top-<span class="number">1</span>]);</span><br><span class="line">        stk[top++] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = n-<span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; h[stk[top-<span class="number">1</span>]] &gt;= h[j]) --top;</span><br><span class="line">        R[j] = top == <span class="number">0</span>?n:stk[top-<span class="number">1</span>];</span><br><span class="line">        stk[top++] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>详见<a href="http://dna049.com/2016/04/10/POJ2559-monostack/">我的博文</a>。</p>
</blockquote>
<h4 id="u4F18_u5148_u961F_u5217"><a href="#u4F18_u5148_u961F_u5217" class="headerlink" title="优先队列"></a>优先队列</h4><p>可以使用<a href="http://www.cplusplus.com/reference/" target="_blank" rel="external">C++ STL</a> 的 priority_queue，查找可用 lower_bound 和 upper_bound。C++ STL 中优先队列是用堆来实现的。用途十分广泛，例如加速最小生成树，拓扑排序，等等。</p>
<p>堆的实现一般是用数组。我们可以用 1 作为树的根，对每一个节点 $x$ ，它的两个节点分别就是 $2x$ 和 $2x+1$ 平时都用 $x&lt;&lt;1,x&lt;&lt;1|1$ 表示。 堆只支持三个操作，</p>
<ol>
<li>插入一个节点(我们实现时是插入最尾部，这样保证了是一个完全二叉树) $O(\log n)$</li>
<li>删除最大键值节点（删除根元素的值）$O(\log n)$</li>
<li>输出最大键值节点（查看根元素的值）$O(1)$</li>
</ol>
<p>堆维持了一个性质使其能如此高效：父节点的值不小于儿子节点的值。那么显然根节点的键值最大。<br>那么我们在尾部插入一个节点，如果它大于其父节点，那么跟父节点互换。因为树的高度为 $O(\log n)$, 因此插入操作复杂度也就 $O(\log n)$, 删除最大节点就是先让其和最尾部的节点互换，然后删除最尾部节点，然后从头到尾的与键值大的子节点互换，直到维护了堆的性质，最后查看最大键值节点就是看根节点，显然是 $O(1)$ 的。<br>它牺牲了许多操作，带来了高效率。</p>
<blockquote>
<p>RMQ，单调队列，单调栈，树状数组，堆，线段树，红黑树 是我掌握的也很喜欢的几个数据结构了。</p>
</blockquote>
<h4 id="u62D3_u6251_u6392_u5E8F_u53CD_u5B57_u5178_u5E8F_u8F93_u51FA"><a href="#u62D3_u6251_u6392_u5E8F_u53CD_u5B57_u5178_u5E8F_u8F93_u51FA" class="headerlink" title="拓扑排序反字典序输出"></a>拓扑排序反字典序输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> head[N],sc,d[N],ans[N];</span><br><span class="line"><span class="keyword">bool</span> v[N];</span><br><span class="line"><span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> ed;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    e[sc].ed=y;</span><br><span class="line">    e[sc].next=head[x];</span><br><span class="line">    head[x]=sc++;</span><br><span class="line">    ++d[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    sc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        head[i]=-<span class="number">1</span>;</span><br><span class="line">        d[i]=<span class="number">0</span>;</span><br><span class="line">        v[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topoSort</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// after read data</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="number">0</span>)   q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(v[u])    <span class="keyword">continue</span>;</span><br><span class="line">        v[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=-<span class="number">1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(--d[e[i].ed] == <span class="number">0</span>)   q.push(e[i].ed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u7EA2_u9ED1_u6811_red-black_tree"><a href="#u7EA2_u9ED1_u6811_red-black_tree" class="headerlink" title="红黑树 red-black tree"></a>红黑树 red-black tree</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> RBT&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> elemType;</span><br><span class="line">    <span class="keyword">struct</span> Node&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">bool</span> RED = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">bool</span> BLACK = <span class="number">1</span>;</span><br><span class="line">        Node *ch[<span class="number">2</span>], *fa;<span class="comment">// x-&gt;fa-&gt;ch[x-&gt;rs] = x</span></span><br><span class="line">        <span class="keyword">int</span> sz;</span><br><span class="line">        elemType key;</span><br><span class="line">        <span class="keyword">bool</span> color, rs; <span class="comment">// is rightson</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Node *root; <span class="comment">// root has no father</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">faSon</span><span class="params">(Node* x, Node* y, <span class="keyword">bool</span> rs)</span></span>&#123;</span><br><span class="line">        y-&gt;fa = x;</span><br><span class="line">        y-&gt;rs = rs;</span><br><span class="line">        x-&gt;ch[rs] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">newNode</span><span class="params">(Node* x, elemType val, <span class="keyword">bool</span> rs)</span></span>&#123; <span class="comment">// x-&gt;ch[rs]=null</span></span><br><span class="line">        Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;ch[<span class="number">0</span>] = p-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">        p-&gt;sz = <span class="number">1</span>; p-&gt;key = val; p-&gt;color = Node::RED;</span><br><span class="line">        faSon(x, p, rs);</span><br><span class="line">        ++x-&gt;sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* x, <span class="keyword">bool</span> rs)</span></span>&#123; <span class="comment">// x must not null</span></span><br><span class="line">        Node *y = x-&gt;ch[!rs];</span><br><span class="line">        <span class="keyword">if</span>(y == null)   <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == root)   root = y;</span><br><span class="line">        <span class="keyword">else</span>    faSon(x-&gt;fa, y, x-&gt;rs);</span><br><span class="line">        faSon(x, y-&gt;ch[rs], !rs);</span><br><span class="line">        faSon(y, x, rs);</span><br><span class="line">        y-&gt;sz = x-&gt;sz;</span><br><span class="line">        x-&gt;sz = x-&gt;ch[<span class="number">0</span>]-&gt;sz + x-&gt;ch[<span class="number">1</span>]-&gt;sz + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insMaintain</span><span class="params">(Node* x)</span></span>&#123; <span class="comment">// x-&gt;color is RED</span></span><br><span class="line">        <span class="keyword">if</span>(x == root || x-&gt;fa-&gt;color == Node::BLACK)	<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;fa-&gt;fa-&gt;ch[!x-&gt;fa-&gt;rs]-&gt;color == Node::BLACK)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x-&gt;rs ^ x-&gt;fa-&gt;rs)	rotate(x-&gt;fa, x-&gt;fa-&gt;rs);</span><br><span class="line">            <span class="keyword">else</span>    x = x-&gt;fa;</span><br><span class="line">            x-&gt;color = Node::BLACK;</span><br><span class="line">            x-&gt;fa-&gt;color = Node::RED;</span><br><span class="line">            rotate(x-&gt;fa, !x-&gt;rs);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            x = x-&gt;fa-&gt;fa;</span><br><span class="line">            x-&gt;color = Node::RED;</span><br><span class="line">            x-&gt;ch[<span class="number">0</span>]-&gt;color = x-&gt;ch[<span class="number">1</span>]-&gt;color = Node::BLACK;</span><br><span class="line">            insMaintain(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delCase1</span><span class="params">(Node* x, Node* y)</span></span>&#123;</span><br><span class="line">        y-&gt;color = Node::BLACK;</span><br><span class="line">        y-&gt;fa-&gt;color = Node::RED;</span><br><span class="line">        y = y-&gt;ch[!y-&gt;rs];</span><br><span class="line">        rotate(x-&gt;fa, x-&gt;rs);</span><br><span class="line">        delCase2(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delCase2</span><span class="params">(Node *x, Node *y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(y-&gt;ch[y-&gt;rs]-&gt;color == Node::BLACK)&#123;</span><br><span class="line">            <span class="keyword">if</span>(y-&gt;ch[!y-&gt;rs]-&gt;color == Node::BLACK)&#123;</span><br><span class="line">                y-&gt;color=Node::RED;</span><br><span class="line">                delMaintain(y-&gt;fa);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                y-&gt;color = Node::RED;</span><br><span class="line">                y-&gt;ch[!y-&gt;rs]-&gt;color = Node::BLACK;</span><br><span class="line">                rotate(y, y-&gt;rs);</span><br><span class="line">                delCase3(y-&gt;fa);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>   delCase3(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delCase3</span><span class="params">(Node *y)</span></span>&#123;</span><br><span class="line">        y-&gt;color = y-&gt;fa-&gt;color;</span><br><span class="line">        y-&gt;ch[y-&gt;rs]-&gt;color = y-&gt;fa-&gt;color = Node::BLACK;</span><br><span class="line">        rotate(y-&gt;fa,!y-&gt;rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delMaintain</span><span class="params">(Node* x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == root || x == null)  <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;color == Node::RED)&#123;</span><br><span class="line">            x-&gt;color = Node::BLACK; <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node *y = x-&gt;fa-&gt;ch[!x-&gt;rs];</span><br><span class="line">        <span class="keyword">if</span>(y-&gt;color == Node::RED) delCase1(x, y);</span><br><span class="line">        <span class="keyword">else</span>    delCase2(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">pred</span><span class="params">(Node* x, elemType val)</span></span>&#123; <span class="comment">// max elem &lt;= val</span></span><br><span class="line">        <span class="keyword">if</span>(x == null)    <span class="keyword">return</span> null;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;key &gt; val)    <span class="keyword">return</span> pred(x-&gt;ch[<span class="number">0</span>], val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x-&gt;ch[<span class="number">1</span>] == null)   <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> pred(x-&gt;ch[<span class="number">1</span>], val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">succ</span><span class="params">(Node* x, elemType val)</span></span>&#123; <span class="comment">// min elem &gt;= val</span></span><br><span class="line">        <span class="keyword">if</span>(x == null)    <span class="keyword">return</span> null;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;key &lt; val)    <span class="keyword">return</span> succ(x-&gt;ch[<span class="number">1</span>], val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x-&gt;ch[<span class="number">0</span>] == null)   <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> succ(x-&gt;ch[<span class="number">0</span>], val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node* x, elemType val)</span></span>&#123; <span class="comment">// count elem &lt;= val</span></span><br><span class="line">        <span class="keyword">if</span>(x == null)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;key &gt; val)    <span class="keyword">return</span> rank(x-&gt;ch[<span class="number">0</span>], val);</span><br><span class="line">        <span class="keyword">return</span> x-&gt;ch[<span class="number">0</span>]-&gt;sz + <span class="number">1</span> + rank(x-&gt;ch[<span class="number">1</span>], val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">select</span><span class="params">(Node* x, <span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// k-th smallest elem</span></span><br><span class="line">        <span class="keyword">if</span>(x == null || x-&gt;sz &lt; k)   <span class="keyword">return</span> null;</span><br><span class="line">        <span class="keyword">int</span> sz = x-&gt;ch[<span class="number">0</span>]-&gt;sz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(sz == k) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(sz &lt; k)  <span class="keyword">return</span> select(x-&gt;ch[<span class="number">1</span>], k-sz);</span><br><span class="line">        <span class="keyword">return</span> select(x-&gt;ch[<span class="number">0</span>], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node* x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;ch[<span class="number">0</span>] != null)    clear(x-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;ch[<span class="number">1</span>] != null)    clear(x-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(x != null)   <span class="keyword">delete</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node* x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"key = %d, sz = %d "</span>, x-&gt;key, x-&gt;sz);</span><br><span class="line">        <span class="built_in">puts</span>(x-&gt;color == Node::RED?<span class="string">"RED"</span>:<span class="string">"BLACK"</span>);</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;ch[<span class="number">0</span>] != null)	print(x-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;ch[<span class="number">1</span>] != null)	print(x-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    Node *null;</span><br><span class="line">    RBT()&#123;</span><br><span class="line">        null = <span class="keyword">new</span> Node; <span class="comment">// no key, rs, father</span></span><br><span class="line">        null-&gt;ch[<span class="number">0</span>] = null-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">        null-&gt;sz = <span class="number">0</span>; null-&gt;color = Node::BLACK;</span><br><span class="line">        root = null; null-&gt;key = INF; <span class="comment">// for convenient</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">search</span><span class="params">(elemType val)</span></span>&#123;</span><br><span class="line">        Node *x = root;</span><br><span class="line">        <span class="keyword">while</span>(x != null)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val == x-&gt;key)	<span class="keyword">return</span> x;</span><br><span class="line">            x = x-&gt;ch[val &gt;= x-&gt;key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(elemType val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == null)&#123;</span><br><span class="line">            root = <span class="keyword">new</span> Node; <span class="comment">// no father, rs</span></span><br><span class="line">            root-&gt;ch[<span class="number">0</span>] = root-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">            root-&gt;sz = <span class="number">1</span>; root-&gt;color = Node::BLACK;</span><br><span class="line">            root-&gt;key = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node *x = root;</span><br><span class="line">        <span class="keyword">while</span>(x-&gt;ch[val &gt;= x-&gt;key] != null)&#123;</span><br><span class="line">            ++x-&gt;sz;</span><br><span class="line">            x = x-&gt;ch[val &gt;= x-&gt;key];</span><br><span class="line">        &#125;</span><br><span class="line">        newNode(x, val, val &gt;= x-&gt;key);</span><br><span class="line">        insMaintain(x-&gt;ch[val &gt;= x-&gt;key]);</span><br><span class="line">        root-&gt;color = Node::BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(elemType val)</span></span>&#123;</span><br><span class="line">        Node *x = search(val), *y;</span><br><span class="line">        <span class="keyword">if</span>(x == null)   <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(x-&gt;ch[<span class="number">0</span>] != null || x-&gt;ch[<span class="number">1</span>] != null)&#123;</span><br><span class="line">            <span class="keyword">bool</span> rs = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(x-&gt;ch[rs] == null)   rs = !rs;</span><br><span class="line">            y = x-&gt;ch[rs];</span><br><span class="line">            <span class="keyword">while</span>(y-&gt;ch[!rs] != null)   y = y-&gt;ch[!rs];</span><br><span class="line">            swap(x-&gt;key, y-&gt;key);</span><br><span class="line">            x = y;</span><br><span class="line">            <span class="keyword">if</span>(x-&gt;color == Node::RED)   <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        delMaintain(x);</span><br><span class="line">        root-&gt;color = Node::BLACK;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">while</span>(y != root)&#123;</span><br><span class="line">            y = y-&gt;fa;</span><br><span class="line">            --y-&gt;sz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == root)   root = null;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x-&gt;ch[<span class="number">0</span>] != null)    faSon(x-&gt;fa, x-&gt;ch[<span class="number">0</span>], x-&gt;rs);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x-&gt;ch[<span class="number">1</span>] != null)   faSon(x-&gt;fa, x-&gt;ch[<span class="number">1</span>], x-&gt;rs);</span><br><span class="line">        <span class="keyword">else</span> x-&gt;fa-&gt;ch[x-&gt;rs] = null;</span><br><span class="line">        <span class="keyword">delete</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">elemType <span class="title">pred</span><span class="params">(elemType val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pred(root, val)-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">elemType <span class="title">succ</span><span class="params">(elemType val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> succ(root, val)-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(elemType val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rank(root, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">elemType <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> select(root, k)-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clear(root);</span><br><span class="line">        root = null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root-&gt;sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != null)    print(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// for particular use</span></span><br><span class="line">        <span class="keyword">return</span> select(root, rank(root, a) + k)-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="u56FE_u8BBA"><a href="#u56FE_u8BBA" class="headerlink" title="图论"></a>图论</h2><h4 id="dfs__u5E8F"><a href="#dfs__u5E8F" class="headerlink" title="dfs 序"></a>dfs 序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ncnt = <span class="number">0</span>; <span class="comment">// init every case</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123; <span class="comment">// dfs order</span></span><br><span class="line">    L[x] = ++ncnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; i!=-<span class="number">1</span>; i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].ed != fa)   dfs(e[i].ed, x);</span><br><span class="line">    &#125;</span><br><span class="line">    R[x] = ncnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6700_u5927_u6D41"><a href="#u6700_u5927_u6D41" class="headerlink" title="最大流"></a>最大流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> t,w,next;</span><br><span class="line">&#125;a[N*N];</span><br><span class="line"><span class="keyword">int</span> n,ss,head[N],p[N],flow[N],c[N],h[N],numh[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    a[ss].t=y;</span><br><span class="line">    a[ss].w=w;</span><br><span class="line">    a[ss].next=head[x];</span><br><span class="line">    head[x]=ss++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow,ans=<span class="number">0</span>,neck,k;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">memset</span>(numh,<span class="number">0</span>,<span class="keyword">sizeof</span>(numh));</span><br><span class="line">    <span class="built_in">memset</span>(p,-<span class="number">1</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   c[i]=head[i];</span><br><span class="line">    numh[<span class="number">0</span>]=n;</span><br><span class="line">    <span class="keyword">int</span> u=s;</span><br><span class="line">    <span class="keyword">while</span>(h[s]&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==t)&#123;</span><br><span class="line">            flow=<span class="number">1e9</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i!=t;i=a[c[i]].t)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flow&gt;a[c[i]].w)&#123;</span><br><span class="line">                    neck=i;flow=a[c[i]].w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i!=t;i=a[c[i]].t)&#123;</span><br><span class="line">                a[c[i]].w-=flow;</span><br><span class="line">                a[c[i]^<span class="number">1</span>].w+=flow;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=flow;</span><br><span class="line">            u=neck;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(k=c[u];k!=-<span class="number">1</span>;k=a[k].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k].w&amp;&amp;h[u]==h[a[k].t]+<span class="number">1</span>)   <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k!=-<span class="number">1</span>)&#123;</span><br><span class="line">            c[u]=k;</span><br><span class="line">            p[a[k].t]=u;</span><br><span class="line">            u=a[k].t;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==--numh[h[u]]) <span class="keyword">break</span>;</span><br><span class="line">            c[u]=head[u];</span><br><span class="line">            k=n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=-<span class="number">1</span>;i=a[i].next)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i].w)  k=min(k,h[a[i].t]);</span><br><span class="line">            &#125;</span><br><span class="line">            h[u]=k+<span class="number">1</span>;</span><br><span class="line">            ++numh[h[u]];</span><br><span class="line">            <span class="keyword">if</span>(u!=s)    u=p[u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Stoer-Wagner__u6700_u5C0F_u5272"><a href="#Stoer-Wagner__u6700_u5C0F_u5272" class="headerlink" title="Stoer-Wagner 最小割"></a>Stoer-Wagner 最小割</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">102</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],dis[N],<span class="built_in">map</span>[N][N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mincut</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=n;++i)   p[i]=i;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">1</span>,s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=n;++i)&#123;</span><br><span class="line">            dis[p[i]]=<span class="built_in">map</span>[p[<span class="number">0</span>]][p[i]];</span><br><span class="line">            <span class="keyword">if</span>(dis[p[i]]&gt;dis[p[t]]) t=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        vis[p[<span class="number">0</span>]]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ret&gt;dis[p[t]]) ret=dis[p[t]];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j!=n;++j)&#123;</span><br><span class="line">                    <span class="built_in">map</span>[p[j]][p[s]]+=<span class="built_in">map</span>[p[j]][p[t]];</span><br><span class="line">                    <span class="built_in">map</span>[p[s]][p[j]]=<span class="built_in">map</span>[p[j]][p[s]];</span><br><span class="line">                &#125;</span><br><span class="line">                p[t]=p[--n];</span><br><span class="line">            &#125;</span><br><span class="line">            vis[p[t]]=<span class="literal">true</span>;</span><br><span class="line">            s=t;t=-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j!=n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[p[j]])&#123;</span><br><span class="line">                    dis[p[j]]+=<span class="built_in">map</span>[p[j]][p[s]];</span><br><span class="line">                    <span class="keyword">if</span>(t==-<span class="number">1</span>||dis[p[j]]&gt;dis[p[t]])  t=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6700_u77ED_u8DEFSPFA"><a href="#u6700_u77ED_u8DEFSPFA" class="headerlink" title="最短路SPFA"></a>最短路SPFA</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1004</span>;</span><br><span class="line"><span class="keyword">int</span> head[N],rehead[N],dist[N],sc,v[N];</span><br><span class="line"><span class="keyword">struct</span> A&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> g;</span><br><span class="line">    A()&#123;&#125;</span><br><span class="line">    A(<span class="keyword">int</span> x,<span class="keyword">int</span> y):id(x),g(y)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A&amp; a)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> g+dist[id]&gt;a.g+dist[a.id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> ed;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    e[sc].ed=y;</span><br><span class="line">    e[sc].w=z;</span><br><span class="line">    e[sc].next=head[x];</span><br><span class="line">    head[x]=sc++;</span><br><span class="line">    e[sc].ed=x;</span><br><span class="line">    e[sc].w=z;</span><br><span class="line">    e[sc].next=rehead[y];</span><br><span class="line">    rehead[y]=sc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">    dist[s]=<span class="number">0</span>;</span><br><span class="line">    v[s]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=rehead[u];i!=-<span class="number">1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> ed=e[i].ed;</span><br><span class="line">            <span class="keyword">if</span>(dist[ed]&gt;dist[u]+e[i].w)&#123;</span><br><span class="line">                dist[ed]=dist[u]+e[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!v[ed])&#123;</span><br><span class="line">                    v[ed]=<span class="literal">true</span>;</span><br><span class="line">                    q.push(ed);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v[u]=<span class="literal">false</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u51E0_u4F55"><a href="#u51E0_u4F55" class="headerlink" title="几何"></a>几何</h2><h4 id="u4E8C_u7EF4_u51F8_u5305"><a href="#u4E8C_u7EF4_u51F8_u5305" class="headerlink" title="二维凸包"></a>二维凸包</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const int N=501;</span><br><span class="line">int vc[N];</span><br><span class="line">struct Node&#123;</span><br><span class="line">    int x,y,id;</span><br><span class="line">    bool operator!=(const Node&amp; A)const&#123;</span><br><span class="line">        return x!=A.x||y!=A.y;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&lt;(const Node&amp; A)const&#123;</span><br><span class="line">        if(y==A.y)  return x&lt;A.x;</span><br><span class="line">        return y&lt;A.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N],q[N];</span><br><span class="line">bool crossLeft(const Node&amp; op,const Node&amp; sp,const Node&amp; ep)&#123;</span><br><span class="line">    return (sp.x-op.x)*(ep.y-op.y)&gt;(sp.y-op.y)*(ep.x-op.x);</span><br><span class="line">&#125;</span><br><span class="line">int graham(int n)&#123;</span><br><span class="line">    sort(p,p+n);</span><br><span class="line">    if(n==0)    return 0;q[0]=p[0];</span><br><span class="line">    if(n==1)    return 1;q[1]=p[1];</span><br><span class="line">    if(n==2)    return 2;q[2]=p[2];</span><br><span class="line">    int top=1;</span><br><span class="line">    for(int i=2;i!=n;++i)&#123;</span><br><span class="line">        while(top&amp;&amp;crossLeft(q[top],p[i],q[top-1])) --top;</span><br><span class="line">        q[++top]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    int len=top;</span><br><span class="line">    q[++top]=p[n-2];</span><br><span class="line">    for(int i=n-3;i!=-1;--i)&#123;</span><br><span class="line">        while(top!=len&amp;&amp;crossLeft(q[top],p[i],q[top-1]))    --top;</span><br><span class="line">        q[++top]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u51E0_u7C7B_u6839_u53F7_u7B97_u6CD5"><a href="#u51E0_u7C7B_u6839_u53F7_u7B97_u6CD5" class="headerlink" title="几类根号算法"></a>几类根号算法</h2><h4 id="1-_24s_28n_29__3D__5Csum__7Bi_3D1_7D_5E_7Bn_7D__5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor__24"><a href="#1-_24s_28n_29__3D__5Csum__7Bi_3D1_7D_5E_7Bn_7D__5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor__24" class="headerlink" title="1.$s(n) = \sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor $"></a>1.$s(n) = \sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor $</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(LL n)</span></span>&#123; </span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123; </span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        sum += (j-i+<span class="number">1</span>)*(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-_24_5Csum__7Bi_3D1_7D_5En__5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor__5Clfloor__5Cfrac_7Bm_7D_7Bi_7D__5Crfloor_f_28i_29_24"><a href="#2-_24_5Csum__7Bi_3D1_7D_5En__5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor__5Clfloor__5Cfrac_7Bm_7D_7Bi_7D__5Crfloor_f_28i_29_24" class="headerlink" title="2.$\sum_{i=1}^n \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{i} \rfloor f(i)$"></a>2.$\sum_{i=1}^n \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{i} \rfloor f(i)$</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123; <span class="comment">// g[i]=f[i]+g[i-1]</span></span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=min(n,m);i=j+<span class="number">1</span>)&#123;</span><br><span class="line">		j=min(n/(n/i),m/(m/i)</span><br><span class="line">		sum += LL(n/i)*(m/i)*(g[j]-g[i-<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-_24h_28n_29__3D__5Cfrac_7Bn_28n-1_29_28n-2_29_7D_7B3_7D_-__5Csum__7Bi_3D2_7D_5En_h_28_5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor_29_24"><a href="#3-_24h_28n_29__3D__5Cfrac_7Bn_28n-1_29_28n-2_29_7D_7B3_7D_-__5Csum__7Bi_3D2_7D_5En_h_28_5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor_29_24" class="headerlink" title="3.$h(n) = \frac{n(n-1)(n-2)}{3} - \sum_{i=2}^n h(\lfloor \frac{n}{i} \rfloor)$"></a>3.$h(n) = \frac{n(n-1)(n-2)}{3} - \sum_{i=2}^n h(\lfloor \frac{n}{i} \rfloor)$</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it = mp.find(n);</span><br><span class="line">    <span class="keyword">if</span> (it != mp.end())  <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">int</span> r = LL(n)*(n-<span class="number">1</span>)%M*(n-<span class="number">2</span>)%M*inv3%M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        r -= LL(j-i+<span class="number">1</span>)*getans(n/i)%M;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;<span class="number">0</span>) r+=M;</span><br><span class="line">    &#125;</span><br><span class="line">    mp.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(n,r));</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="To_Be_Continue"><a href="#To_Be_Continue" class="headerlink" title="To Be Continue"></a>To Be Continue</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>突然想到在此留下模板貌似是个不错的选择也 0.0 长期更新</p>
<blockquote>
<p>虽说程序需求千变万化，但是一些短小精湛的函数块还是很值得整理收藏的。<br>在此提醒自己：找到一种慢的解法可能是找到最终解法的一步。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Composed by dna049 at <span class="number">2016</span>-<span class="number">4</span>-<span class="number">10</span> in FDU</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一次运动会 + 山地半程马拉松]]></title>
    <link href="http://dna049.com/2017/05/21/maoshanmarathon/"/>
    <id>http://dna049.com/2017/05/21/maoshanmarathon/</id>
    <published>2017-05-21T15:32:20.000Z</published>
    <updated>2017-05-21T16:33:32.000Z</updated>
    <content type="html"><![CDATA[<p>有幸参加我旦旦的第57届运动会, 报了穿梭接力, 引体向上, 5公里. 人生中第一次运动会, 明年再来, 完美. 第一次山地马拉松跟平时马拉松没太大区别, 除了上坡十分变态以外. 风景很迷人, 空气很清新, 太阳… 毕竟521.</p>
<a id="more"></a>
<h3 id="u8FD0_u52A8_u4F1A"><a href="#u8FD0_u52A8_u4F1A" class="headerlink" title="运动会"></a>运动会</h3><p><img src="0.jpg" alt="运动会照片"></p>
<ol>
<li>穿梭接力实力划水拿了团体第一, 比第二名快了1秒多. 同组拉开一人差距, 大数院好强. 发现自己爆发力还不错, 引来学妹欢呼(助教小哥哥这称呼我喜欢, 哈哈哈).<br><img src="1.jpg" alt="奖牌"></li>
<li>引体向上坑了我数院, 主要是我拉了18个就算了我14个, 但是我终于知道我引体向上是直拉, 不是甩拉, 终于在学弟帮助下懂了学会了甩拉的技巧, 一下子水平提高不少.</li>
<li>五公里实力被带崩了, 前面太快了, 后面特别痛苦. 所有5公里目前水平前两公里最快4:20配速才可能跑好. 主要没办法, 氛围到那去了, 被带快很正常.<br><img src="2.jpg" alt="成绩"><br><img src="3.jpg" alt="合照"></li>
</ol>
<blockquote>
<p>总之明年再来, 5公里水平必然大增.<br>感谢丁老师拍照, 丁老师拉了50个引体向上, 我们瑟瑟发抖0.0<br>感谢我旦乐跑协会<br>感谢女票的陪伴, 不孤单</p>
</blockquote>
<h3 id="u8305_u5C71_u5C71_u5730_u534A_u7A0B_u9A6C_u62C9_u677E"><a href="#u8305_u5C71_u5C71_u5730_u534A_u7A0B_u9A6C_u62C9_u677E" class="headerlink" title="茅山山地半程马拉松"></a>茅山山地半程马拉松</h3><p><img src="4.jpg" alt="跑前"><br>常州金坛首届(山地)半程马拉松, 总体优秀, 服务十分好, 志愿者很热情, 由官方cosplayplay, 补给虽然没新意, 但是还是很足的(可能我跑的稍微靠前). 山上景色很美, 路过的水库也很美. 连续两公里上坡, 爬升500米, 也是醉了, 第一次坚持下来没走, 回来的时候只能靠走了.<br><img src="5.jpg" alt="中途"><br>主要前面太快了, 没能把配速控制在5分外, 导致后来十分痛苦.<br><img src="6.jpg" alt="中途"><br>总之还是太年轻, 跑的太少, 慢慢来咯, flag 倒了, 还没上个月跑的快, 主要还是我太怕热了, 实在受不了, 上次一直下雨一路不停. 总之下次再战了, 感觉还是今年还是不要全马了, 半马先跑好. gogogo (要好好珍惜现在来之不易的感情)<br><img src="7.jpg" alt="跑完"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有幸参加我旦旦的第57届运动会, 报了穿梭接力, 引体向上, 5公里. 人生中第一次运动会, 明年再来, 完美. 第一次山地马拉松跟平时马拉松没太大区别, 除了上坡十分变态以外. 风景很迷人, 空气很清新, 太阳… 毕竟521.</p>]]>
    
    </summary>
    
      <category term="marathon" scheme="http://dna049.com/tags/marathon/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Lecture on Modules and Rings》读书笔记]]></title>
    <link href="http://dna049.com/2017/05/06/Note-on-Lecture-of-Modules-and-Rings/"/>
    <id>http://dna049.com/2017/05/06/Note-on-Lecture-of-Modules-and-Rings/</id>
    <published>2017-05-06T02:35:40.000Z</published>
    <updated>2017-05-10T09:40:54.000Z</updated>
    <content type="html"><![CDATA[<p>为了把看过的知识变成自己的东西，在此理一下思路（导师建议写的东西记录一下，不然以后过不了多久又忘了，花了时间就要有收获）</p>
<blockquote>
<p>2017年内长期更新</p>
</blockquote>
<a id="more"></a>
<h2 id="u81EA_u7531_u6A21"><a href="#u81EA_u7531_u6A21" class="headerlink" title="自由模"></a>自由模</h2><p>给定一个环$R$，其上(右)自由模<br>$$F_R = R^{(I)} = \bigoplus_{i \in I} R_i, \quad R_i = R$$<br>有两种等价刻画：</p>
<ol>
<li>$F_R$有一组基 $\lbrace e_i : i \in I \rbrace \subset F$ 使得$F_R$上任意元素都可以唯一的写成 $e_i$ 的 $R$-线性组合</li>
<li>$F_R$有一组基 $\lbrace e_i : i \in I \rbrace \subset F$ 满足“universal property”: 对$M_R$中任意$\lbrace m_i : i \in I \rbrace$，有唯一的$R$模同态 $f: R_R \to M_R$使得 $f(e_i) = m_i ,i \in I$.</li>
</ol>
<blockquote>
<p>$R^I$表示$R$的$I$次积, 当指标集$I$有限时, 积与直和(余积)等价,此时 $R^{(I)}$通常写成 $R^n$</p>
</blockquote>
<h3 id="1-_IBN__28Invariant_Basis_Number_29__u6027_u8D28"><a href="#1-_IBN__28Invariant_Basis_Number_29__u6027_u8D28" class="headerlink" title="1. IBN (Invariant Basis Number) 性质"></a>1. IBN (Invariant Basis Number) 性质</h3><p><strong>Generation Lemma</strong> 表明，对任意模，若 ${e_i : i \in I}$ 是其一族极小生成集，且 $I$是无限集，则$M$不能由基数小于$I$的集合生成。</p>
<p>由<strong>Generation Lemma</strong>可知，若$R^{(I)} = R^{(J)}$, 且 $I$ 无限，那么 $|I| = |J|$，但是当 $I$ 有限时，结论并不一定成立，例如 $R = End(_kV)$,其中 $V$ 为可数无穷维空间，则$R \simeq R^2$. 因此提出 $IBN$ 的概念：</p>
<p><strong>IBN (Invariant Basis Number)</strong> 称环$R$满足<strong>IBN</strong>性质，如果对任意<br>$$m,n \in \mathbb{N}, R^m \simeq R^n \Longrightarrow m=n$$</p>
<p>由定义不难看出，$R$ 不满足 IBN 性质，当且仅当, 存在 $R$ 上 $m \times n$矩阵 $A$ 和 $n \times m$ 矩阵 $B$ 使得<br>$$AB = I_n, BA =I_m$$ 因此 IBN 性质是对称概念.</p>
<blockquote>
<p>由IBN上述等价定义知 $f: R \to S \neq 0$ 为环同态，则 $S$ 满足IBN性质可推出$R$ 满足IBN性质。</p>
</blockquote>
<p>由上面的结论又可以给出很多满足IBN性质的例子：<br>Divison rings, local rings, semilocal rings, nonzero commutative rings, finite rings.</p>
<h3 id="2-_stably_finiteness"><a href="#2-_stably_finiteness" class="headerlink" title="2. stably finiteness"></a>2. stably finiteness</h3><p>称环$R$为stably finite,如果对任意 $n$<br>$$ R^n \simeq R^n \oplus N \Longrightarrow N=0 $$</p>
<p>等价定义: </p>
<ol>
<li>对任意$n$, $R^n$是hopfian</li>
<li>对任意$n$, $M_n(R)$是Dedekind-finite的.</li>
</ol>
<p>由2可知 stably finite 是对称概念.</p>
<blockquote>
<p>由 $M_n(R)$ Dedekind-finite 可知:<br>若$g: R \to S$ 是嵌入(单射)同态(不要求幺元映成幺元), 那么若$S$ stable finite, 则$R$也是.</p>
</blockquote>
<p>由上可知:<br>$$\prod _{i \in I} R _i \quad \mbox{ stably finite } \iff R _i \quad \mbox{ stably finite for all } i$$</p>
<p><strong>例子</strong>:<br>Commutative Rings, Noetherian Rings</p>
<p><strong>性质</strong>:<br>若环$R$不是 stably finite, 我们可以做一个最大的商环$\bar{R}$,使得 $\bar{R}$ stably finite.<br>$\bar{R}$可以如下构造, 并可以说明它确实 stably finite.<br>设 $T$ 为所有形式 $I-YX$ ( 方阵$X,Y$满足$XY = I$ )的中元素生成的理想。可以证明: $\bar{R} = R/T$ </p>
<p>自然地, 我们要问啥时候 $\bar{R} = 0$? 这当且仅当存在$C,D \in M_m(R)$,行向量$x$,列向量$y$, 使得<br>$$ x(I-DC)y = 1$$</p>
<h4 id="3-_rank_condition"><a href="#3-_rank_condition" class="headerlink" title="3. rank condition"></a>3. rank condition</h4><p>称环 $R$ 满足 rank condition, 如果对任意 $n$, $R^n$ 中生成元的个数都大于$n$.<br>等价定义1: 任意满同态 $f: R^m \to R^n$ 可推出 $m \geq n$.<br>等价定义2: 环$R$不满足rank condition, 当且仅当, 存在$n&gt;k \geq 1$, 那么存在 $n \times k$ 矩阵$A$和$k \times n$ 矩阵$B$ 使得$AB=I_n$</p>
<blockquote>
<p>由上面等价定义2知道 rank condition 是个对称的概念.</p>
</blockquote>
<p>若有环同态 $f: R \to S$, 其中$S$满足rank condition, 那么$R$也满足.</p>
<p>rank condition 与 stably finite 以及 IBN 之间的关系($R \neq 0$):<br>stably finite $\Longrightarrow$ rank condition $\Longrightarrow$ IBN<br>套用一下定义,以及它们各自的等价定义,逆反命题就可以证明.</p>
<blockquote>
<p>stably finite 与 rank conditon 的密切联系</p>
</blockquote>
<p>对任意环$R$, 下面结果等价:</p>
<ol>
<li>$R$ 满足 rank condition</li>
<li>$\bar{R} \neq 0$</li>
<li>$R$ 有一个非零 stably finite 的同态像 </li>
<li>对任意$n$, $C,D \in M_n(R)$, 若$CD = I_n$, 则对任意行向量$x$和列向量$y$, $x(I-DC)y \neq 1$</li>
</ol>
<p>这里难点在于 1 推出 4, 可以用反证法, 用增广矩阵得到<br>$$<br>\begin{pmatrix}<br>C \\<br>x(I-DC)<br>\end{pmatrix}<br>\left(D ,(I-DC)y \right) =<br>\begin{pmatrix}<br>CD &amp; 0 \\<br>0 &amp; x(I-DC)<br>\end{pmatrix} = I_{m+1}<br>$$</p>
<blockquote>
<p>在simple ring 中 stably finite 等价于 rank condition</p>
</blockquote>
<h3 id="4-_strong_rank_condition"><a href="#4-_strong_rank_condition" class="headerlink" title="4. strong rank condition"></a>4. strong rank condition</h3><p>称环 $R$ 满足 right strong rank condition, 如果对任意$n$, $R^n$ 中任意线性相关的元素个数不超过 $n$.<br>等价定义1: 任意单同态 $f: R^m \to R^n$ 可推出 $m \leq n$.<br>等价定义2: 任意 $m$ 个未定元 $n &lt; m$ 个方程的线性方程组在 $R$ 中必有非零解.(用线性相关的定义可知)</p>
<blockquote>
<p>实际上 strong rank condition 不是对称概念, 所以严格上, 我们要指出 left, right.</p>
</blockquote>
<p>由 (strong) rank condition 的等价定义可知:</p>
<blockquote>
<p>由于 $R^n$ 是自由$R$-模,因此,可以推出 right strong rank condition 可推出 rank condition.</p>
</blockquote>
<p><strong>注意</strong>right strong rank condition 不像之前的满足 $f: R \to S$, $S$满足”性质”,则 $R$ 满足”性质”.</p>
<p>$A \times B$ 满足 (right) strong rank condition (RSRC) 当且仅当 $A$ 或者 $B$ 满足 RSRC </p>
<p>由上面性质知道, stably finite 和 strong rank condition 是两个独立的概念, 彼此不搭嘎. 例如: </p>
<ol>
<li>$R = \mathbb{Q}&lt; x,y &gt;$ 是 stably finite, 但不满足 RSRC.</li>
<li>而由上面性质知道, 我们只要构造一个满足RSRC和一个不满足stably finite的积即可.</li>
</ol>
<p>满足 RSRC 的例子:<br>Noetherian rings, Commutative Rings.</p>
<blockquote>
<p>最后给出一个线性无关的等价定义:</p>
</blockquote>
<p>$u_1,\cdots,u_m$ 在 $M = R^n$ 中线性无关, 当且仅当<br>$$0 \neq u_1 \wedge \cdots \wedge u_m \in \bigwedge ^m (M)$$</p>
<h3 id="5-__u603B_u7ED3_u56FE"><a href="#5-__u603B_u7ED3_u56FE" class="headerlink" title="5. 总结图"></a>5. 总结图</h3><p>自由模下的关系(任意箭头一般都不可逆):<br><img src="MRing1.png" alt="MRing1"></p>
<p>一般地, Dedekind finite + Rank condition 依然无法推出 stably finite. 例如:<br>设 $R$ 为由元素$s,t,u,v;w,x,y,z$ 生成的$k$代数,设 $A = \begin{pmatrix}<br>s &amp; u \\<br>t &amp; v<br>\end{pmatrix}, B = \begin{pmatrix}<br>x &amp; y \\<br>z &amp; w<br>\end{pmatrix}$, 其中生成元满足关系: $$AB = I_2$$<br>由此可知, $R$是domain, 但是一般地, $BA \neq I_2$. 因此 $M_2(R)$不是Dedekind finite的. 因此 $R$ 不满足 stably finite 条件.<br>定义 $f: R \to k$为 $f(s)=f(v) = f(x) = f(w) =f(1) = 1, f(u) = f(t) = f(y) = f(z) = 0$. 因此由 $k$ 满足 rank condition, so is $R$.</p>
<h2 id="u6295_u5C04_u6A21"><a href="#u6295_u5C04_u6A21" class="headerlink" title="投射模"></a>投射模</h2><h3 id="1-__u6295_u5C04_u6A21_u7684_u5B9A_u4E49"><a href="#1-__u6295_u5C04_u6A21_u7684_u5B9A_u4E49" class="headerlink" title="1. 投射模的定义"></a>1. 投射模的定义</h3><p>一个右$R$模$P$成为projective module(投射模),如果<br>对任意$R$模满同态$g:B \to C$和任意$R$模同态 $h: P \to C$,存在$R$模同态 $h’: P \to B$ 使得 $h = gh’$</p>
<blockquote>
<p>由定义显然free module is always projective.</p>
</blockquote>
<p>等价定义: 从右模范畴到Abel范畴 $\hom(P,-)$ 的函子是exact functor(正合函子).<br>由定价定义易知:<br>$$\bigoplus_{i \in I} P_i \mbox{ 投射当且仅当 } P_i, i\in I \mbox{ 投射 }$$<br>由之前说明的自由模都是投射模可知以下条件等价</p>
<ol>
<li>$P_R$ 投射</li>
<li>$P_R$ 是某个自由$R$模的直和因子</li>
<li>任意满同态$B_R \to P_R$ split.</li>
</ol>
<p>由此可知:(Eilenberg’s Trick) 若$P_R$ 投射,则存在自由模$F_R$使得$P \oplus F \simeq F$</p>
<blockquote>
<p>Proof: 由$P_R$投射模,所以存在$Q_R$使得$E = Q \oplus P$为自由模, 取$F$为 $E$ 的可数直和即可.</p>
</blockquote>
<p>不是投射($\mathbb{Z}$)模的例子:<br>$\mathbb{Z} / 2 \mathbb{Z}, \quad M = \mathbb{Z} \times \mathbb{Z} \times \cdots$</p>
<p>一个有趣的结果:<br>设$P = \mathbb{Z} \oplus \mathbb{Z} \oplus \cdots \subset M$, 则$\hom_{\mathbb{Z}}(M/P,\mathbb{Z}) = 0$.<br>证明关键点在于 $M = A_2 + A_3$, 其中 $A_k = \lbrace (k a_1,k^2 a_2,\cdots,k^n a_k,\cdots): a_i \in \mathbb{Z} \rbrace$<br>然后说明 $A_k \in P$, 且$f(M)=f(A_2)+f(A_3) \subset f(P)$即可.</p>
<h3 id="2-_Dual_Basis_28_u5BF9_u5076_u57FA_29"><a href="#2-_Dual_Basis_28_u5BF9_u5076_u57FA_29" class="headerlink" title="2. Dual Basis(对偶基)"></a>2. Dual Basis(对偶基)</h3><p>$P_R$ 是投射模, 当且仅当它有对偶基, 即存在一族元素 $\lbrace a_i: i\in I \rbrace \subset P$ 和线性函数 $\lbrace f_i: i \in I \rbrace \subset P^{\star} = \hom(P,R)$ 使得对任意$a \in P$, 只有有限个 $f(a_i)$非零, 且 $a = \sum a_i f_i (a)$.</p>
<p>对任意$R$-模$M_R$, $ M^{\star} = \hom(M,R) $ 是左 $R$ 模, $M^{\star \star} = \hom(M^{\star} ,R)$ 是右 $R$模, 我们有自然的右模同态, $\epsilon : M \to M^{\star \star}$定义为: $\epsilon(a) = \hat{a}$, 其中 $\hat{a} (f) = f(a)$ 为求值函数.</p>
<blockquote>
<p>特别地, 当 $M_R$ 是投射的, $\epsilon$ 是单同态, $M_R$ 是有限生成投射时, $\epsilon$为同构.</p>
</blockquote>
<p>例: $e \in R$ 为幂等元, 则$R = eR \oplus (1-e)R$, 所以, $P = eR$ 为有限生成投射模.</p>
<h3 id="3-_Invertible_Modules_and_Fractional_Ideals_28_u53EF_u9006_u6A21_2C_u53EF_u9006_u7406_u60F3_29"><a href="#3-_Invertible_Modules_and_Fractional_Ideals_28_u53EF_u9006_u6A21_2C_u53EF_u9006_u7406_u60F3_29" class="headerlink" title="3. Invertible Modules and Fractional Ideals(可逆模,可逆理想)"></a>3. Invertible Modules and Fractional Ideals(可逆模,可逆理想)</h3><blockquote>
<p>此小节中默认$R$为交换环</p>
</blockquote>
<p>很大一类的交换环上的投射模是由环扩张 $S \supset R$ 得到的.<br>现在, 给定(交换)环扩张$S \supset R$. 考虑模$S$的$R$-子模, 设 $P,Q$ 为模$S$的$R$-子模, 定义:<br>$$ PQ = \lbrace \sum p_i q_i : p_i \in P, q_i \in Q \rbrace, \quad Q:P = \lbrace s \in S: sP \in Q \rbrace,\quad P^{-1} = \lbrace s \in S : sP \subset R \rbrace = R:P$$<br>注意到 $P^{-1}$依赖于环扩张$S$的选取.</p>
<p>由上面定义,我们立即有下面引理(条件1,2等价):</p>
<ol>
<li>存在$S$的$R$-子模$Q$使得 $PQ = R$</li>
<li>$PP^{-1} = R$</li>
</ol>
<p>由于上述定价,我们把满足条件的$P$称为 <strong>Invertible $R$-submodule</strong> of $S$<br>在此条件下,我们有:</p>
<ol>
<li>$P$ 是有限生成投射$R$-模.(利用 $\sum p_i q_i = 1$)</li>
<li>任意$R$-子模$M \in S$,自然映射 $f: P \otimes _R M \to PM$ 是 $R$-模同构</li>
<li>$P^{\star} \simeq P^{-1}$ (因此$P^{\star}$可以成$S$的子模).</li>
<li>$P_R$是自由模,当且仅当存在$s \in R$使得$P = sR$(此时$s$必然是$s$中的可逆元).</li>
</ol>
<blockquote>
<p>结论4经常用于说明一个模是投射模但不是自由模.</p>
</blockquote>
<p>下面有一个很精彩的例子:<br>设$R \subset S$ 为交换环,$g \in S$满足 $g^2,g^3 \in R$, 即 $g^n \in R$ 对 $n&gt;1$ 成立.定义$P_r = (1+rg, g^2)$, 那么</p>
<p>$$ P_r P_s = (1+rg,g^2)(1+sg,g^2) = (1+(r+s)g+rsg^2,g^2+sg^3,g^2+rg^3,g^4) $$</p>
<p>显然上面集合包含 $g^2(1+(r+s)g+rsg^2)-rsg^4 = g^2 +(r+s)g^3$,<br>因此包含 $rg^3,sg^3,g^2,1+(r+s)g$, 因此</p>
<p>$$ P_r P_s = (1+(r+s)g,g^2,rg^3,sg^3) $$</p>
<p>再由 $g^3(1+(r+s)g) - (r+s)g^2g^2 = g^3$ 可知: </p>
<p>$$ P_r P_s = (1+(r+s)g,g^2) = P_{r+s} $$</p>
<p>因此$P_r P_{-r} = P_0 = (1, g^2) = R$, 即 $\lbrace P_r: r \in R \rbrace$ 是一族Invertible $R$-submodule of $S$(因此投射), 且 $P^{\star} = P_r^{-1} = P_{-r}$.<br>$P_r$是$R$-free 当且仅当 $u(1+rg) \in R$ 对所有的 $u \in U(R[g])$</p>
<blockquote>
<p>之前说过 $P^{-1}$依赖于$R$的扩张$S$的选取,现在我们在$R$的所有regular element(正则元)这个乘闭子集$C_R$上做局部化得到环$K$,那么自然映射此时是单同态,因此局部化得到的环可以看做$R$的扩张(由$R$唯一决定).且对任意$k \in K$, 都存在regular element $u$ 使得 $uk \in R$.</p>
</blockquote>
<p>称$K$的$R$-子模为 <strong>fractional ideal(分次理想)</strong> 通常记为 $\mathfrak{A}$<br>引理: 对任意fractional ideal $\mathfrak{A} \subset K$且$\mathfrak{A} \cap C_R \neq \emptyset$, 则有 $\hom(\mathfrak{A}, K) \simeq K$.<br>Proof: 作映射$\lambda : K \to \hom_R(\mathfrak{A},K)$为: $\lambda(k)(a) = ka$,证明单满即可.</p>
<p>对任意fractional ideals $\mathfrak{A},\mathfrak{B} \subset K$, 我们也有类似引理的证明: 当 $\mathfrak{A} \cap C_R \neq \emptyset$<br>$$\hom_ R(\mathfrak{A},\mathfrak{B}) \simeq \mathfrak{B}:\mathfrak{A}$$</p>
<blockquote>
<p>特别地, 若$\mathfrak{A} \cap C_R \neq \emptyset$,则$\mathfrak{A}^{\star} = \mathfrak{A} ^{-1} = R:\mathfrak{A}$.</p>
</blockquote>
<p>对任意fractional ideal $\mathfrak{A} \subset K$, 下面等价:</p>
<ol>
<li>$\mathfrak{A}$ 是 invertible module($\mathfrak{A} \mathfrak{A}^{-1} = R$)</li>
<li>$\mathfrak{A}$ 是投射模,且 $\mathfrak{A} \cap C_R \neq \emptyset$</li>
<li>$\mathfrak{A}$ 是有限生成投射模,且 $\mathfrak{A} \cap C_R \neq \emptyset$<blockquote>
<p>此条件下$\mathfrak{A}$ 自由模当且仅当 存在 $s \in K$ 使得$\mathfrak{A} = sR$(此时$s \in U(K)$)</p>
</blockquote>
</li>
</ol>
<p>由上可知: 若$R \neq K$, 则 $K$ 不是投射模.<br>Proof: 如果是, 那么必然有限生成投射, 因此<br>$$ K= \sum _{i=1} ^n R c _i d _i ^{-1} (c _i \in R, d _i \in C _R)$$<br>那么 $d = d_1 \cdots d_n \subset U(K)$, 我们有 $K = dK \subset R$ 矛盾于条件.</p>
<blockquote>
<p>因此 $\mathbb{Q}_{\mathbb{Z}}$ 不是投射模.</p>
</blockquote>
<h3 id="4-__u4EA4_u6362_u73AF_u4E0A_u7684Picard_Group"><a href="#4-__u4EA4_u6362_u73AF_u4E0A_u7684Picard_Group" class="headerlink" title="4. 交换环上的Picard Group"></a>4. 交换环上的Picard Group</h3><p>实际上, 第二小节和第三小节中的Invertible Module 都是”秩为1”的有限生成投射模, 对于交换环, 秩的概念定义如下:<br>由于若$P,Q$为$R$-模, $P \otimes Q$也是$R$-模, 且当$P,Q$投射时, $P \otimes Q$也是投射模.<br>当$P$是有限生成投射$R$-模时, 对于$R$的任意素理想$\mathfrak{p}$, 在其上局部化得到 $P_{\mathfrak{p}} = P \bigotimes_{R} R_{\mathfrak{p}} $ 也是有限生成投射的. 由于 $R_{P}$交换局部环, 因此$P_{\mathfrak{p}}$是自由的(交换局部环上有限生成投射模是自由模).因此就有秩, 也就是说我们有从$R$的素谱到$\mathbb{Z}$(带离散拓扑)的一个连续映射. 当这个映射是常值映射时(这要求$R$中无非平凡幂等元),就称这个常值为投射模$P$的秩.</p>
<blockquote>
<p>注意到若$rk(P)=n,rk(Q)=m$ 那么 $rk(P^{\star})=n,rk(P \otimes Q) = mn$</p>
</blockquote>
<p><strong>引理</strong> 设$R \subset S$ 为交换环, 那么在任意$S$的可逆$R$-子模都是秩为1的投射模.<br>Proof: 用一个Invertible Module(可逆模)的定义, 以及成为自由模的条件, 即可证明.</p>
<p>设 $Pic(R)$ 为 $R$ 上所有秩为1的有限生成投射模的同构等价类. 将$P$ 的等价类记作 $[P]$<br>我们定义乘法(满足结合律, 交换律):<br>$$ [P][Q] = [P \otimes Q]$$<br>$[R]$ 成为 $Pic(R)$ 中的幺元, $[P]^{-1} = [P^{\star}]$.<br>即 $Pic(R)$ 关于上述乘法构成abelian group. 称为交换环$R$的Picard group.</p>
<blockquote>
<p>实际上 “Pic” 还是交换环范畴到abelian group范畴的函子.</p>
</blockquote>
<p>具体到$R \subset K$, $K$中所有invertible fractional ideals是$R$上秩为1的有限生成投射模(记为$I_{R}$)但是一般地$R$上所有秩为1的有限生成投射模并不一定同构与某个invertible fractional ideal.</p>
<p><strong>定理</strong> 对自然映射$f: R \to K$, 我们有正合列<br>$$ 1 \to U(R) \to U(R) \to I_{R} \to Pic(R) \to Pic(K) $$</p>
<h3 id="5-__28semi_29Hereditary_Rings"><a href="#5-__28semi_29Hereditary_Rings" class="headerlink" title="5. (semi)Hereditary Rings."></a>5. (semi)Hereditary Rings.</h3><p>在交换环中, Dedekind (domain) ring 定义为交换整环$R$, 所有理想都是Invertible Ideal(或者说投射的). 这说明 $R$ 必然是 Noetherian domain. 因此 Dedekind ring 也可以定义为 noetherian domain 中整闭的Krull维数为小于等于1的环, 也可以定义为满足每个理想都是一些素理想的有限积的交换整环.</p>
<p>把上述 Dedekind ring 推广到非交换的情形, 我们有如下 <strong>Hereditary ring</strong> 的定义:<br>A ring $R$ 称为右(左)Hereditary ring, 如果它的每个右(左)理想都是投射的, 如果它既为左又右,那么就成为 Hereditary ring.</p>
<p><strong>Kaplansky’s Theorem</strong> 设 $R$ 为right Hereditary ring. 任意$R$-自由模的子模$P$都同构于$R$的一些理想的直和. 特别地, $P$是投射的.</p>
<p>由于每个模都可以看成自由模的同态像, 投射模是某个自由模的直和因子, 又由Kaplansky定理知:</p>
<ol>
<li>在一个 right hereditary $R$ 上, 一个$R$-模 $P_R$投射, 当且仅当它能嵌入到一个自由模中.</li>
<li>环$R$投射, 当且仅当, 每个投射$R$-模的子模都是投射的.</li>
<li>若环$R$是PRID(principal right ideal domain), 那么每个自由$R$-模的子模都是自由的.</li>
</ol>
<p>类似于 Hereditary ring 的定义, 我们称一个环 $R$ 为 <strong>semihereditary ring</strong>: </p>
<p>$R$ 称为右(左)semihereditary ring, 如果 $R$的每个f.g.(finitely generate有限生成)右(左)理想都是投射$R$右(左)模. 如果既左又右,称为 semihereditary ring.<br>我们称交换的semihereditary ring为Prufer ring.</p>
<p>类似于 <strong>Kaplansky’s Theorem</strong> 我们有$R$为 right semihereditary ring. 任意 $R$-自由模的有限生成子模$P$都同构与有限个$R$的理想的直和.</p>
<blockquote>
<p>right semihereditary 的等价刻画: </p>
</blockquote>
<p>$R$ 为 right semihereditary ring 当且仅当投射右$R$模的有限生成子模都是投射的.</p>
<p>例子:</p>
<ol>
<li>Semisimple ring is hereditary.</li>
<li>PRID is right hereditary, 例如 $D[x]$, 其中$D$是division ring.</li>
<li>$M_n(R)$ is semihereditary, 其中$R$为Dedekind ring.</li>
<li>von Neumann regular ring is semihereditary.</li>
<li>$$\begin{pmatrix} \mathbb{Z} &amp; \mathbb{Q} \\ 0 &amp; \mathbb{Q} \end{pmatrix}$$ 是 right hereditary, left semihereditary, but not left hereditary. Note that this example is also left artinain but not right noetherian.</li>
</ol>
<h3 id="6-Hereditary_Artinian_Ring"><a href="#6-Hereditary_Artinian_Ring" class="headerlink" title="6.Hereditary Artinian Ring"></a>6.Hereditary Artinian Ring</h3><p>Hereditary artinian ring 十分的重要(因为简单0.0), 一般一个概念加上artinian 条件就会变得特别简单, 例如 Artinian commutative domain is field.</p>
<p>设$J = rad R$为环$R$的Jacobison radical. 若$R$是artinian ring. 以下结论等价:</p>
<ol>
<li>$R$ is right hereditary.</li>
<li>$J$ 作为右$R$-模是投射的.</li>
<li>对任意幂等元$e$, $eJ$是投射右$R$-模.</li>
<li>$R$的任意极大右理想都是投射右$R$-模.</li>
</ol>
<blockquote>
<p>证明难度还是有的, 要用到任意有限生成artinian模都是有限长的.</p>
</blockquote>
<p>例子:<br>设$R$是divison ring $D$上的$n \times n$上三角矩阵全体, 则$R$是hereditary artinian ring.</p>
<h3 id="7_Trace_Ideal"><a href="#7_Trace_Ideal" class="headerlink" title="7 Trace Ideal"></a>7 Trace Ideal</h3><p>Definition: 对任意 $P_R$, 定义$tr(P) = \sum im(f)$ 其中, $f$ 跑遍 $P^{\star}$. 容易看出 $T = tr(P)$ 是 $R$ 的理想, 称为 Trace Ideal. 它满足:<br>若$P_R$ 是投射的, 则 $PT = P, T^2 = T, ann(P) = ann_r(T)$<br>特别的, 若$P_R$ 是有限生成投射的, 那么其对偶基$\lbrace a_i f_i \rbrace_{1\leq i \leq n}$. 那么 $tr(P)$ 可由有限集 $\lbrace f_j(a_i) \rbrace$ 生成.<br>另外,若 $tr(P) = R$, 我们称 $P$ 是生成子.</p>
<p><strong>引理</strong> 设$T$是交换环$R$的有限生成幂等理想, 则存在幂等元$e \in R$ 使得 $T=eR$.<br>Proof: 关键在于把 $T$ 写成 $T = \sum_{i=1} ^n Tx_i$</p>
<p>由上述引理和$T = Tr(P)$的性质, 不难证明下面定理:<br><strong>定理</strong> 设$P_R$是交换环$R$有限生成投射模, 那么存在幂等元$e$使得$T=Tr(P)=eR, N = ann(P) = (1-e)R$, 特别地, $R = T \otimes N$, 投射模$P_R$是faithful(忠实的)当且仅当$T = R$.<br>当$R$无非平凡幂等元时, 则$P \neq 0$ 是(有限生成投射)生成子. </p>
<blockquote>
<p>定理中条件缺一不可, 且幂等元$e$可以根据有限对偶基显式表达出来.</p>
</blockquote>
<p>Trace ideal 的应用:<br><strong>引理</strong> 设$R \subset S$ 是环(不要求交换), 则 $R$是$S_R$的直和因子, 当且仅当, $Tr(S_R) = R$.<br>Proof: 若$R$是$S_R$的直和因子, 则 $Tr(S_R) \supset Tr(R_R) = R$, 所以$Tr(S_R) = R$.<br>若$Tr(S_R) = R$, 那么存在 $f_i \in S_R^{\star},s_i \in S, (1 \leq i \leq n) $ 使得 $\sum f_i(s_i) = 1$.<br>定义映射 $\lambda: S \to R$ 为: $\lambda(s) = f(s_i s)$. 为环同态, 且在$R$上限制为恒等映射.(因此$R$是$S_R$的直和因子).</p>
<p><strong>定理</strong> 设$R \subset S$, 其中$R$是交换环, $S$ 是f.g. 右$R$-模. 则$R$是$S_R$的直和因子.<br>Proof: 由$ann(S_R) = 0$, 在由上面引理即证.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了把看过的知识变成自己的东西，在此理一下思路（导师建议写的东西记录一下，不然以后过不了多久又忘了，花了时间就要有收获）</p>
<blockquote>
<p>2017年内长期更新</p>
</blockquote>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2017横店马拉松]]></title>
    <link href="http://dna049.com/2017/04/10/hdmarathon/"/>
    <id>http://dna049.com/2017/04/10/hdmarathon/</id>
    <published>2017-04-10T15:17:55.000Z</published>
    <updated>2017-05-08T05:28:12.000Z</updated>
    <content type="html"><![CDATA[<p>4月9号、星期天、暴雨、独自一人、横店马拉松。<br><a id="more"></a></p>
<blockquote>
<p>如果把孤独分等级，不知道一个人去异地跑半程马拉松是几等孤独0.0</p>
</blockquote>
<h3 id="u6210_u7EE9"><a href="#u6210_u7EE9" class="headerlink" title="成绩"></a>成绩</h3><p>报了4年的上海半马从未中签，横店马拉松成了我第一个半马，净成绩1:48:02 (810名)，如果不出意外（中途要💩。。。），跑进1:45完全没问题。下次努力跑进1:40吧。</p>
<h3 id="u5076_u9047"><a href="#u5076_u9047" class="headerlink" title="偶遇"></a>偶遇</h3><p>第一次住青年旅舍，太空舱还是十分赞的，以后也会考虑，要是学校宿舍能搞成这样就完美了。认识了一个比较耿直的哥们，和他喜欢的女孩子，只是那个女孩子心有点高，希望最后那哥们能抓住自己的幸福，女孩子也能珍惜来之不易的感情吧。<br>当然还有一个跑进了2小时的温州小姑娘，对于妹子来说很不错了。那妹子呆呆的，免不了被了撩了很久。碰到她是这次旅行最让我开心的事啦。不过把我并没有恋爱的想法，感觉本命年一直单身确实是个不错的idea(感觉实力打脸😢)</p>
<h3 id="u611F_u53D7"><a href="#u611F_u53D7" class="headerlink" title="感受"></a>感受</h3><p>从出发到跑完，全程大雨，全身湿透，鞋子里面装了差不多一斤水。不过下雨心肺不会那么难受，如果是零星小雨就完美了。跑到15公里想💩，但是怕影响成绩就没去上厕所，到16公里实在憋不住了，一路问志愿者都不知道哪里有厕所，最后听听走走一公里终于看到一家酒店，热心阿姨带我去了卫生间。蹲了2分钟就马上接跑了，因为想把耽搁的时间追回来，跑的快了点，加上蹲了一会，又上下坡多，左膝盖爆炸了，还好记得跑协老师教过此刻要小步跑，终于忍着痛，小步跑慢慢膝盖好了很多，继续小步幅，高步频，速度没有下降太多。</p>
<h4 id="u5E78_u798F"><a href="#u5E78_u798F" class="headerlink" title="幸福"></a>幸福</h4><p>跑完之后，有个小姐姐给我按摩了快20分钟，感觉好酸痛，也好幸福。按摩完之后满血复活了，左腿按摩的比较多，回来之后的第二天就不怎么酸了，但是右腿没啥事，当时没怎么让她帮我按，现在就酸的不行0.0。以后再有这种事，一定别因为腿当时没事就大意。最后真心很感谢这么小姐姐。</p>
<h3 id="u9A6C_u62C9_u677E_u76EE_u6807"><a href="#u9A6C_u62C9_u677E_u76EE_u6807" class="headerlink" title="马拉松目标"></a>马拉松目标</h3><p>5月21号要跑一次山地半程马拉松，不过山地是真的没经验，到时候加加群问一问有经验的人吧。<br>目标：跑进1:40</p>
<p>今年下半年跑一次全马一次半马，全马最好是上海，次选杭州。<br>半马跑进 1:35<br>全马跑进 3:30</p>
<p>flag 先立好，希望不要倒。</p>
<blockquote>
<p>从3-10号到4-9号总共跑了130公里。4月继续努力。<br>感谢我旦旦的乐跑协会，让我再短短半个月有了每公里30秒的提高。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>4月9号、星期天、暴雨、独自一人、横店马拉松。<br>]]>
    
    </summary>
    
      <category term="marathon" scheme="http://dna049.com/tags/marathon/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[与某个矩阵交换的矩阵全体]]></title>
    <link href="http://dna049.com/2017/04/04/matrix-commute-with-A/"/>
    <id>http://dna049.com/2017/04/04/matrix-commute-with-A/</id>
    <published>2017-04-04T12:52:20.000Z</published>
    <updated>2017-04-16T12:03:54.000Z</updated>
    <content type="html"><![CDATA[<p>这个结果还是有些重要的所以记录一下，但是呢？我太懒了，直接截图吧<br>0.0<br><a id="more"></a></p>
<p><img src="m1.png" alt="1"><br><img src="m2.png" alt="2"><br><img src="m3.png" alt="3"><br><img src="m4.png" alt="4"><br><img src="m5.png" alt="5"></p>
<p>总体问题还是很复杂，但是特殊情形十分简单：</p>
<blockquote>
<p>若方阵$A$的特征多项式是最小多项式，那么与$A$交换的矩阵必然是 $A$ 的多项式。若当块与$J$可换的矩阵全体是 $f(J)$。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个结果还是有些重要的所以记录一下，但是呢？我太懒了，直接截图吧<br>0.0<br>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[非交换环概念框架图]]></title>
    <link href="http://dna049.com/2017/04/04/noncommutative-rings/"/>
    <id>http://dna049.com/2017/04/04/noncommutative-rings/</id>
    <published>2017-04-04T12:37:11.000Z</published>
    <updated>2017-04-04T13:08:41.000Z</updated>
    <content type="html"><![CDATA[<p>最近在看 T.Y.Lam（林节玄）的书，深知非交换环的小技巧深不见底，不过仔细品味了一番之后也觉得十分有趣。最后给一张各种概念之间的关系，每一种概念都有很多等价定义，概念之间关系的推导也十分微妙，充满了技巧性。</p>
<a id="more"></a>
<p><img src="noncommutaiveRings.png" alt="框架图"></p>
<p>上面带 <code>=</code> 号的条件是说在此条件下，两个概念等价。<br>推理的细节，以及各个概念的定义为这里就不写了。</p>
<blockquote>
<p>有兴趣可以查阅 GTM 131 T.Y.Lam《A First Course in Noncommutative Rings》 </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在看 T.Y.Lam（林节玄）的书，深知非交换环的小技巧深不见底，不过仔细品味了一番之后也觉得十分有趣。最后给一张各种概念之间的关系，每一种概念都有很多等价定义，概念之间关系的推导也十分微妙，充满了技巧性。</p>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[幂零矩阵的一个充要条件]]></title>
    <link href="http://dna049.com/2017/04/01/interst-result-4-1/"/>
    <id>http://dna049.com/2017/04/01/interst-result-4-1/</id>
    <published>2017-04-01T05:39:44.000Z</published>
    <updated>2017-04-01T06:43:35.000Z</updated>
    <content type="html"><![CDATA[<p>前几天一个学弟告诉我,关于复数域上幂零矩阵$A$的一个充要条件:<br>$$A = AB-BA, \exists  B \in M_n(\mathbb{C})$$<br>特此记录。<br><a id="more"></a><br>证明分几个小步骤。</p>
<ol>
<li><p>必要性对若当块成立，若$A$为（上三角）若当块，那么取 $B = diag \lbrace 0,1,\cdots,n-1 \rbrace$ 即可，若 $A$ 为分块若当块（若当标准型），那么取对应的分块 $B$ 即可。又由于<br>$$ P^{-1} A P = P^{-1} A P P^{-1} B P -P^{-1} B P P^{-1} A P $$<br>因此，由对若当标准型成立,可知道对一般形式成立。</p>
</li>
<li><p>$tr(A^k) = 0, 1 \leq k \leq n$,则 $A$ 幂零。<br>由若当标准型可知，只需证明<br>$$<br>\begin{cases}<br>x_1 + x_2 + \cdots + x_n = 0 \\<br>x_1 ^ 2 + x_2 ^ 2 + \cdots + x_n ^2 = 0 \\<br>\cdots  \\<br>x_1 ^ n + x_2 ^n + \cdots + x_n ^n  = 0<br>\end{cases}<br>$$<br>推出，$x_1 = x_2 = \cdots x_n = 0$， 不妨设<br>$$<br>\begin{cases}<br>x_1 t_1 + x_2 t_2 + \cdots + x_r t_r = 0 \\<br>x_1 ^ 2 t_1  + x_2 ^ 2 t_2 + \cdots + x_r ^2 t_r= 0 \\<br>\cdots  \\<br>x_1 ^ r t_1 + x_2 ^r t_2 + \cdots + x_r ^r t_r = 0<br>\end{cases}<br>$$<br>其中 $x_i$ 互不相同，那么，假设$r&gt;1$则由 Vandemode 行列式不为0知，$t_i = 0$ 矛盾，因此 $r = 1$ 此时 $x_i = 0$。</p>
</li>
<li><p>$C = AB-BA$ 且 $AC = CA$ 则，$C$ 幂零。<br>$$ \forall k,tr (C^k) = tr(C^{k-1}AB - C^{k-1}BA) =tr(C^{k-1}AB) - tr(AC^{k-1}B) = 0$$ 因此由上面结论知，$C$ 幂零。</p>
</li>
<li>由上面结论，充分性显然。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天一个学弟告诉我,关于复数域上幂零矩阵$A$的一个充要条件:<br>$$A = AB-BA, \exists  B \in M_n(\mathbb{C})$$<br>特此记录。<br>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kaplansky 定理]]></title>
    <link href="http://dna049.com/2017/03/25/KaplanskyTheorem/"/>
    <id>http://dna049.com/2017/03/25/KaplanskyTheorem/</id>
    <published>2017-03-25T02:28:10.000Z</published>
    <updated>2017-03-25T03:12:14.000Z</updated>
    <content type="html"><![CDATA[<p>(非交换)环中有一个有趣的（Kaplansky）定理说： </p>
<blockquote>
<p>如果环$R$中元素$a$有不止一个右逆，那么$a$有无穷多个右逆。</p>
</blockquote>
<p>这个定理告诉我们一个道理：当你错过了初恋，你就会沦为见一个爱一个的渣男0.0 </p>
<a id="more"></a>
<p><img src="Kaplansky.png" alt="kaplansky"><br>证明：（反证法）设 $a$ 的所有右逆构成的集合为 $A = \lbrace x \in A | ax=1 \rbrace $。<br>若 $A$ 有限，不妨设 $A = \lbrace x_1,x_2,\cdots,x_n \rbrace, (n&gt;1)$ , 则<br>$$a(1- x_i a + x_1) = a-(a x_i) a + a x_1 = 1$$<br>并且, 若 $1- x_i a + x_1 = 1- x_j a + x_1$, 即$x_i a = x_j a$, 那么$x_i = x_i(a x_i) = (x_j a) x_i = x_j$，也就是说<br>$$ A = \lbrace x_1,x_2,\cdots,x_n \rbrace =  \lbrace 1- x_1 a + x_1,1- x_2 a + x_1,\cdots,1- x_n a + x_1 \rbrace $$</p>
<p>所以存在 $k$ 使得 $ 1- a_k a + x_1 = x_1$，即 $a_k a = 1$ 所以对任意 $1 \leq i \leq n$,<br>$$a_i = (a_k a)a_i = a_k(a a_i) = a_k$$<br>即所有 $x_i$ 都相同，矛盾与 $A$ 中元素个数大于1，证毕。</p>
<h4 id="u7B49_u4EF7_u53D9_u8FF0"><a href="#u7B49_u4EF7_u53D9_u8FF0" class="headerlink" title="等价叙述"></a>等价叙述</h4><blockquote>
<p>如果环$R$中元素$a$有右逆而没有左逆，那么$a$有无穷多个右逆。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>(非交换)环中有一个有趣的（Kaplansky）定理说： </p>
<blockquote>
<p>如果环$R$中元素$a$有不止一个右逆，那么$a$有无穷多个右逆。</p>
</blockquote>
<p>这个定理告诉我们一个道理：当你错过了初恋，你就会沦为见一个爱一个的渣男0.0 </p>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Zariski Topology on $k^n$]]></title>
    <link href="http://dna049.com/2017/03/23/Zariski-Topology-on-k-n/"/>
    <id>http://dna049.com/2017/03/23/Zariski-Topology-on-k-n/</id>
    <published>2017-03-23T15:35:59.000Z</published>
    <updated>2017-03-24T00:37:30.000Z</updated>
    <content type="html"><![CDATA[<p>$k^n$ 最常见的拓扑自然是欧式拓扑，但是下面介绍的Zariski拓扑也是十分重要和“常见”的拓扑，并且它也保持了很多自然的性质，又有其独特的地方，值得了解一番。</p>
<blockquote>
<p>详见 Jacobson《Basic Algebra 2》</p>
</blockquote>
<a id="more"></a>
<h2 id="Zariski_Topology"><a href="#Zariski_Topology" class="headerlink" title="Zariski Topology"></a>Zariski Topology</h2><p>给定一个交换环 $A$, $Spec(A)$ 表示 $A$ 的素理想全体构成的集合，带上一个 Zariski topology，拓扑中闭集为所有形式<br>$$ V(I)=\lbrace P \in Spec(A) | I \subset P \rbrace , I \subset A $$<br>的集合，那么它必然会满足拓扑关于闭集的公理。</p>
<h2 id="24k_5En_24_u4E0A_u7684Zariski_u62D3_u6251"><a href="#24k_5En_24_u4E0A_u7684Zariski_u62D3_u6251" class="headerlink" title="$k^n$上的Zariski拓扑"></a>$k^n$上的Zariski拓扑</h2><blockquote>
<p>由于 $k^n=\lbrace(a_1,a_2,\cdots,a_n)| a_i \in k \rbrace$ 到 $k$ 的多项式函数与 $k[x_1,x_2,\cdots,x_n]$ 同构。所有 $k^n$ 上的拓扑本质上是由交换环 $k[x_1,x_2,\cdots,x_n]$ 的Zariski 拓扑所确定。</p>
</blockquote>
<p>$$V(S)=\lbrace (a_1,a_2,\cdots,a_n) \in k^n | f(a_1,a_2,\cdots,a_n) = 0 , \forall f \in S \rbrace$$</p>
<p>则有：</p>
<ol>
<li>$V(k[x_1,x_2,\cdots,x_n]) = \emptyset$; $V(\emptyset)=k[x_1,x_2,\cdots,x_n]$</li>
<li>$ \cap_{i \in I} V(S_i) = V(\cup_{i \in I} S_i) $</li>
<li>$V(S) = V(I(S))$; for ideals $I_1,I_2$, $V(I_1) \cup V(I_2) = V(I_1 I_2)$</li>
</ol>
<p>所以，上述$V(S)$全体作为闭集构成了 $k^n$ 的一个拓扑，称为 $k^n$ 上的Zariski拓扑。</p>
<h4 id="u6027_u8D28_uFF08_u8BBE_24k_24_u662F_u4EE3_u6570_u95ED_u57DF_uFF09"><a href="#u6027_u8D28_uFF08_u8BBE_24k_24_u662F_u4EE3_u6570_u95ED_u57DF_uFF09" class="headerlink" title="性质（设$k$是代数闭域）"></a>性质（设$k$是代数闭域）</h4><ol>
<li>拓扑基： $k^n$ 中开集有形式 $k^n \setminus V(S) = \cup_{f \in S} O_f$ 其中 $O_f = k^n \setminus V(f)$ 为开集。因此 $\lbrace O_f | f \in k[x_1,x_2,\cdots,x_n] \rbrace$ 构成了 $k^n$ 上的拓扑集</li>
<li>$k^n$ 是 $T_1$ 空间。 </li>
<li>$k^n$ 是不可约空间，即有限个非空开集交集非空。</li>
<li>$k^n$多项式映射在Zariski拓扑下连续。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>$k^n$ 最常见的拓扑自然是欧式拓扑，但是下面介绍的Zariski拓扑也是十分重要和“常见”的拓扑，并且它也保持了很多自然的性质，又有其独特的地方，值得了解一番。</p>
<blockquote>
<p>详见 Jacobson《Basic Algebra 2》</p>
</blockquote>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[玩具：HC6800-ES开发版]]></title>
    <link href="http://dna049.com/2017/03/19/singlechip/"/>
    <id>http://dna049.com/2017/03/19/singlechip/</id>
    <published>2017-03-19T14:10:02.000Z</published>
    <updated>2017-03-21T13:02:28.000Z</updated>
    <content type="html"><![CDATA[<p>这里记录一些我的新玩具:<code>51单片机</code>的基础常识，作为初学者，下文必然是错误百出。</p>
<a id="more"></a>
<blockquote>
<p>很久没更新博客了,毕竟很久没写程序了。数学类的嵌套的定义又太多，很不好写。</p>
</blockquote>
<h4 id="u65B0_u73A9_u5177"><a href="#u65B0_u73A9_u5177" class="headerlink" title="新玩具"></a>新玩具</h4><p>这次淘宝买的新玩具是：HC6800-ES V2.0 开发版，内部单片机是STC89C52。见下图<br><img src="HC6800.png" alt="开发版"><br>作为小白看了一下视频，但是呢，感觉视频什么的太慢，还是看书看<a href="HC6800-ES-V2.0实验指导书.pdf">手册</a>来的爽。安装好单片机版C语言的IDE Keil4 以及烧录软件之后，装一下开发版驱动，就可以在不知道单片机原理的情况下轻松的控制单片机了。例如什么 LED灯闪烁，跑马灯，等等很基础的程序。</p>
<p>下面是单片机的管脚图和说明：<br><img src="89C52.png" alt="管脚图"><br><img src="STC89C52_1.png" alt="说明1"><br><img src="STC89C52_2.png" alt="说明2"></p>
<p>从图上看知道P0,P1,P2,P3是重要的I/O口，例如我们把P2接到LED灯，那么给低电平0，就可以使灯亮。还有P0，P1不仅可以作为I/O口，还可以作为地址，计时器、计数器来用。还有P3，等等。由于我用的是开发版，每个口接什么基本上已经固定了，用的时候查相应的官方资料就行了。它也提供了很多程序例子，因此还是很好掌握的，只是要记点东西才能灵活操作它。</p>
<h4 id="HC6800-ES-VS2-0__u5E38_u89C1_u7BA1_u811A_u63A5_u6CD5_u3002"><a href="#HC6800-ES-VS2-0__u5E38_u89C1_u7BA1_u811A_u63A5_u6CD5_u3002" class="headerlink" title="HC6800-ES-VS2.0 常见管脚接法。"></a>HC6800-ES-VS2.0 常见管脚接法。</h4><ol>
<li>P2口8个位接了8个LED灯，至0灯亮。</li>
<li>P1.5接了蜂鸣器。循环至0至1发声。</li>
<li>P3.0 ~ P3.3 接了独立键盘（不过开发版上竟然接反了K1和K2），使用按键的时候要软件消除抖动，一般延迟10ms来完成。</li>
<li>通过P1的数据，来判断矩阵键盘按的键。（见下图）<br><img src="keyboard.png" alt="矩阵键盘原理图"></li>
<li>数码管使用P0, 通过 LSA=P2.2, LSB=P2.3, LSB=P2.4 的0-1指来控制显示的地方。</li>
<li>常用<a href="timer.c">定时器</a>和<a href="breaks.c">中断</a>标程。</li>
</ol>
<h4 id="1602__u6DB2_u6676_u663E_u793A"><a href="#1602__u6DB2_u6676_u663E_u793A" class="headerlink" title="1602 液晶显示"></a>1602 液晶显示</h4><p>这个虽然很复杂，但是生产该显示屏的会提供<code>lcd.h</code>和<code>lcd.c</code>然后我们只要先初始化LCD：<code>LcdInit()</code>再执行字节输出函数：<code>LcdWriteData(char c)</code>即可。</p>
<h4 id="u7A0B_u5E8F_u793A_u4F8B"><a href="#u7A0B_u5E8F_u793A_u4F8B" class="headerlink" title="程序示例"></a>程序示例</h4><p><code>程序功能: 按下k1键LED跑马灯，K2蜂鸣器发生，K3数码管显示1-8。由于不会中断，所以跑马灯写的很挫。</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> led P2</span></span><br><span class="line">sbit k1=P3^<span class="number">1</span>;</span><br><span class="line">sbit k2=P3^<span class="number">0</span>;</span><br><span class="line">sbit k3=P3^<span class="number">2</span>;</span><br><span class="line">sbit LSA=P2^<span class="number">2</span>;</span><br><span class="line">sbit LSB=P2^<span class="number">3</span>;</span><br><span class="line">sbit LSC=P2^<span class="number">4</span>;</span><br><span class="line">sbit beep=P1^<span class="number">5</span>;</span><br><span class="line">u8 beepS,i,ledState = <span class="number">0</span>,DigState = <span class="number">0</span>;</span><br><span class="line">u8 code smgduan[<span class="number">17</span>]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,</span><br><span class="line">					<span class="number">0x7f</span>,<span class="number">0x6f</span>,<span class="number">0x77</span>,<span class="number">0x7c</span>,<span class="number">0x39</span>,<span class="number">0x5e</span>,<span class="number">0x79</span>,<span class="number">0x71</span>&#125;; <span class="comment">//显示0~F的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(u16 t)</span></span>&#123; 	<span class="comment">//  每次约10us</span></span><br><span class="line">	<span class="keyword">while</span>(t--);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ledState = <span class="number">1</span>;</span><br><span class="line">	led=<span class="number">0xfe</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i!=<span class="number">7</span>;++i)&#123;</span><br><span class="line">		led = _crol_(led,<span class="number">1</span>);</span><br><span class="line">		delay(<span class="number">50000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ledState = <span class="number">0</span>;</span><br><span class="line">	led = <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DigDisplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">	DigState = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">switch</span>(i)&#123;	 <span class="comment">//位选，选择点亮的数码管</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">0</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">0</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第0位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">1</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">0</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第1位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">2</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">1</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第2位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">3</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">1</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第3位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">4</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">0</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第4位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">5</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">0</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第5位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">6</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">1</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第6位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">7</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">1</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第7位	</span></span><br><span class="line">		&#125;</span><br><span class="line">		P0=smgduan[i];	<span class="comment">//发送段码</span></span><br><span class="line">		delay(<span class="number">50000</span>); 	<span class="comment">//间隔一段时间扫描	</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DigStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	DigState = <span class="number">0</span>;</span><br><span class="line">	P0 = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyPress</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k1==<span class="number">0</span>)&#123;		<span class="comment">// 检测k1是否按下</span></span><br><span class="line">		delay(<span class="number">1000</span>);<span class="comment">//消除抖动 一般大约10ms</span></span><br><span class="line">		<span class="keyword">if</span>(k1==<span class="number">0</span>)&#123;	<span class="comment">//再次判断按键是否按下</span></span><br><span class="line">			<span class="keyword">if</span>(ledState==<span class="number">0</span>)	ledStart();</span><br><span class="line">			<span class="keyword">else</span>	ledStop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!k1);	 <span class="comment">//检测按键是否松开</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k2==<span class="number">0</span>)&#123;</span><br><span class="line">		delay(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(k2==<span class="number">0</span>)&#123;</span><br><span class="line">			beepS=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">while</span>(beepS&lt;<span class="number">200</span>)&#123;</span><br><span class="line">				beep=~beep;</span><br><span class="line">				delay(beepS);</span><br><span class="line">				++beepS;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!k2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k3==<span class="number">0</span>)&#123;</span><br><span class="line">		delay(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(k3==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(DigState == <span class="number">0</span>)	DigDisplay();</span><br><span class="line">			<span class="keyword">else</span>	DigStop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!k3);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)	keyPress();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里记录一些我的新玩具:<code>51单片机</code>的基础常识，作为初学者，下文必然是错误百出。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[五引理]]></title>
    <link href="http://dna049.com/2016/10/11/the-five-lemma/"/>
    <id>http://dna049.com/2016/10/11/the-five-lemma/</id>
    <published>2016-10-11T11:22:35.000Z</published>
    <updated>2016-10-11T13:16:14.000Z</updated>
    <content type="html"><![CDATA[<p>在同调代数中，Five lemma，Snake lemma，Nine lemma （五引理，蛇形引理，马蹄引理）都是重要的引理。这里介绍一下 五引理。其实它的一般形式是有两个四引理得出的。</p>
<a id="more"></a>
<p>以下范畴为：Abel范畴(这里仅在模范畴中考虑，此时 monic 即为单同态，epic 即为满同态)。</p>
<h4 id="u4E94_u5F15_u7406"><a href="#u4E94_u5F15_u7406" class="headerlink" title="五引理"></a>五引理</h4><p>若下交换图中每一行都正合且$f$ epic，$q$ monic, $g,p$ isomorphism,then $h$ is isomorphism.<br><img src="fivelemma.png" alt="五引理"></p>
<h4 id="u4E94_u5F15_u7406_u7684_u7279_u6B8A_u5F62_u5F0F"><a href="#u4E94_u5F15_u7406_u7684_u7279_u6B8A_u5F62_u5F0F" class="headerlink" title="五引理的特殊形式"></a>五引理的特殊形式</h4><p>若下交换图中每一行都正合且$f,h$ isomorphism,then $g$ is isomorphism.<br><img src="fivelemmaS.png" alt="五引理特殊形式"></p>
<h4 id="u4E24_u4E2A_u56DB_u5F15_u7406_u53CA_u5176_u8BC1_u660E"><a href="#u4E24_u4E2A_u56DB_u5F15_u7406_u53CA_u5176_u8BC1_u660E" class="headerlink" title="两个四引理及其证明"></a>两个四引理及其证明</h4><ol>
<li><p>若下交换图中每一行都正合且 $f$ epic，$p$ monic, $g$ monic,then $h$ is monic.<br><img src="fourlemma1.png" alt="四引理1"><br>$\forall c \in C$, 若 $h(c) = 0$, 则 $pw(c)＝w’h(c)=0$, 因为 $p$ monic, 因此 $w(c)=0$, 又由行正合知，$\exists b \in B$ 使得 $v(b)=c$，因此 $v’g(b)=hv(b)=h(c)=0$, 由行正合知, $ \exists a’ \in A’ $ 使得 $u’(a’)=g(b)$，由 $f$ epic 知 $\exists a \in A$ 使得 $f(a) = a’$. 因此 $gu(a) = u’f(a)=g(b)$. 又由 $g$ monic 知， $b = u(a)$. 因此 $c = vu(a) = 0$. 证毕。</p>
</li>
<li><p>若下交换图中每一行都正合且 $g$ epic，$q$ monic, $p$ epic,then $h$ is epic.<br><img src="fourlemma2.png" alt="四引理2"><br>$\forall c’ \in C’$, 因为 $p$ epic, 知 $\exists d \in D$ 使得 $p(d) = w’(c’)$, 所以 $qs(d) = s’p(d) = s’w’(c’) = 0$, 又 $q$ monic, 因此 $s(d) = 0$, 由行正合知, $\exists c \in C$，使得 $w(c) = d$.因此 $w’(c’-h(c))=w’(c’)-w’h(c)=p(d)-pw(c)=0$. 由行正合知，$\exists b’ \in B’$ 使得 $v’(b’) = c’ - h(c)$, 又由 $g$ epic 知 $\exists b \in B$ 使得 $g(b) = b’$ 因此 $hv(b)= v’g(b) - v’(b’)=c’-h(c)$. 即 $c’=h(v(b)+c)$. 证毕。</p>
</li>
</ol>
<p>四引理记忆方法： 左满右单，两满夹一满，两单夹一单。</p>
<blockquote>
<p>显然上述两个四引理显然可推出五引理。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在同调代数中，Five lemma，Snake lemma，Nine lemma （五引理，蛇形引理，马蹄引理）都是重要的引理。这里介绍一下 五引理。其实它的一般形式是有两个四引理得出的。</p>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个简单组合问题]]></title>
    <link href="http://dna049.com/2016/06/03/one-Combination/"/>
    <id>http://dna049.com/2016/06/03/one-Combination/</id>
    <published>2016-06-03T00:33:41.000Z</published>
    <updated>2016-06-03T06:10:53.000Z</updated>
    <content type="html"><![CDATA[<p>在计蒜之道群里面，有同学提了一个问题，如下：</p>
<ol>
<li>使用 $0$~$9$ 中的数字，不重复，不遗漏</li>
<li>将数字分成任意段，每段都应是一个平方数（可以是0但无前置0）</li>
<li>段的顺序不影响结果。例如 $1\;4$ 和 $4\;1$ 是同一组，计 $1$</li>
</ol>
<p>问能组成多少种这样的平方数组合？<br><a id="more"></a></p>
<p>本渣实在太弱，一开始写很傻逼的 for 循环，后来又写了很复杂很容易错的 bfs 做法，其实根本就不需要，直接 dfs，哎是在太弱了。当然这个问题可以进化到任意进制里去。只要相应修改代码中的 $B$ 即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000") // C++ only</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ( ( _WIN32 || __WIN32__ ) &amp;&amp; __cplusplus &lt; <span class="number">201103L</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%I64d"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%lld"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="comment">//typedef __int128 ll; // for g++</span></span><br><span class="line"><span class="comment">//const int INF =  0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">//1e9+7,1e9+9,1e18+3,1e18+9 are prime</span></span><br><span class="line"><span class="comment">//479&lt;&lt;21|1=1004535809,17&lt;&lt;27|1=2281701377 and g=3</span></span><br><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">10</span>;</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="keyword">int</span> sa[N],cnt[B],sz,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i) cnt[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(++cnt[x%B] == <span class="number">2</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        x/=B;++r;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        LL t = LL(i)*i;</span><br><span class="line">        <span class="keyword">int</span> tmp = check(t);</span><br><span class="line">        <span class="keyword">if</span>(tmp)&#123;</span><br><span class="line">            a[sz] = t;</span><br><span class="line">            sa[sz++] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preadd</span><span class="params">(LL x, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        cnt[x%B]+=p;</span><br><span class="line">        x/=B;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(LL x, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    preadd(a[x], p);</span><br><span class="line">    n+=p*sa[x];</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    preadd(a[x], -p);</span><br><span class="line">    n-=p*sa[x];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans,maxdep;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep,<span class="keyword">int</span> ed)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= B || dep == maxdep)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==B)  ++ans;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ed+<span class="number">1</span>;i&lt;sz;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!add(i,<span class="number">1</span>))   <span class="keyword">continue</span>;</span><br><span class="line">        dfs(dep+<span class="number">1</span>,i);</span><br><span class="line">        add(i,-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i)    cnt[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i)    ++cnt[i*i%B];</span><br><span class="line">    maxdep = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">            ++maxdep;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sz = init();</span><br><span class="line">    ans = n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i)   cnt[i]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        #define dna049 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    freopen(<span class="string">"/Users/dna049/Desktop/AC/in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    LL time = clock();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//        freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;getans()&lt;&lt;endl;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"time: %f\n"</span>,<span class="number">1.0</span>*(clock()-time)/CLOCKS_PER_SEC);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过上面做法还是有点挫，好的做法是将用一个二进制数字表示状态即可，但是这样 $B$ 就不能取的太大。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000") // C++ only</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ( ( _WIN32 || __WIN32__ ) &amp;&amp; __cplusplus &lt; <span class="number">201103L</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%I64d"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%lld"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="comment">//typedef __int128 ll; // for g++</span></span><br><span class="line"><span class="comment">//const int INF =  0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">//1e9+7,1e9+9,1e18+3,1e18+9 are prime</span></span><br><span class="line"><span class="comment">//479&lt;&lt;21|1=1004535809,17&lt;&lt;27|1=2281701377 and g=3</span></span><br><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">10</span>;</span><br><span class="line">LL a[N],s[N],sb;</span><br><span class="line"><span class="keyword">int</span> ans,sz;</span><br><span class="line"><span class="function">LL <span class="title">check</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r &amp; (<span class="number">1L</span>L&lt;&lt;(x%B)))    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        r |= <span class="number">1L</span>L&lt;&lt;(x%B);</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        a[sz] = LL(i)*i;</span><br><span class="line">        LL t = check(a[sz]);</span><br><span class="line">        <span class="keyword">if</span>(t)   s[sz++] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B;++i)    sb |= <span class="number">1L</span>L&lt;&lt;i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LL q, <span class="keyword">int</span> ed)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q == sb)&#123;</span><br><span class="line">        ++ans;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ed+<span class="number">1</span>;i&lt;sz;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q&amp;s[i])  <span class="keyword">continue</span>;</span><br><span class="line">        dfs(q|s[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!sz) init();</span><br><span class="line">    dfs(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        #define dna049 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    freopen(<span class="string">"/Users/dna049/Desktop/AC/in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    LL time = clock();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//        freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;getans()&lt;&lt;endl;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"time: %f\n"</span>,<span class="number">1.0</span>*(clock()-time)/CLOCKS_PER_SEC);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在计蒜之道群里面，有同学提了一个问题，如下：</p>
<ol>
<li>使用 $0$~$9$ 中的数字，不重复，不遗漏</li>
<li>将数字分成任意段，每段都应是一个平方数（可以是0但无前置0）</li>
<li>段的顺序不影响结果。例如 $1\;4$ 和 $4\;1$ 是同一组，计 $1$</li>
</ol>
<p>问能组成多少种这样的平方数组合？<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016 百度之星复赛 round 3]]></title>
    <link href="http://dna049.com/2016/05/30/2016-Baidu-Astar-3/"/>
    <id>http://dna049.com/2016/05/30/2016-Baidu-Astar-3/</id>
    <published>2016-05-30T13:55:40.000Z</published>
    <updated>2016-05-30T15:07:11.000Z</updated>
    <content type="html"><![CDATA[<p>只能贴部分题解了，因为太弱了。其它题不会，也不怎么感兴趣。</p>
<blockquote>
<p>弱渣需要继续努力。</p>
</blockquote>
<a id="more"></a>
<h4 id="hdu_5714__u62CD_u7167__u9898_u76EE"><a href="#hdu_5714__u62CD_u7167__u9898_u76EE" class="headerlink" title="hdu 5714 拍照 题目"></a>hdu 5714 拍照 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5714" target="_blank" rel="external">题目</a></h4><p>大致题意：有一些船在河里以相同的速度水平行驶（有的向左，有的向右），一个人在河边视角90度，问此人在何时何处能看到最多的船。</p>
<p>显然，我们可以把向左的船看作静止的。如果只看静止的船，那么这个问题就变成了最多区间交问题。排序处理一下就行了。不好表达，看代码自然明了。对于向右的船，如果在静止情况最优解的左边，那么会算入最终答案，否则不会。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000") // C++ only</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ( ( _WIN32 || __WIN32__ ) &amp;&amp; __cplusplus &lt; <span class="number">201103L</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%I64d"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%lld"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="comment">//typedef __int128 ll; // for g++</span></span><br><span class="line"><span class="comment">//const int INF =  0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">//1e9+7,1e9+9,1e18+3,1e18+9 are prime</span></span><br><span class="line"><span class="comment">//479&lt;&lt;21|1=1004535809,17&lt;&lt;27|1=2281701377 and g=3</span></span><br><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> val[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> p,add,type;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p==A.p?add&gt;A.add:p&lt;A.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N],*s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    #define dna049 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    freopen(<span class="string">"/Users/dna049/Desktop/AC/in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    LL time = clock();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> Case = <span class="number">1</span>; Case &lt;= T; ++Case)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,Case);</span><br><span class="line">        s = a;</span><br><span class="line">        <span class="keyword">int</span> n,x,y,z,d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;z,&amp;d);</span><br><span class="line">            x+=z;y-=z;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;y) <span class="keyword">continue</span>;</span><br><span class="line">            *(s++) = (Node)&#123;x,-<span class="number">1</span>,d!=<span class="number">1</span>&#125;;</span><br><span class="line">            *(s++) = (Node)&#123;y,<span class="number">1</span>,d!=<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,s);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, tmax = <span class="number">0</span>;</span><br><span class="line">        val[<span class="number">0</span>]=val[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Node *cur=a; cur&lt;s; ++cur)&#123;</span><br><span class="line">            val[cur-&gt;type]+=cur-&gt;add;</span><br><span class="line">            upmax(tmax,val[<span class="number">0</span>]);</span><br><span class="line">            upmax(ans,tmax+val[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"time: %f\n"</span>,<span class="number">1.0</span>*(clock()-time)/CLOCKS_PER_SEC);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上代码参考 <a href="http://bestcoder.hdu.edu.cn/rating.php?user=wwt15" target="_blank" rel="external">wwt15</a><br>代码优势：用指针迭代，以及 (Node){p,add,type} 的写法值得学习。</p>
</blockquote>
<h4 id="hdu_5715_XOR__u6E38_u620F__u9898_u76EE"><a href="#hdu_5715_XOR__u6E38_u620F__u9898_u76EE" class="headerlink" title="hdu 5715 XOR 游戏 题目"></a>hdu 5715 XOR 游戏 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5715" target="_blank" rel="external">题目</a></h4><p>大致题意：给你一个长为 $n$ 的数组 $a$，把它分成 $M$ 段，且每段的长度不超过 $L$。求使得所有分段方式中每一段异或和的最小值最大的值。</p>
<p>显然，我们预处理出前缀和 $s$，那么问题就变成了，在 $s$ 中取 $M$ 个数，它们相隔不超过 $L$, 使得相邻数之间的异或和的最小值最大。<br>二分答案，每次监测答案能否达到，用 $f[i][j] = 1$ 表示以 $j$ 结尾，取 $i$ 个数，相邻数之间的异或和的最小值大于当前答案。显然我们需要确定的是 $f[M][n]$ 是否为 1。</p>
<p>显然 $f[0][0] = 1$，$f[i][j]=1$ 当且仅当 $\exists k, 1 \leq k \leq L$ 使得 $f[i-1][j-k]=1, s[j] \oplus s[j-k] \geq now$。<br>因此我们直接 $dp$ 就行，但是直接做会超时，因此用数字字典树 Trie 来优化。<br>即求 $f[i][j]$ 时，把 $f[i][j-k]=1,\; 1 \leq k \leq L$ 的那些 $s[k]$ 丢入到字典树中，那么只要查看字典树中是否存在与 $s[j]$ 异或不小于当前答案的数即可。 </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000") // C++ only</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ( ( _WIN32 || __WIN32__ ) &amp;&amp; __cplusplus &lt; <span class="number">201103L</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%I64d"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%lld"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="comment">//typedef __int128 ll; // for g++</span></span><br><span class="line"><span class="comment">//const int INF =  0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">//1e9+7,1e9+9,1e18+3,1e18+9 are prime</span></span><br><span class="line"><span class="comment">//479&lt;&lt;21|1=1004535809,17&lt;&lt;27|1=2281701377 and g=3</span></span><br><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="keyword">struct</span> Trie&#123;</span><br><span class="line">    Trie *nt[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    Trie() &#123; nt[<span class="number">0</span>] = nt[<span class="number">1</span>] = <span class="literal">NULL</span>; cnt = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxb = <span class="number">31</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Trie* root, <span class="keyword">int</span> x, <span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    root-&gt;cnt += add;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Maxb-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;nt[(x&gt;&gt;i)&amp;<span class="number">1</span>]==<span class="literal">NULL</span>)  root-&gt;nt[(x&gt;&gt;i)&amp;<span class="number">1</span>] = <span class="keyword">new</span> Trie();</span><br><span class="line">        root = root-&gt;nt[(x&gt;&gt;i)&amp;<span class="number">1</span>];</span><br><span class="line">        root-&gt;cnt += add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Trie *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;nt[<span class="number">0</span>] != <span class="literal">NULL</span>) clear(root-&gt;nt[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;nt[<span class="number">1</span>] != <span class="literal">NULL</span>) clear(root-&gt;nt[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(Trie* root,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Maxb-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        Trie* t = root-&gt;nt[((x&gt;&gt;i)^<span class="number">1</span>)&amp;<span class="number">1</span>];</span><br><span class="line">        root = root-&gt;nt[((k^x)&gt;&gt;i)&amp;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(!((k&gt;&gt;i)&amp;<span class="number">1</span>) &amp;&amp; t != <span class="literal">NULL</span>)   ans += t-&gt;cnt;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>)    ans += root-&gt;cnt;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],n,m,L,now;</span><br><span class="line"><span class="keyword">bool</span> f[M][N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(Trie *root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i-<span class="number">1</span>][j-<span class="number">1</span>]) insert(root,a[j-<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(j&gt;L&amp;&amp;f[i-<span class="number">1</span>][j-L-<span class="number">1</span>])  insert(root,a[j-L-<span class="number">1</span>],-<span class="number">1</span>);</span><br><span class="line">            f[i][j] = getans(root,a[j],now) != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=L;++j)&#123; <span class="comment">// L &lt;= n</span></span><br><span class="line">            <span class="keyword">if</span>(f[i-<span class="number">1</span>][n-j]) insert(root, a[n-j], -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[m][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        #define dna049 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    freopen(<span class="string">"/Users/dna049/Desktop/AC/in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    LL time = clock();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cc = <span class="number">1</span>; cc &lt;= T; ++cc)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,cc);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;L);</span><br><span class="line">        <span class="keyword">int</span> tmax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">            upmax(tmax,a[i]);</span><br><span class="line">            a[i]^=a[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Trie* root = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)   insert(root, a[i], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;tmax)   r&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        r+=r-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            now = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(root)) l=now+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>        r=now-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r);</span><br><span class="line">        clear(root);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"time: %f\n"</span>,<span class="number">1.0</span>*(clock()-time)/CLOCKS_PER_SEC);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="hdu_5717__u77E9_u9635_u65B9_u7A0B_u7684_u89E3__u9898_u76EE"><a href="#hdu_5717__u77E9_u9635_u65B9_u7A0B_u7684_u89E3__u9898_u76EE" class="headerlink" title="hdu 5717 矩阵方程的解 题目"></a>hdu 5717 矩阵方程的解 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5717" target="_blank" rel="external">题目</a></h4><p>此题就是求解线性方程组</p>
<p>$$ (x_1,x_2, \cdots, x_n) A = (1,0,\cdots,0) $$<br>其中 $A = (a_{ij})_{n \times n}, \quad a_{ij} = [i \mid j]$</p>
<p>题目问，第 $k$ 个 $d$ 在 $x = (x_1,x_2, \cdots, x_n)$ 中 的位置。</p>
<p>由我的博文：<a href="http://dna049.com/2016/01/21/Two-inversion-formula-and-its-matrix-form/">两类反演公式及其矩阵形式</a> 知，矩阵 $A$ 的转置本质上就是 Mobius 反演的矩阵形式，因此 $A$ 的逆矩阵 $B = (b_{ij})_{n \times n} $</p>
<p>$$ b_{ij} = \left \lbrace \begin{array}{cc} \mu (\frac{i}{j}), &amp; j|i \\<br>0, &amp; else. \end{array} \right. $$</p>
<p>而 $x$ 其实就是 $B$ 的第一行，因此 $x_i = \mu(i)$。因为题目保证了有答案，因此 $d$ 只可能是 $-1,0,1$。</p>
<p>由我的博文：<a href="http://dna049.com/2016/01/20/Dirichlet-product-of-number-function/">数论函数的 Dirichlet 积</a> 知</p>
<ol>
<li>$M(n)=\sum_{i=1}^n \mu(i)$ 有计算公式<br>$$ \sum_{i=1} ^n M(\lfloor \frac{n}{i} \rfloor) = 1 $$</li>
<li>$Q(n)=\sum_{i=1}^n |\mu(i)|$ 有计算公式<br>$$ Q(n) = \sum_{d^2 \leq x} \mu(d) \lfloor \frac{x}{d^2} \rfloor $$</li>
</ol>
<p>那么 $n$ 以内的，使得</p>
<ol>
<li>$\mu(m)=-1$ 个数： $\frac{Q(n)-M(n)}{2}$</li>
<li>$\mu(m)=0$ 的个数： $n-Q(n)$</li>
<li>$\mu(m)=1$ 的个数： $\frac{Q(n)+M(n)}{2}$</li>
</ol>
<p>最终我们进行 “二分查找” 答案。当时 TLE 就是因为本渣用的是最普通的二分查找，导致过多计算最后爆炸。这里应该启发式的思考，以后写二分查找一定要对问题的性质进行思考，启发式查找进而减少迭代步数。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000") // C++ only</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="comment">//typedef __int128 ll; // for g++</span></span><br><span class="line"><span class="comment">//const int INF =  0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">//1e9+7,1e9+9,1e18+3,1e18+9 are prime</span></span><br><span class="line"><span class="comment">//479&lt;&lt;21|1=1004535809,17&lt;&lt;27|1=2281701377 and g=3</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ( ( _WIN32 || __WIN32__ ) &amp;&amp; __cplusplus &lt; <span class="number">201103L</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%I64d"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lld <span class="string">"%lld"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.3e7</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> ip[N];</span><br><span class="line"><span class="keyword">int</span> mu[N],p[N],sumu[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_mu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;ip[<span class="number">2</span>]=<span class="literal">true</span>;p[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   ip[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>,cnt = <span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ip[i])&#123;</span><br><span class="line">            p[cnt++] = i;</span><br><span class="line">            mu[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>,t;j&lt;cnt&amp;&amp;(t= i * p[j])&lt;N;++j)&#123;</span><br><span class="line">            ip[t] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line">            mu[t] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">4</span>)   mu[i]=-mu[i&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)    sumu[i]=sumu[i-<span class="number">1</span>]+mu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;LL,LL&gt; mp;</span><br><span class="line"><span class="function">LL <span class="title">M</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> sumu[n];</span><br><span class="line">    <span class="built_in">map</span>&lt;LL,LL&gt;::iterator it = mp.find(n);</span><br><span class="line">    <span class="keyword">if</span>(it!=mp.end())    <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    LL r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j=n/(n/i);</span><br><span class="line">        r-=(j-i+<span class="number">1</span>)*M(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    mp.insert(pair&lt;LL,LL&gt;(n,r));</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Q</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    LL r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>,t;(t=i*i)&lt;=n;++i)&#123;</span><br><span class="line">        r+=mu[i]*(n/t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">f</span><span class="params">(<span class="keyword">int</span> d, LL n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">0</span>)  <span class="keyword">return</span> n-Q(n);</span><br><span class="line">    <span class="keyword">if</span>(d == -<span class="number">1</span>) <span class="keyword">return</span> (Q(n)-M(n))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">1</span>)  <span class="keyword">return</span> (Q(n)+M(n))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getans</span><span class="params">(<span class="keyword">int</span> d, LL k)</span></span>&#123;</span><br><span class="line">    LL l = <span class="number">0</span>, r = <span class="number">5</span>*k+<span class="number">100</span>,m,t;</span><br><span class="line">    LL wl = <span class="number">0</span>, wr = f(d,r);</span><br><span class="line">    <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">        m = <span class="number">1.0</span>*(k-wl)/(wr-wl)*(r-l)+l;</span><br><span class="line">        m = min(max(m,l+<span class="number">1</span>),r-<span class="number">1</span>);</span><br><span class="line">        t = f(d,m);</span><br><span class="line">        <span class="keyword">if</span>(t&lt;k) l=m,wl=t;</span><br><span class="line">        <span class="keyword">else</span>    r=m,wr=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//#define dna049 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    freopen(<span class="string">"/Users/dna049/Desktop/AC/in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    LL time = clock();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    init_mu();</span><br><span class="line">    <span class="keyword">int</span> T,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span> lld,&amp;d,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(lld <span class="string">"\n"</span>,getans(d,k));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> dna049</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"time: %f\n"</span>,<span class="number">1.0</span>*(clock()-time)/CLOCKS_PER_SEC);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>欢迎批评指正</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>只能贴部分题解了，因为太弱了。其它题不会，也不怎么感兴趣。</p>
<blockquote>
<p>弱渣需要继续努力。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SG 函数之取石子博弈]]></title>
    <link href="http://dna049.com/2016/05/29/Nim-SG-function/"/>
    <id>http://dna049.com/2016/05/29/Nim-SG-function/</id>
    <published>2016-05-29T04:12:10.000Z</published>
    <updated>2016-05-30T03:25:48.000Z</updated>
    <content type="html"><![CDATA[<p>在2002年张一飞写过一篇论文 <a href="NimGame.pdf">《由感性认识到理性认识－透析一类博弈游戏的解答过程》</a> 从此开启了这类博弈问题的大门，留下学习笔记。<br><a id="more"></a></p>
<h4 id="u53D6_u77F3_u5B50_u6E38_u620F"><a href="#u53D6_u77F3_u5B50_u6E38_u620F" class="headerlink" title="取石子游戏"></a>取石子游戏</h4><p>$A,B$ 两人面对若干堆石子，按照如下规则取石子</p>
<ol>
<li>每步至少取一枚石子</li>
<li>每步只能在某一堆取走部分或者全部石子</li>
<li>谁无法按照规则取石子，谁就是输家</li>
</ol>
<p>首先抛开问题，我们先从一般的入手。</p>
<p>我们可以用一个 $n$ 元组 $(a_1,a_2,\cdots,a_n)$ 表示一个局面 $S$。显然<strong>改变 $n$ 元组的顺序仍然是一个局面。</strong></p>
<p>一个局面 $n$ 元局面$(a_1,a_2,\cdots,a_n)$和一个 $m$ 元局面 $(b_1,b_2,\cdots,b_m)$ 之和显然就是一个 $m + n$ 元局面 $(a_1,a_2,\cdots,a_n,b_1,b_2,\cdots,b_m)$。类似的一个局面也可以有多种分解。</p>
<p>对于局面 $S$，若先行者有必胜策略，则称 “$S$ 胜”；<br>对于局面 $S$，若后行者有必胜策略，则称 “$S$ 负”。</p>
<p>如果局面 $S$ 胜，则必然存在取子方式 $S \to T$，且 $T$ 负；<br>如果局面 $S$ 负，则对任意取子方式 $S \to T$，有 $T$ 胜。</p>
<p>局面分解理论，若 $S = A + B$ 则下面结论显然</p>
<ol>
<li>若 $A,B$ 一胜一负，则 $S$ 胜</li>
<li>若 $A,B$ 全为负，则 $S$ 负</li>
<li>若 $A,B$ 全为胜，则 $S$ 无法判断</li>
<li>若 $A=B$，则 $S$ 负</li>
<li>空局面是负局面</li>
</ol>
<p>因此根据上面的分解理论，可以将一个局面进行化简。例如 $(2,2,2,7,9,9)$ 可以化简成 $(2,7)$</p>
<p>而局面分解的关系，很容易让人联想到整数的位运算－异或。</p>
<p>对于上面取石子问题，每一个局面都可以分解成只有一堆石子的局面。<br>对一个局面，定义一个函数 $f$，然后把它们异或是不是，然后判断是非为0，作为是否胜的充要条件.这样做是否可行呢？先对原始例子进行实验。</p>
<p>函数 $f$：若局面 $S$ 只有一个石子，设 $S={a}$，则定义 $f(a) = a$。<br>设局面 $S = (a_1,a_2,\cdots,a_n)=(a_1)+(a_2)+\cdots (a_n)$，则 $f(S) = f(a_1) \oplus f(a_2) \oplus \cdots \oplus f(a_n)$<br>对于一个局面 $S$，若 $f(S) = 0$，则 $S$ 负，否则，$S$ 胜。</p>
<p>下面证明上面的结论。<br>引理：$a_1 \oplus a_2 \oplus a_n = p \neq 0$，则必存在 $1 \leq k \leq n$，使得 $a_k \oplus p &lt; a_k$。这是因为我们看 $p$ 的最高位即知存在 $a_k$ 其最高位也为 $1$, 那么与 $p$ 异或后，这一位就从 $1$ 变为 $0$，证毕。</p>
<p>若 $f(S) = 0$，则无论先行者如何取子 $S \to T$，都有 $f(T) \neq 0$。<br>若 $f(S) \neq 0$，则先行者存在一种取法 $S \to T$, 使得 $f(T) = 0$。这是因为由引理 $a_1 \oplus a_2 \oplus a_n = p \neq 0$，存在 $1 \leq k \leq n$，使得 $x = a_k \oplus p &lt; a_k$。那么我们在第 $k$ 堆取走 $a_k - x$ 个石子，那么 $a_1 \oplus a_2 \oplus a_n \oplus p = 0$，证毕。</p>
<p>这说明了上述想法的可行性。下面把这种思想推广成一般的 SG 函数的情形</p>
<h4 id="SG__u51FD_u6570"><a href="#SG__u51FD_u6570" class="headerlink" title="SG 函数"></a>SG 函数</h4><p>当对石子的取法进行限制时，例如每次最多能去 $m$ 个，或每次最少取 $l$ 个等，此时再令 $f(x) = x$ 就不合适了。那么应该选择怎样的 $f$ 呢。显然 $f$ 必须满足：</p>
<ol>
<li>若 $f(S) = 0$, 则无论先行者如何取子 $S \to T$，都有 $f(T) \neq 0$</li>
<li>若 $f(S) \neq 0$, 则先行者存在一种取子 $S \to T$，使得 $f(T) = 0$。</li>
</ol>
<p>我们用 $(S) = \lbrace S_1,S_2, \cdots S_k \rbrace$ 表示 $S$ 的下一个可能的局面，定义 $g(S) = \lbrace f(S_1),f(S_2), \cdots f(S_k) \rbrace $。</p>
<p>由 $f$ 满足条件1知<br>$$ \lbrace f(S) \rbrace \cap g(S) = \emptyset $$<br>由条件2知<br>$$ \max g(S) &lt; f(S)$$</p>
<p>因此我们定义函数 $f(S)$ 为 $f(S) \equiv \min g(S)$</p>
<blockquote>
<p>写的这么乱，估计只有自己看的懂 0.0</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在2002年张一飞写过一篇论文 <a href="NimGame.pdf">《由感性认识到理性认识－透析一类博弈游戏的解答过程》</a> 从此开启了这类博弈问题的大门，留下学习笔记。<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
      <category term="博弈论" scheme="http://dna049.com/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树上线段树]]></title>
    <link href="http://dna049.com/2016/05/23/Tree-Segment-tree/"/>
    <id>http://dna049.com/2016/05/23/Tree-Segment-tree/</id>
    <published>2016-05-23T00:59:24.000Z</published>
    <updated>2016-05-23T01:42:12.000Z</updated>
    <content type="html"><![CDATA[<p>学了这么久的线段树，竟然从没写过树上线段树。其实本质还是线段树。只是把一开始的树结构用 dfs 序变成线段的形式，然后再用线段树加速。<br><a id="more"></a></p>
<p>问题是给你一颗树，每个节点都有权重，问从起点 0 开始必须经过节点 x 的权重和的最大值。经过 dfs，$L[x], R[x]$ 是以 $x$ 为根的节点。那么每次更新 $x$ 的值相当于给区间 $L[x], R[x]$ 加一个值。而最终我们的问题，其实就是求区间 $L[x], R[x]$ 的最大值。最后写线段树时要延迟更新。</p>
<h4 id="u4F8B_u9898_hdu"><a href="#u4F8B_u9898_hdu" class="headerlink" title="例题 hdu"></a>例题 hdu</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span>(a&lt;b) a=b;&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lrt rt&lt;&lt;<span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rrt rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lson l,m,lrt</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rson m+<span class="number">1</span>,r,rrt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line">LL mx[N*<span class="number">3</span>],flag[N*<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], sc, ncnt, L[N], R[N];</span><br><span class="line"><span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> ed;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    sc = ncnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)    head[i]=-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[sc].ed = v;</span><br><span class="line">    e[sc].next = head[u];</span><br><span class="line">    head[u] = sc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123; <span class="comment">// dfs order</span></span><br><span class="line">    L[x] = ++ncnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; i!=-<span class="number">1</span>; i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].ed != fa)   dfs(e[i].ed, x);</span><br><span class="line">    &#125;</span><br><span class="line">    R[x] = ncnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    mx[rt]=max(mx[lrt],mx[rrt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag[rt])&#123;</span><br><span class="line">        flag[lrt]+=flag[rt];</span><br><span class="line">        flag[rrt]+=flag[rt];</span><br><span class="line">        mx[lrt]+=flag[rt];</span><br><span class="line">        mx[rrt]+=flag[rt];</span><br><span class="line">        flag[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    flag[rt] = mx[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)  <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r&lt;= R)&#123;</span><br><span class="line">        mx[rt] += p;</span><br><span class="line">        flag[rt] += p;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m)  add(p, L, R, lson);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; m)   add(p, L, R, rson);</span><br><span class="line">    pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;=l &amp;&amp; r &lt;= R) <span class="keyword">return</span> mx[rt];</span><br><span class="line">    pushDown(rt);</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    LL ans= -<span class="number">1L</span>L&lt;&lt;<span class="number">62</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m)    upmax(ans, query(L, R, lson));</span><br><span class="line">    <span class="keyword">if</span>(R &gt; m)     upmax(ans, query(L, R, rson));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/Users/dna049/Desktop/AC/in","r",stdin);</span></span><br><span class="line">    <span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    <span class="comment">//    openStack();</span></span><br><span class="line">    <span class="keyword">int</span> T, Case = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++Case);</span><br><span class="line">        <span class="keyword">int</span> n, m, u, v, op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            addedge(u, v);</span><br><span class="line">            addedge(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">            add(a[i], L[i], R[i], <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;op, &amp;u);</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">                v -= a[u];</span><br><span class="line">                add(v, L[u], R[u], <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">                a[u] += v;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;query(L[u], R[u], <span class="number">1</span>, n, <span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>学了这么久的线段树，竟然从没写过树上线段树。其实本质还是线段树。只是把一开始的树结构用 dfs 序变成线段的形式，然后再用线段树加速。<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[状态 dp]]></title>
    <link href="http://dna049.com/2016/05/22/state-dp/"/>
    <id>http://dna049.com/2016/05/22/state-dp/</id>
    <published>2016-05-21T16:59:03.000Z</published>
    <updated>2016-05-21T17:21:38.000Z</updated>
    <content type="html"><![CDATA[<p>好久没做 状态dp 的问题了，经常用来将 NP 问题，变得小规模可解问题。确实是一个很经典的东西，最重要的是知道 $dp[i][j]$ 的意义，其次才是状态转移。<br><a id="more"></a></p>
<h4 id="hdu_5691"><a href="#hdu_5691" class="headerlink" title="hdu 5691"></a>hdu 5691</h4><p>这题大意：给你一些数，有些数固定有些数，另外的数可以随意调节，问你如何调解使得下式取值最大</p>
<p>$$ a_0 a_1 + a_1 a_2 + \cdots + a_{n-1} a_n $$</p>
<p>这确实是经典的状态转移问题：</p>
<p>设 $i$ 的 2 进制表示是 $0 \cdots 0 i_1 0 \cdots 0 ix 0\cdots 0$ 有 $x$ 位。<br>$dp[i][j]$ 表示前 $x$ 个空 分别填了 $a[i_1],a[i_2],\cdots,a[i_x]$ 的一个排列 且 $i_x = j$ 使目标最大的最大值。<br>那么，自然地有<br>$$ dp[i|(1&lt;&lt;k][k] = max(dp[i][j]+a[j]*a[k]) $$</p>
<p>详细转移见代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span> (a&lt;b) a=b;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF =  <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],p[N];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/Users/dna049/Desktop/AC/in","r",stdin);</span></span><br><span class="line"><span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> T, Case = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++Case);</span><br><span class="line">        <span class="keyword">int</span> n, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)    p[i] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,a+i, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(x != -<span class="number">1</span>) p[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                dp[i][j] = -INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p[<span class="number">0</span>]!=-<span class="number">1</span>)    dp[<span class="number">1</span>&lt;&lt;p[<span class="number">0</span>]][p[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)   dp[<span class="number">1</span>&lt;&lt;i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!(i&amp;(<span class="number">1</span>&lt;&lt;j)))   <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;k))    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">int</span> x = __builtin_popcount(i);</span><br><span class="line">                    <span class="keyword">if</span>(p[x] == -<span class="number">1</span> || p[x] == k)&#123;</span><br><span class="line">                        upmax(dp[i|(<span class="number">1</span>&lt;&lt;k)][k], dp[i][j]+a[j]*a[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = -INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) upmax(res, dp[(<span class="number">1</span>&lt;&lt;n)-<span class="number">1</span>][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>好久没做 状态dp 的问题了，经常用来将 NP 问题，变得小规模可解问题。确实是一个很经典的东西，最重要的是知道 $dp[i][j]$ 的意义，其次才是状态转移。<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正约数个数 $d(n)$ 的一个公式]]></title>
    <link href="http://dna049.com/2016/05/18/a-trival-formula%20about%20d(n)/"/>
    <id>http://dna049.com/2016/05/18/a-trival-formula about d(n)/</id>
    <published>2016-05-18T06:49:51.000Z</published>
    <updated>2016-05-18T15:38:32.000Z</updated>
    <content type="html"><![CDATA[<p>codeforce 上有<a href="http://codeforces.com/contest/235/problem/E" target="_blank" rel="external">一道题</a> 。 rng_58 用一个奇妙的公式解决了这个问题。并且给出了公式的证明，这里给出另一个比较好的证明。<br><a id="more"></a></p>
<h4 id="24d_28n_29_24__u7684_u4E00_u4E2A_u516C_u5F0F"><a href="#24d_28n_29_24__u7684_u4E00_u4E2A_u516C_u5F0F" class="headerlink" title="$d(n)$ 的一个公式"></a>$d(n)$ 的一个公式</h4><p>按照公式，我们有 $d(n) = \sum_{i \mid n} 1$。其实这个公式可以推广为</p>
<p>$$ d(n_1,\cdots,n_m) = \sum_{i_1 \mid n_1} \cdots \sum_{i_m \mid n_m} 1, \; gcd(i_s,i_t)=1,1 \leq  s &lt; t \leq m$$</p>
<p>Proof： 数学归纳法证明：$m=1$ 时结论显然。<br>设结论对 $m-1$ 成立。<br>$$ \begin{aligned}<br>d(n_1,\cdots,n_m) &amp;= \sum_{i \mid n_1,\cdots,n_m} 1 =  \sum_{d \mid n_m} \sum_{i \mid n_1,\cdots,n_m , gcd(i,n_m)=d} 1 \\<br>&amp;= \sum_{d \mid n_m} \sum_{\frac{i}{d} \mid n_1,\cdots,n_{m-1} , gcd(\frac{i}{d},\frac{n_m}{d})=1} 1 \\<br>&amp;= \sum_{d \mid n_m} \sum_{i \mid n_1,\cdots,n_{m-1} , gcd(i,d)=1} 1<br>\end{aligned} $$<br>由数学归纳法知，原结论成立。</p>
<h4 id="u4E0A_u9762_u516C_u5F0F_u7684_u4E00_u4E2A_u5E94_u7528"><a href="#u4E0A_u9762_u516C_u5F0F_u7684_u4E00_u4E2A_u5E94_u7528" class="headerlink" title="上面公式的一个应用"></a>上面公式的一个应用</h4><p>$$ \sum_{i_1 = 1} ^{n_1} \cdots \sum_{i_m = 1} ^{n_m} d(n_1,\cdots,n_m) = \sum_{gcd(i_s,i_t)=1,1 \leq  s &lt; t \leq m } \lfloor \frac{n_1}{i_1} \rfloor \cdots  \lfloor \frac{n_m}{i_m} \rfloor $$</p>
<h4 id="24m_3D2_24__u7684_u53E6_u4E00_u4E2A_u516C_u5F0F"><a href="#24m_3D2_24__u7684_u53E6_u4E00_u4E2A_u516C_u5F0F" class="headerlink" title="$m=2$ 的另一个公式"></a>$m=2$ 的另一个公式</h4><p>令 $F(n) = \sum_{i=1} ^n \lfloor \frac{n}{i} \rfloor $，则显然<br>$$ \begin{aligned}<br>\sum_{i=1} ^n \sum_{j=1,gcd(i,j)=1} ^m \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{j} \rfloor &amp;= \sum_{i=1} ^n \lfloor \frac{n}{i} \rfloor \sum_{t \mid i} \mu(t) \sum_{1 \leq j \leq m, t \mid j} \lfloor \frac{m}{j} \rfloor \\<br>&amp;= \sum_{i=1} ^n \lfloor \frac{n}{i} \rfloor \sum_{t \mid i} \mu(t) F(\lfloor \frac{m}{t} \rfloor) \\<br>&amp;= \sum_{t} \mu(t) F(\lfloor \frac{m}{t} \rfloor) \sum_{1 \leq i \leq n, t \mid i} \lfloor \frac{n}{i} \rfloor \\<br>&amp;= \sum_{t} \mu(t) F(\lfloor \frac{m}{t} \rfloor) F(\lfloor \frac{n}{t} \rfloor)<br>\end{aligned} $$<br>即<br>$$ \sum_{i=1} ^n \sum_{j=1} ^m gcd(ij) =  \sum_{t} \mu(t) F(\lfloor \frac{m}{t} \rfloor) F(\lfloor \frac{n}{t} \rfloor) $$</p>
<h4 id="u8FD9_u8BF4_u660E_u6211_u4EEC_u53EF_u4EE5_u5728__24O_28n__5Clog_n_29_24__u590D_u6742_u5EA6_u5185_u8BA1_u7B97_u6539_u95EE_u9898_u3002"><a href="#u8FD9_u8BF4_u660E_u6211_u4EEC_u53EF_u4EE5_u5728__24O_28n__5Clog_n_29_24__u590D_u6742_u5EA6_u5185_u8BA1_u7B97_u6539_u95EE_u9898_u3002" class="headerlink" title="这说明我们可以在 $O(n \log n)$ 复杂度内计算改问题。"></a>这说明我们可以在 $O(n \log n)$ 复杂度内计算改问题。</h4><p>可是 $m&gt;2$ 就比较麻烦了。</p>
<h4 id="24f_28n_29__3D__5Csum__7Bi_3D1_7D__5En_d_28i_29__3D__5Csum__7Bi_3D1_7D__5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor_24"><a href="#24f_28n_29__3D__5Csum__7Bi_3D1_7D__5En_d_28i_29__3D__5Csum__7Bi_3D1_7D__5Clfloor__5Cfrac_7Bn_7D_7Bi_7D__5Crfloor_24" class="headerlink" title="$f(n) = \sum_{i=1} ^n d(i) = \sum_{i=1} \lfloor \frac{n}{i} \rfloor$"></a>$f(n) = \sum_{i=1} ^n d(i) = \sum_{i=1} \lfloor \frac{n}{i} \rfloor$</h4><p>上面这个公式有趣的是,若要求单个的 $f(n)$ 用后面一个可以在 $O(\sqrt{n})$ 复杂度解决，而如果要求 $f(1),\cdots,f(n)$ 则可以用前面一个公式在 $O(n \log n)$ 复杂度解决。</p>
<h4 id="codeforce_235"><a href="#codeforce_235" class="headerlink" title="codeforce 235"></a><a href="http://codeforces.com/contest/235/problem/E" target="_blank" rel="external">codeforce 235</a></h4><p>求解:<br>$$ \sum_{i=1}^a \sum_{j=1}^b \sum_{k=1}^c d(ijk) $$<br>如果令 $f(n) = \sum_{i=1} ^n d(i),g(n)=\sum_{i \mid n} \mu(i) f(\lfloor \frac{c}{i} \rfloor) $<br>那么<br>$$ \sum_{i=1}^a \sum_{j=1}^b \sum_{k=1}^c d(ijk) = \sum_{t} \mu(t) \lfloor \frac{a}{it} \rfloor \lfloor \frac{b}{it} \rfloor g(ijt^2)$$</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------ Welcome to my blog: http://dna049.com ------*/</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2002</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],g[N*N];</span><br><span class="line"><span class="keyword">bool</span> ip[N];</span><br><span class="line"><span class="keyword">int</span> mu[N],p[N],nt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_mu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;ip[<span class="number">2</span>]=<span class="literal">true</span>;p[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   ip[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>,cnt = <span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ip[i])&#123;</span><br><span class="line">            p[cnt++] = i;</span><br><span class="line">            mu[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>,t;j&lt;cnt&amp;&amp;(t= i * p[j])&lt;N;++j)&#123;</span><br><span class="line">            ip[t] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line">            mu[t] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">4</span>)  mu[i]=-mu[i&gt;&gt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        sum += (j-i+<span class="number">1</span>)*(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)       f[i]=getsum(i);    init_mu();</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mu[i]==<span class="number">0</span>)    <span class="keyword">continue</span>;</span><br><span class="line">        nt[last]=i;</span><br><span class="line">        last = i;</span><br><span class="line">    &#125;</span><br><span class="line">    nt[last]=N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getg</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a*b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)   g[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n&amp;&amp;i&lt;=c;i=nt[i])&#123; <span class="comment">// n^2 \log n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i,t=mu[i]*f[c/i];j&lt;=n;j+=i)   g[j]+=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getf</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;++j)&#123;</span><br><span class="line">            res+=(a/i)*(b/j)*g[i*j*d];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        freopen("/Users/dna049/Desktop/AC/in","r",stdin);</span></span><br><span class="line">    <span class="comment">//    freopen("/Users/dna049/Desktop/AC/out","w",stdout);</span></span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c))&#123;</span><br><span class="line">        getg(a,b,c);</span><br><span class="line">        <span class="keyword">int</span> ab = min(a,b);</span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ab;i=nt[i])&#123;</span><br><span class="line">            res+=mu[i]*getf(a/i,b/i,i*i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">int</span>(res%(<span class="number">1</span>&lt;&lt;<span class="number">30</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>codeforce 上有<a href="http://codeforces.com/contest/235/problem/E">一道题</a> 。 rng_58 用一个奇妙的公式解决了这个问题。并且给出了公式的证明，这里给出另一个比较好的证明。<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二阶线性递推关系模素数的周期]]></title>
    <link href="http://dna049.com/2016/05/15/mod%20period-of-Linear-recurrence-relations-of-order-two/"/>
    <id>http://dna049.com/2016/05/15/mod period-of-Linear-recurrence-relations-of-order-two/</id>
    <published>2016-05-15T10:36:59.000Z</published>
    <updated>2017-04-16T12:53:50.000Z</updated>
    <content type="html"><![CDATA[<p>之前其实写过几篇博客零散的讨论过这个问题，但是要么结论不强，要么证明不优美，这次突发奇想，一下子看穿了二阶的情形。<br><a href="http://dna049.com/2016/03/12/The-application-of-fast-pow-of-matrix-hdu5451/">在之前博客中讲过</a><br>$$ |GL(n,p)| =  \prod_{i=0}^{n-1} (p^n-p^i) $$<br>即对任意 $n$ 阶可逆矩阵 $A$， $A^{|GL(n,p)|}=I_n$。<br>我们通常求 $n$ 阶线性递推关系表示的数列时都是用矩阵来做的，此时的矩阵其实对应着它的有理标准型，是一类特殊的矩阵，因此很有可能，此类矩阵的周期仅仅是 $|GL(n,p)|$ 的一个因子。<br><a id="more"></a></p>
<h4 id="u4E8C_u9636_u7EBF_u6027_u9012_u63A8_u5173_u7CFB_u6570_u5217_u6A21_u7D20_u6570_24p_24__u5468_u671F_u4E3A__24p_5E2-1_24"><a href="#u4E8C_u9636_u7EBF_u6027_u9012_u63A8_u5173_u7CFB_u6570_u5217_u6A21_u7D20_u6570_24p_24__u5468_u671F_u4E3A__24p_5E2-1_24" class="headerlink" title="二阶线性递推关系数列模素数$p$ 周期为 $p^2-1$"></a>二阶线性递推关系数列模素数$p$ 周期为 $p^2-1$</h4><p>设 $f(n)=af(n-1)+bf(n-2),n \geq 2,f(0),f(1)$ 给定。<br>设 $x^2-ax-b=0$ 的解为 $x_1,x_2$ 那么<br>$$ f(n) = c_1 x_1^n +  c_2 x_2^n $$ 其中 c_1,c_2 为由 $f(0),f(1)$ 决定的常数。这里 $x_1,x_2 = \frac{a \pm \sqrt{a^2+b}}{2}$ </p>
<p>如果我们在$\mod p$ 的意义下处理，问题就变成了求 $g(n)=(a + b \sqrt{d})^n$ 的周期为多少?<br>我们考虑<br>$$ F = \lbrace a + b \sqrt{q}  \mid 0 \leq a,b&lt;p \rbrace$$</p>
<ol>
<li>若 $q$ 是 $\mod p$ 二次剩余，那么显然 $F=\mathbb{Z}_p$</li>
<li>否则，$F$ 是域 $\mathbb{Z}_p$ 的二次拓域。其非0元全体关于乘法构成了群。</li>
</ol>
<p>因此无论何种情形都有 $g(p^2)=g(1)$。并且我们求解时可以不依赖矩阵，而直接用 $F$ 中的乘法解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前其实写过几篇博客零散的讨论过这个问题，但是要么结论不强，要么证明不优美，这次突发奇想，一下子看穿了二阶的情形。<br><a href="http://dna049.com/2016/03/12/The-application-of-fast-pow-of-matrix-hdu5451/">在之前博客中讲过</a><br>$$ |GL(n,p)| =  \prod_{i=0}^{n-1} (p^n-p^i) $$<br>即对任意 $n$ 阶可逆矩阵 $A$， $A^{|GL(n,p)|}=I_n$。<br>我们通常求 $n$ 阶线性递推关系表示的数列时都是用矩阵来做的，此时的矩阵其实对应着它的有理标准型，是一类特殊的矩阵，因此很有可能，此类矩阵的周期仅仅是 $|GL(n,p)|$ 的一个因子。<br>]]>
    
    </summary>
    
      <category term="math" scheme="http://dna049.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C 语言中函数 scanf 和 printf]]></title>
    <link href="http://dna049.com/2016/05/11/scanf-and-printf-in-C/"/>
    <id>http://dna049.com/2016/05/11/scanf-and-printf-in-C/</id>
    <published>2016-05-11T04:10:17.000Z</published>
    <updated>2016-05-11T05:50:05.000Z</updated>
    <content type="html"><![CDATA[<p>在C语言中最常用的函数应该就是scanf，printf吧。对于大量输入输出时C++也常用scanf和print代替cin和cout。然而我们学习C语言最先接触的scanf和printf其实我们并不完全了解。<br><a id="more"></a></p>
<h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h2><p>按照 <a href="http://www.cplusplus.com/reference/cstdio/scanf/?kw=scanf" target="_blank" rel="external">C++ reference</a> 的介绍，scanf 的原型为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span>;</span><br><span class="line">format = %[*][width][length]specifier</span><br></pre></td></tr></table></figure></p>
<p><img src="scanf.png" alt="scanf 对应length"></p>
<p>其中上面的[*]表示输入的东西被忽略，[width] 表示最大输入长度，而 [length] 表示是类型的一种延伸，可以是 hh, h, l, ll, j, z, t, L 中的一种。例如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">/*------ Welcome to visit blog of dna049: http://dna049.com ------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%3ld"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input : 12345</span></span><br><span class="line"><span class="comment">// output: 123</span></span><br></pre></td></tr></table></figure></p>
<p>specifier 是必选项 它可以是 $i,d,u,o,x,f,e,g,a,c,s,p,n,%$。还有两个特殊的 [characters]和[^characters]。上面的参数就不过多说了。特别要强调的是这两个特殊的。<br>[characters] 表示只接受 [characters] 中的字符；[^characters] 表示只不接受 [characters] 中的字符。例如：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">/*------ Welcome to visit blog of dna049: http://dna049.com ------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">100</span>],a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[1-9A-Z]"</span>,s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^b]"</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input : 123AaBbCc</span></span><br><span class="line"><span class="comment">// output: 123A</span></span><br><span class="line"><span class="comment">// output: aB</span></span><br></pre></td></tr></table></figure>
<h4 id="u7279_u522B_u6CE8_u610F"><a href="#u7279_u522B_u6CE8_u610F" class="headerlink" title="特别注意"></a><strong>特别注意</strong></h4><p>在使用下面语句进行输入时遇到空白符(whitespace)会结束输入的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br></pre></td></tr></table></figure></p>
<p>whitespace可以使用int isspace ( int c );判断。有这些字符有：<br><img src="whitespace.png" alt="whitespace"></p>
<h4 id="scanf_u5178_u578B_u4F8B_u5B50"><a href="#scanf_u5178_u578B_u4F8B_u5B50" class="headerlink" title="scanf典型例子"></a>scanf典型例子</h4><ol>
<li><p>有时我们明确知道输入为 $(a,b)$ 这种类型，我们可以这样做</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"(%d,%d)"</span>,&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入字符包含除回车之外的字符</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br></pre></td></tr></table></figure>
</li>
<li><p>只输入小写字母和数字</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[0-9a-z]"</span>,str);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="scanf__u8FD4_u56DE_u503C"><a href="#scanf__u8FD4_u56DE_u503C" class="headerlink" title="scanf 返回值"></a>scanf 返回值</h4><ol>
<li>正整数：表示正确输入参数的个数</li>
<li>0：输入不匹配，无法正确输入任何值</li>
<li>EOF（一般为-1）为读到文件结尾或在terminal中输入了 ctrl + z</li>
</ol>
<h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>print 的原型为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span>;</span><br><span class="line">%[flags][width][.precision][length]specifier</span><br></pre></td></tr></table></figure></p>
<p><img src="printf.png" alt="printf"></p>
<p>specifier 和 scanf 的类似就不多说了。[length] [width]同理。[.precision] 一看就懂<br>[flags] 可选有 -,+,#,0。其中</p>
<ol>
<li>- 表示在给定宽度内向左靠齐。默认向右见下例子</li>
<li>+ 表示即使是非负数，前面也要加正号。</li>
<li># 目前不清楚用法。</li>
<li>0 就是在不足宽度的时候补0</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">123.45678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%+10.4f "</span>,a);</span><br><span class="line"><span class="keyword">int</span> t =<span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d "</span>,t);</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">printf</span>(x&amp;<span class="number">1</span>?<span class="string">"%d is odd"</span>:<span class="string">"%d is even"</span>,x);</span><br><span class="line"><span class="comment">// output: +0123.4568 0100 123 is odd</span></span><br></pre></td></tr></table></figure>
<h2 id="u795E_u5668_uFF1Asscanf__u548C_sprintf"><a href="#u795E_u5668_uFF1Asscanf__u548C_sprintf" class="headerlink" title="神器：sscanf 和 sprintf"></a>神器：sscanf 和 sprintf</h2><p>不多说了，举个例子说明问题吧<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/* sscanf example */</span></span><br><span class="line">    <span class="keyword">char</span> sentence []=<span class="string">"Rudolph is 12 years old"</span>;</span><br><span class="line">    <span class="keyword">char</span> str [<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">sscanf</span> (sentence,<span class="string">"%s %*s %d"</span>,str,&amp;i);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"%s -&gt; %d\n"</span>,str,i);</span><br><span class="line">    <span class="comment">/* sprintf example */</span></span><br><span class="line">    <span class="keyword">char</span> buffer [<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> n, a=<span class="number">5</span>, b=<span class="number">3</span>;</span><br><span class="line">    n=<span class="built_in">sprintf</span> (buffer, <span class="string">"%d plus %d is %d"</span>, a, b, a+b);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"[%s] is a string %d chars long\n"</span>,buffer,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: </span></span><br><span class="line"><span class="comment">// Rudolph -&gt; 12</span></span><br><span class="line"><span class="comment">// [5 plus 3 is 8] is a string 13 chars long</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u6700_u540E_u8BF4_u4E00_u4E2A_u6BD4_u8F83_u8BE1_u5F02_u4F46_u662F_u53EF_u4EE5_u7406_u89E3_u7684_u4E8B_u60C5"><a href="#u6700_u540E_u8BF4_u4E00_u4E2A_u6BD4_u8F83_u8BE1_u5F02_u4F46_u662F_u53EF_u4EE5_u7406_u89E3_u7684_u4E8B_u60C5" class="headerlink" title="最后说一个比较诡异但是可以理解的事情"></a>最后说一个比较诡异但是可以理解的事情</h2><blockquote>
<p>sacnf 输入 float 和 double 时分别用 %f,%lf。<br>printf 输出 float 和 double 时用的都是 %f。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在C语言中最常用的函数应该就是scanf，printf吧。对于大量输入输出时C++也常用scanf和print代替cin和cout。然而我们学习C语言最先接触的scanf和printf其实我们并不完全了解。<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[输出源代码的代码]]></title>
    <link href="http://dna049.com/2016/05/09/print-self/"/>
    <id>http://dna049.com/2016/05/09/print-self/</id>
    <published>2016-05-08T17:54:14.000Z</published>
    <updated>2016-05-09T15:16:46.000Z</updated>
    <content type="html"><![CDATA[<p>我们可以把计算机看成一个函数，将一份代码映成一段输出，那么输出为代码本事就是数学中不动点。任意语言都有很多相应版本的这种程序，原理都是类似的，我自己写的C++代码如下：<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**************************************</span><br><span class="line">* Welcome to visit http://dna049.com</span><br><span class="line">**************************************/</span></span><br><span class="line"><span class="built_in">string</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="string">"#include&lt;iostream&gt;"</span>;</span><br><span class="line">a[<span class="number">1</span>]=<span class="string">"#include&lt;string&gt;"</span>;</span><br><span class="line">a[<span class="number">2</span>]=<span class="string">"using namespace std;"</span>;</span><br><span class="line">a[<span class="number">3</span>]=<span class="string">"/**************************************"</span>;</span><br><span class="line">a[<span class="number">4</span>]=<span class="string">"* Welcome to visit http://dna049.com"</span>;</span><br><span class="line">a[<span class="number">5</span>]=<span class="string">"**************************************/"</span>;</span><br><span class="line">a[<span class="number">6</span>]=<span class="string">"string a[20];"</span>;</span><br><span class="line">a[<span class="number">7</span>]=<span class="string">"int main()&#123;"</span>;</span><br><span class="line">a[<span class="number">8</span>]=<span class="string">"for(int i=0;i&lt;8;++i) cout&lt;&lt;a[i]&lt;&lt;endl;"</span>;</span><br><span class="line">a[<span class="number">9</span>]=<span class="string">"for(int i=0;i&lt;=12;++i) cout&lt;&lt;char(97)&lt;&lt;char(91)&lt;&lt;i&lt;&lt;char(93)&lt;&lt;char(61)&lt;&lt;char(34)&lt;&lt;a[i]&lt;&lt;char(34)&lt;&lt;char(59)&lt;&lt;endl;"</span>;</span><br><span class="line">a[<span class="number">10</span>]=<span class="string">"for(int i=8;i&lt;=12;++i) cout&lt;&lt;a[i]&lt;&lt;endl;"</span>;</span><br><span class="line">a[<span class="number">11</span>]=<span class="string">"return 0;"</span>;</span><br><span class="line">a[<span class="number">12</span>]=<span class="string">"&#125;"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">12</span>;++i) <span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(<span class="number">97</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">91</span>)&lt;&lt;i&lt;&lt;<span class="keyword">char</span>(<span class="number">93</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">61</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">34</span>)&lt;&lt;a[i]&lt;&lt;<span class="keyword">char</span>(<span class="number">34</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">59</span>)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">8</span>;i&lt;=<span class="number">12</span>;++i) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们可以把计算机看成一个函数，将一份代码映成一段输出，那么输出为代码本事就是数学中不动点。任意语言都有很多相应版本的这种程序，原理都是类似的，我自己写的C++代码如下：<br>]]>
    
    </summary>
    
      <category term="C++" scheme="http://dna049.com/tags/C/"/>
    
  </entry>
  
</feed>
